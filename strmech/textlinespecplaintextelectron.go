package strmech

import (
	"fmt"
	ePref "github.com/MikeAustin71/errpref"
	"io"
	"strings"
	"sync"
)

type textLineSpecPlainTextElectron struct {
	lock *sync.Mutex
}

// empty - Receives a pointer to an instance of
// TextLineSpecPlainText and proceeds to reset the data values for
// member values to their initial or zero values.
//
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// All the member variable data values contained in input parameter
// 'plainTextLine' will be deleted and reset to their zero values.
//
func (txtLinePlainTextElectron *textLineSpecPlainTextElectron) empty(
	plainTextLine *TextLineSpecPlainText) {

	if txtLinePlainTextElectron.lock == nil {
		txtLinePlainTextElectron.lock = new(sync.Mutex)
	}

	txtLinePlainTextElectron.lock.Lock()

	defer txtLinePlainTextElectron.lock.Unlock()

	if plainTextLine == nil {
		return
	}

	plainTextLine.leftMarginChars = nil

	plainTextLine.rightMarginChars = nil

	plainTextLine.textString = ""

	plainTextLine.turnLineTerminatorOff = false

	plainTextLine.newLineChars = nil

	plainTextLine.textLineReader = nil

	return
}

// equal - Receives pointers to two TextLineSpecPlainText
// instances and proceeds to compare the member data elements to
// determine whether they are equal.
//
// If the data elements of both input parameters 'plainTxtLineOne'
// and 'plainTxtLineTwo' are equal in all respects, this method
// returns a boolean value of 'true'. Otherwise, this method
// returns 'false'.
//
// This method will not perform an equality comparison on member
// variable 'textLineReader'.
//
func (txtLinePlainTextElectron *textLineSpecPlainTextElectron) equal(
	plainTxtLineOne *TextLineSpecPlainText,
	plainTxtLineTwo *TextLineSpecPlainText) bool {

	if txtLinePlainTextElectron.lock == nil {
		txtLinePlainTextElectron.lock = new(sync.Mutex)
	}

	txtLinePlainTextElectron.lock.Lock()

	defer txtLinePlainTextElectron.lock.Unlock()

	if plainTxtLineOne == nil ||
		plainTxtLineTwo == nil {

		return false
	}

	sMechPreon := strMechPreon{}

	if !sMechPreon.equalRuneArrays(
		plainTxtLineOne.leftMarginChars,
		plainTxtLineTwo.leftMarginChars) {
		return false
	}

	if !sMechPreon.equalRuneArrays(
		plainTxtLineOne.rightMarginChars,
		plainTxtLineTwo.rightMarginChars) {
		return false
	}

	if plainTxtLineOne.textString !=
		plainTxtLineTwo.textString {
		return false
	}

	if plainTxtLineOne.turnLineTerminatorOff !=
		plainTxtLineTwo.turnLineTerminatorOff {
		return false
	}

	if !sMechPreon.equalRuneArrays(
		plainTxtLineOne.newLineChars,
		plainTxtLineTwo.newLineChars) {
		return false
	}

	return true
}

// ptr - Returns a pointer to a new instance of
// textLineSpecPlainTextElectron.
//
func (txtLinePlainTextElectron textLineSpecPlainTextElectron) ptr() *textLineSpecPlainTextElectron {

	if txtLinePlainTextElectron.lock == nil {
		txtLinePlainTextElectron.lock = new(sync.Mutex)
	}

	txtLinePlainTextElectron.lock.Lock()

	defer txtLinePlainTextElectron.lock.Unlock()

	return &textLineSpecPlainTextElectron{
		lock: new(sync.Mutex),
	}
}

// readBytes - Implements the io.Reader interface for type
// TextLineSpecPlainText.
//
// This method supports buffered 'read' operations.
//
// This method reads up to len(p) bytes into p. It returns the
// number of bytes read (0 <= n <= len(p)) and any error
// encountered. Even if read returns n < len(p), it may use all
// of p as scratch space during the call.
//
// If some data is available but not len(p) bytes, readBytes()
// conventionally returns what is available instead of waiting
// for more.
//
// When this method encounters an error or end-of-file condition
// after successfully reading n > 0 bytes, it returns the number
// of bytes read. It may return the (non-nil) error from the same
// call or return the error (and n == 0) from a subsequent call.
// An instance of this general case is that a Reader returning
// a non-zero number of bytes at the end of the input stream may
// return either err == EOF or err == nil. The next Read operation
// should return 0, EOF.
//
// Callers should always process the n > 0 bytes returned before
// considering the error err. Doing so correctly handles I/O errors
// that happen after reading some bytes and also both of the
// allowed EOF behaviors.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  plainTextLine              *TextLineSpecPlainText
//     - A pointer to an instance of TextLineSpecPlainText. The
//       formatted text line string generated by this instance will
//       be written to the byte buffer 'p'.
//
//
//  p                          []byte
//     - The byte buffer into which the formatted text line string
//       generated by parameter 'plainTextLine' will be written.
//
//
//  errPrefDto                 *ePref.ErrPrefixDto
//     - This object encapsulates an error prefix string which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods listed
//       as a function chain.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       Type ErrPrefixDto is included in the 'errpref' software
//       package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  n                          int
//     - The number of bytes written to byte buffer 'p'.
//
//
//  err                        error
//     - If this method completes successfully, this returned error
//       Type is set equal to 'nil'. If errors are encountered during
//       processing, the returned error Type will encapsulate an error
//       message.
//
//       readBytes() reads up to len(p) bytes into p. It returns
//       the number of bytes read (0 <= n <= len(p)) and any error
//       encountered. Even if readBytes() returns n < len(p), it
//       may use all of p as scratch space during the call. If some
//       data is available but not len(p) bytes, readBytes()
//       conventionally returns what is available instead of
//       waiting for more.
//
//       When readBytes() encounters an error or end-of-file
//       condition after successfully reading n > 0 bytes, it
//       returns the number of bytes read. It may return the
//       (non-nil) error from the same call or return the error
//       (and n == 0) from a subsequent call. An instance of this
//       general case is that a Reader returning a non-zero number
//       of bytes at the end of the input stream may return either
//       err == EOF or err == nil. The next Read operation should
//       return 0, EOF.
//
//       If an error message is returned, the text value for input
//       parameter 'errPrefDto' (error prefix) will be prefixed or
//       attached at the beginning of the error message.
//
func (txtLinePlainTextElectron *textLineSpecPlainTextElectron) readBytes(
	plainTextLine *TextLineSpecPlainText,
	p []byte,
	errPrefDto *ePref.ErrPrefixDto) (
	n int,
	err error) {

	if txtLinePlainTextElectron.lock == nil {
		txtLinePlainTextElectron.lock = new(sync.Mutex)
	}

	txtLinePlainTextElectron.lock.Lock()

	defer txtLinePlainTextElectron.lock.Unlock()

	n = 0

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewFromErrPrefDto(
		errPrefDto,
		"txtLinePlainTextElectron."+
			"readBytes()",
		"")

	if err != nil {
		return n, err
	}

	if plainTextLine == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'plainTextLine' is "+
			"a nil pointer!\n",
			ePrefix.String())

		return n, err
	}

	pLen := len(p)

	if pLen == 0 {
		err = fmt.Errorf("%v\n"+
			"Error: Input byte array 'p' has zero length!\n",
			ePrefix)

		return n, err
	}

	if plainTextLine.textLineReader == nil {

		var formattedText string

		formattedText,
			err = textLineSpecPlainTextNanobot{}.ptr().
			getFormattedText(
				plainTextLine,
				ePrefix.XCtx("plainTextLine"))

		if err != nil {
			return n, err
		}

		plainTextLine.textLineReader =
			strings.NewReader(formattedText)

	}

	n,
		err = plainTextLine.textLineReader.Read(p)

	if err == io.EOF {
		plainTextLine.textLineReader = nil
	}

	return n, err
}
