package strmech

import (
	"fmt"
	ePref "github.com/MikeAustin71/errpref"
	"io"
	"strings"
	"sync"
	"time"
)

// TextLineSpecStandardLine - is a text specification for a
// standard line of text. A standard line of text comprises a
// single line of text characters which may be repeated one or more
// times.
//
// TextLineSpecStandardLine encapsulates an array of
// ITextFieldSpecification objects which are used to format text
// fields within a single line of text. Essentially, a standard
// text line is a collection of text fields which implement the
// ITextFieldSpecification interface. Text fields can be thought of
// as the building blocks for a standard line of text.
//
// IMPORTANT
//
// ----------------------------------------------------------------
//
// By default, the TextLineSpecStandardLine type will generate a
// line of text with a "new line" ('\n') line termination
// character. The application of this "new line" ('\n') character
// is automatic and by default.
//
// However, users may control and override the application of line
// termination characters through the following methods:
//
//  TextLineSpecStandardLine.SetNewLineChars()
//  TextLineSpecStandardLine.TurnAutoLineTerminationOff()
//  TextLineSpecStandardLine.TurnAutoLineTerminationOn()
//
//
// The TextLineSpecStandardLine type implements the
// ITextLineSpecification interface.
//
//
// Member Variables
//
// ----------------------------------------------------------------
//
//  textFields                 []ITextFieldSpecification
//     - 'textFields' is a collection of objects implementing the
//       ITextLineSpecification interface. These text fields are
//       assembled by the TextLineSpecStandardLine type and
//       formatted as a single line of text. Text fields are the
//       building blocks for a single line of text.
//
//       The single line of text produced by
//       TextLineSpecStandardLine is formatted for output one or
//       more times as specified by member variable,
//       'numOfStdLines'.
//
//
//  numOfStdLines              int
//     - An integer value specifying the number of repetitions for
//       the configured standard line text formatted for text
//       display, file output or printing.
//
//       A 'numOfStdLines' value of 1 means the line will be output
//       once, a value of 2 signals the line will be repeated or
//       output twice, a value of '3' signals the line will be output
//       3-times and so on.
//
//       If the 'numOfStdLines' value is set to zero, no text line
//       will be formatted for text display, file output or printing.
//
//       The following examples illustrate the use of
//       'numOfStdLines':
//         Example #1:
//          Configured Standard Line Text = "Hello World"
//          numOfStdLines = 1
//          Text Output:
//            "Hello World"
//
//         Example #2:
//          Configured Standard Line Text = "Hello World"
//          numOfStdLines = 3
//          Text Output:
//            "Hello World"
//            "Hello World"
//            "Hello World"
//
//         Example #3:
//          Configured Standard Line Text = "How Now Brown Cow!"
//          numOfStdLines = 5
//          Text Output:
//            "How Now Brown Cow!"
//            "How Now Brown Cow!"
//            "How Now Brown Cow!"
//            "How Now Brown Cow!"
//            "How Now Brown Cow!"
//
//
//  turnLineTerminatorOff      bool
//     - The 'turnLineTerminatorOff' flag controls whether a line
//       termination character or characters will be automatically
//       appended to each line of text produced by
//       TextLineSpecStandardLine.
//
//       When 'turnLineTerminatorOff' is set to 'false', line
//       terminators as defined by member variable 'newLineChars'
//       will be applied as a line termination sequence for each
//       line of text produced by TextLineSpecStandardLine.
//
//       When this boolean value is set to 'true', it turns off or
//       cancels the automatic generation of line terminators for
//       each line of text produced by TextLineSpecStandardLine.
//
//       The default line terminator is the new line character
//       ('\n') which is defined by member variable 'newLineChars'.
//       However, this value is subject to user control and may be
//       overridden by one or more characters supplied by the user.
//
//
//  newLineChars               []rune
//     - By default, each line of text generated by
//       TextLineSpecStandardLine will be terminated with a new
//       line character ('\n'). However, users have the option to
//       override and modify this behavior by supplying an
//       alternative character or characters to be used as a line
//       termination sequence for each line of text produced by the
//       current TextLineSpecStandardLine instance.
//
//       New Line Characters are also referred to as Line
//       Termination Characters.
//
//       To override, change or control the behavior of
//       'newLineChars', see the following methods:
//         TextLineSpecStandardLine.GetNewLineRunes()
//         TextLineSpecStandardLine.SetNewLineChars()
//         TextLineSpecStandardLine.SetNewLineRunes()
//         TextLineSpecStandardLine.TurnAutoLineTerminationOff()
//
//
type TextLineSpecStandardLine struct {
	textFields            []ITextFieldSpecification
	numOfStdLines         int
	turnLineTerminatorOff bool
	newLineChars          []rune
	textLineReader        *strings.Reader
	lock                  *sync.Mutex
}

// AddStandardLine - This method receives an input parameter
// consisting of TextLineSpecStandardLine type ('incomingStdLine').
// It then proceeds to add the array of text field objects
// encapsulated by parameter 'incomingStdLine' to the text field
// array maintained by the current instance of
// TextLineSpecStandardLine.
//
// When this method completes successfully, the current
// TextLineSpecStandardLine object will encapsulate an array
// containing both the original text field objects plus those
// provided by parameter, 'incomingStdLine'.
//
// If the method completes successfully, the internal array index
// of the last Text Field Object will be returned to the calling
// function.
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// Adding TextFields without setting the number of standard line
// repetitions, means that no formatted text will be generated. The
// number of standard line repetitions must be set to a number
// greater than zero. See methods:
//     TextLineSpecStandardLine.GetNumOfStdLines()
//     TextLineSpecStandardLine.SetNumOfStdLines()
//
// Instances of TextLineSpecStandardLine created with one of the
// 'New' methods are automatically defaulted with the Number of
// Standard Lines set to a value of one (1).
//
//
// -----------------------------------------------------------------
//
// Input Parameters
//
//  incomingStdLine            TextLineSpecStandardLine
//     - A valid instance of TextLineSpecStandardLine. The Text
//       Field array contained by this parameter will be added to
//       the text field array of the current
//       TextLineSpecStandardLine instance.
//
//       All valid Text Field objects implement the
//       ITextFieldSpecification interface. A deep copy of each
//       object in the 'incomingStdLine' collection will be added
//       to the Text Field collection maintained by the current
//       instance of TextLineSpecStandardLine.
//
//       If parameter 'incomingStdLine' is determined to be
//       invalid, an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// -----------------------------------------------------------------
//
// Return Values
//
//  LastIndexId                int
//     - If this method completes successfully, the internal array
//       index of the last text field object for the current
//       TextLineSpecStandardLine instance will be returned as an
//       integer value.
//
//       In the event of an error, 'LastIndexId' will be set to a
//       value of minus one (-1).
//
//
//  err                        error
//     - If the method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) AddStandardLine(
	incomingStdLine *TextLineSpecStandardLine,
	errorPrefix interface{}) (
	lastIndexId int,
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	lastIndexId = -1

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine.AddStandardLine()",
		"")

	if err != nil {
		return lastIndexId, err
	}

	if incomingStdLine == nil {
		err = fmt.Errorf("%v - ERROR\n"+
			"Input parameter 'incomingStdLine' is a 'nil' pointer!\n",
			ePrefix.String())

		return lastIndexId, err
	}

	txtStdLineNanobot := textLineSpecStandardLineNanobot{}

	return txtStdLineNanobot.addTextFields(
		stdLine,
		&incomingStdLine.textFields,
		ePrefix)
}

// AddTextField - This method will append a single text field
// object to the end of the current array of text field objects
// maintained by the current instance of TextLineSpecStandardLine.
// The object actually appended to the array is a deep copy of the
// input parameter, 'textField'.
//
// If the method completes successfully, the internal array index
// of the new Text Field object will be returned to the calling
// function.
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// Adding TextFields without setting the number of standard line
// repetitions, means that no text will be generated. The
// number of standard line repetitions must be set to a number
// greater than zero. See methods:
//     TextLineSpecStandardLine.GetNumOfStdLines()
//     TextLineSpecStandardLine.SetNumOfStdLines()
//
// Instances of TextLineSpecStandardLine created with one of the
// 'New' methods are automatically defaulted with the Number of
// Standard Lines set to a value of one (1).
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  iTextField                 ITextFieldSpecification
//     - A text field object which implements the
//       ITextFieldSpecification interface. A deep copy of this
//       object will be added to the text field collection
//       maintained by this instance of TextLineSpecStandardLine.
//
//       NOTE: You will need to pass the concrete instance of
//       'iTextField' as a pointer to the Text Field (&textField).
//
//       If the 'iTextField' parameter are found to be invalid, an
//       error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  lastIndexId                int
//     - If this method completes successfully, the internal array
//       index of the last text field object for the current
//       TextLineSpecStandardLine instance will be returned as an
//       integer value.
//
//       In the event of an error, 'lastIndexId' will be set to a
//       value of minus one (-1).
//
//
//  err                        error
//     - If the method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) AddTextField(
	iTextField ITextFieldSpecification,
	errorPrefix interface{}) (
	lastIndexId int,
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	lastIndexId = -1

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine.AddTextField()",
		"")

	if err != nil {
		return lastIndexId, err
	}

	if iTextField == nil {
		err = fmt.Errorf("%v - ERROR\n"+
			"Input parameter 'iTextField' is 'nil'!\n",
			ePrefix.XCtxEmpty().String())

		return
	}

	err = iTextField.IsValidInstanceError(
		ePrefix.XCtx("iTextField"))

	if err != nil {
		return lastIndexId, err
	}

	var newTextField ITextFieldSpecification

	newTextField,
		err = iTextField.CopyOutITextField(
		ePrefix.XCtx("iTextField->newTextField"))

	if err != nil {
		return lastIndexId, err
	}

	stdLine.textFields = append(stdLine.textFields,
		newTextField)

	lastIndexId = len(stdLine.textFields) - 1

	return lastIndexId, err
}

// AddTextFields - This method will append multiple text field
// objects to the end of the current array of text field objects
// maintained by the current instance of TextLineSpecStandardLine.
// The objects actually appended to the current array are deep
// copies of the text field objects contained in input parameter,
// 'textFields'.
//
// If the method completes successfully, the internal array index
// of the last Text Field object will be returned to the calling
// function.
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// Adding TextFields without setting the number of standard line
// repetitions, means that no text will be generated. The
// number of standard line repetitions must be set to a number
// greater than zero. See methods:
//     TextLineSpecStandardLine.GetNumOfStdLines()
//     TextLineSpecStandardLine.SetNumOfStdLines()
//
// Instances of TextLineSpecStandardLine created with one of the
// 'New' methods are automatically defaulted with the Number of
// Standard Lines set to a value of one (1).
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  textFields                 *[]ITextFieldSpecification
//     - A pointer to a text field collection whose objects
//       implement the ITextFieldSpecification interface. A deep
//       copy of each object in this collection will be added to
//       the text field collection maintained by the current
//       instance of TextLineSpecStandardLine.
//
//       If member variable data values contained in this
//       'textFields' parameter are found to be invalid, an error
//       will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  lastIndexId                int
//     - If this method completes successfully, the internal array
//       index of the last text field object for the current
//       TextLineSpecStandardLine instance will be returned as an
//       integer value.
//
//       In the event of an error, 'lastIndexId' will be set to a
//       value of minus one (-1).
//
//
//  err                        error
//     - If the method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) AddTextFields(
	textFields *[]ITextFieldSpecification,
	errorPrefix interface{}) (
	lastIndexId int,
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	lastIndexId = -1

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine.AddTextFields()",
		"")

	if err != nil {
		return lastIndexId, err
	}

	txtStdLineNanobot := textLineSpecStandardLineNanobot{}

	return txtStdLineNanobot.addTextFields(
		stdLine,
		textFields,
		ePrefix)
}

// AddTextFieldDateTime - This method will append a DateTime text
// field object to the end of the current array of text field
// objects maintained by the current instance of
// TextLineSpecStandardLine.
//
// This operation will create a new TextFieldSpecDateTime object
// based on the input parameters passed by the calling function.
// This TextFieldSpecDateTime object will then be added to the text
// field objects collection for the current
// TextLineSpecStandardLine instance.
//
// If the method completes successfully, the internal array index
// of the new Text Field DateTime Object will be returned to the
// calling function.
//
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// Adding TextFields without setting the number of standard line
// repetitions, means that no text will be generated. The
// number of standard line repetitions must be set to a number
// greater than zero. See methods:
//     TextLineSpecStandardLine.GetNumOfStdLines()
//     TextLineSpecStandardLine.SetNumOfStdLines()
//
// Instances of TextLineSpecStandardLine created with one of the
// 'New' methods are automatically defaulted with the Number of
// Standard Lines set to a value of one (1).
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  dateTime                   time.Time
//     - A valid date time value which is used to generate a
//       formatted date/time text string. Type time.Time is part of
//       the Golang time package:
//              https://pkg.go.dev/time.
//
//       If this parameter is submitted as a zero value, an error
//       will be returned.
//
//
//  fieldLen                   int
//     - The length of the text field in which the formatted
//       'dateTime' value will be displayed.
//
//       If 'fieldLen' is less than the length of the formatted
//       'dateTime' string, it will be automatically set equal to
//       the formatted 'dateTime' string length.
//
//       If 'fieldLen' is greater than the length of the formatted
//       'dateTime' string, 'dateTime' will be positioned within a
//       text field with a length equal to 'fieldLen'. In this
//       case, the position of the 'dateTime' string within the
//       text field will be controlled by the text justification
//       value contained in parameter, 'textJustification'.
//
//       To automatically set the value of 'fieldLen' to the length
//       of the formatted 'dateTime', set this parameter to a value
//       of minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  dateTimeFormat             string
//     - This string holds the date/time format parameters used to
//       format the 'dateTime' value when generating a 'dateTime'
//       text string. The formatted 'dateTime' text string is
//       generated by type TextFieldSpecDateTime for use in text
//       displays, file output or printing.
//
//       The date/time format is documented in the Golang time.Time
//       package, https://pkg.go.dev/time. The format operations are
//       documented at https://pkg.go.dev/time#Time.Format .
//
//       If this parameter is submitted as an empty string,
//       parameter 'dateTimeFormat' will be assigned a default
//       value of "2006-01-02 15:04:05.000000000 -0700 MST".
//
//       Example Formats:
//        Example 1:
//         dateTimeFormat =
//          "2006-01-02 15:04:05.000000000 -0700 MST"
//        Result =
//          "2021-10-21 14:19:03.000000000 -0500 CDT"
//
//        Example 2:
//         dateTimeFormat =
//          "Monday January 2, 2006 15:04:05.000000000 -0700 MST"
//
//          Result =
//           "Thursday October 21, 2021 14:19:03.000000000 -0500 CDT"
//
//
//  textJustification          TextJustify
//     - An enumeration which specifies the justification of the
//       'dateTime' string within a text field with a field length
//       specified by parameter 'fieldLen'.
//
//       Text justification can only be evaluated in the context of
//       a 'dateTime' text string, field length and a
//       'textJustification' object of type TextJustify. This is
//       because a field length ('fieldLen') value equal to or less
//       than the length of the 'dateTime' text string will never
//       use text justification. In these cases, text justification
//       is completely ignored because the length of the text field
//       ('fieldLen') is automatically set equal to the length of
//       the 'dateTime' text string.
//
//       If the field length is greater than the length of the text
//       label, text justification must be equal to one of these
//       three valid values:
//           TextJustify(0).Left()
//           TextJustify(0).Right()
//           TextJustify(0).Center()
//
//       You can also use the abbreviated text justification
//       enumeration syntax as follows:
//
//           TxtJustify.Left()
//           TxtJustify.Right()
//           TxtJustify.Center()
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  indexId                    int
//     - If this method completes successfully, the internal array
//       index of the new text label object will be returned as an
//       integer value.
//
//       In the event of an error, 'indexId' will be set to a value
//       of minus one (-1).
//
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) AddTextFieldDateTime(
	dateTime time.Time,
	fieldLen int,
	dateTimeFormat string,
	textJustification TextJustify,
	errorPrefix interface{}) (
	indexId int,
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	indexId = -1

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine.AddTextFieldDateTime()",
		"")

	if err != nil {
		return indexId, err
	}

	var newDateTimeField *TextFieldSpecDateTime

	newDateTimeField,
		err = TextFieldSpecDateTime{}.NewPtrDateTimeField(
		dateTime,
		fieldLen,
		dateTimeFormat,
		textJustification,
		ePrefix.XCtx(
			"newDateTimeField"))

	if err != nil {
		return indexId, err
	}

	stdLine.textFields = append(stdLine.textFields,
		newDateTimeField)

	indexId = len(stdLine.textFields) - 1

	return indexId, err
}

// AddTextFieldFiller - This method will append a Filler text field
// object to the end of the current array of text field objects
// maintained by the current instance of TextLineSpecStandardLine.
//
// This operation will create a new TextFieldSpecFiller object
// based on the input parameters passed by the calling function.
// This TextFieldSpecFiller object will then be added to the text
// field objects collection for the current
// TextLineSpecStandardLine instance.
//
// If the method completes successfully, the internal array index
// of the new Text Field Filler Object will be returned to the
// calling function.
//
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// Adding TextFields without setting the number of standard line
// repetitions, means that no text will be generated. The
// number of standard line repetitions must be set to a number
// greater than zero. See methods:
//     TextLineSpecStandardLine.GetNumOfStdLines()
//     TextLineSpecStandardLine.SetNumOfStdLines()
//
// Instances of TextLineSpecStandardLine created with one of the
// 'New' methods are automatically defaulted with the Number of
// Standard Lines set to a value of one (1).
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  fillerCharacters    string
//     - A string containing the text characters which will be
//       included in the Text Filler Field. The final Text Filler
//       Field will be constructed from the filler characters
//       repeated one or more times as specified by the
//       'fillerCharsRepeatCount' parameter.
//
//       If 'fillerCharacters' is submitted as an empty or zero
//       length string, an error will be returned.
//
//
//  fillerCharsRepeatCount    int
//     - Controls the number of times 'fillerCharacters' is
//       repeated when constructing the final Text Filler Field
//       returned by this method. The actual length of the string
//       which will populated the completed Text Filler Field is
//       equal to the length of 'fillerCharacters' times the value
//       of 'fillerCharsRepeatCount'.
//
//        Text Field Filler Length =
//          Length of fillerCharacters X fillerCharsRepeatCount
//
//          Example #1: fillerCharacters = "-*"
//                      fillerRepeatCount = 3
//                      Final Text Filler Field = "-*-*-*"
//
//          Example #2: fillerCharacters = "-"
//                      fillerRepeatCount = 3
//                      Final Text Filler Field = "---"
//
//       If 'fillerCharsRepeatCount' has a value less than one (1) or
//       greater than one-million (1,000,000), an error will be
//       returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  indexId                    int
//     - If this method completes successfully, the internal array
//       index of the new text filler object will be returned as an
//       integer value.
//
//       In the event of an error, 'indexId' will be set to a value
//       of minus one (-1).
//
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) AddTextFieldFiller(
	fillerCharacters string,
	fillerCharsRepeatCount int,
	errorPrefix interface{}) (
	indexId int,
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	indexId = -1

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine.AddTextFieldFiller()",
		"")

	if err != nil {
		return indexId, err
	}

	var newFillerField *TextFieldSpecFiller

	newFillerField,
		err = TextFieldSpecFiller{}.NewPtrTextFiller(
		fillerCharacters,
		fillerCharsRepeatCount,
		ePrefix)

	if err != nil {
		return indexId, err
	}

	stdLine.textFields = append(stdLine.textFields,
		newFillerField)

	indexId = len(stdLine.textFields) - 1

	return indexId, err
}

// AddTextFieldLabel - This method will append a Label text field
// object to the end of the current array of text field objects
// maintained by the current instance of TextLineSpecStandardLine.
//
// This operation will create a new TextFieldSpecLabel object
// based on the input parameters passed by the calling function.
// This TextFieldSpecLabel object will then be added to the text
// field objects collection for the current
// TextLineSpecStandardLine instance.
//
// If the method completes successfully, the internal array index
// of the new Text Field Filler Object will be returned to the
// calling function.
//
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// Adding TextFields without setting the number of standard line
// repetitions, means that no text will be generated. The number
// of standard line repetitions must be set to a number greater
// than zero. See methods:
//     TextLineSpecStandardLine.GetNumOfStdLines()
//     TextLineSpecStandardLine.SetNumOfStdLines()
//
// Instances of TextLineSpecStandardLine created with one of the
// 'New' methods are automatically defaulted with the Number of
// Standard Lines set to a value of one (1).
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  textLabel                  string
//     - String content to be displayed within the text label.
//
//       If this parameter is submitted as a zero length string,
//       an error will be returned.
//
//
//  fieldLen                   int
//     - The length of the text field in which the 'textLabel' will
//       be displayed. If 'fieldLen' is less than the length of the
//       'textLabel' string, it will be automatically set equal to
//       the 'textLabel' string length.
//
//       To automatically set the value of 'fieldLen' to the length
//       of 'textLabel', set this parameter to a value of minus one
//       (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  textJustification          TextJustify
//     - An enumeration which specifies the justification of the
//       'textLabel' within the field specified by 'fieldLen'.
//
//       Text justification can only be evaluated in the context of
//       a text label, field length and a 'textJustification'
//       object of type TextJustify. This is because text labels
//       with a field length equal to or less than the length of
//       the text label never use text justification. In these
//       cases, text justification is completely ignored.
//
//       If the field length is greater than the length of the text
//       label, text justification must be equal to one of these
//       three valid values:
//           TextJustify(0).Left()
//           TextJustify(0).Right()
//           TextJustify(0).Center()
//
//       You can also use the abbreviated text justification
//       enumeration syntax as follows:
//
//           TxtJustify.Left()
//           TxtJustify.Right()
//           TxtJustify.Center()
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  indexId                    int
//     - If this method completes successfully, the internal array
//       index of the new text label object will be returned as an
//       integer value.
//
//       In the event of an error, 'indexId' will be set to a value
//       of minus one (-1).
//
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) AddTextFieldLabel(
	textLabel string,
	fieldLen int,
	textJustification TextJustify,
	errorPrefix interface{}) (
	indexId int,
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	indexId = -1

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine.AddTextFieldLabel()",
		"")

	if err != nil {
		return indexId, err
	}

	var newLabelField *TextFieldSpecLabel

	newLabelField,
		err = TextFieldSpecLabel{}.NewPtrTextLabel(
		textLabel,
		fieldLen,
		textJustification,
		ePrefix.XCtx(
			"newLabelField"))

	if err != nil {
		return indexId, err
	}

	stdLine.textFields = append(stdLine.textFields,
		newLabelField)

	indexId = len(stdLine.textFields) - 1

	return indexId, err
}

// AddTextFieldSpacer - This method will append a Spacer text field
// object to the end of the current array of text field objects
// maintained by the current instance of TextLineSpecStandardLine.
//
// This operation will create a new TextFieldSpecSpacer object
// based on the input parameters passed by the calling function.
// This TextFieldSpecSpacer object will then be added to the text
// field objects collection for the current
// TextLineSpecStandardLine instance.
//
// If the method completes successfully, the internal array index
// of the new Text Field Filler Object will be returned to the
// calling function.
//
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// Adding TextFields without setting the number of standard line
// repetitions, means that no text will be generated. The number
// of standard line repetitions must be set to a number greater
// than zero. See methods:
//     TextLineSpecStandardLine.GetNumOfStdLines()
//     TextLineSpecStandardLine.SetNumOfStdLines()
//
// Instances of TextLineSpecStandardLine created with one of the
// 'New' methods are automatically defaulted with the Number of
// Standard Lines set to a value of one (1).
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  fieldLen                   int
//     - An integer value which specifies the number of white space
//       characters to be included in the spacer text field.
//
//       Examples:
//          fieldLen = 1 produces text field " "
//          fieldLen = 2 produces text field "  "
//          fieldLen = 5 produces text field "     "
//
//       If 'fieldLen' is less than one (+1), an error will be
//       returned.
//
//       If 'fieldLen' is greater than one-million (+1,000,000), an
//       error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  indexId                    int
//     - If this method completes successfully, the internal array
//       index of the new text label object will be returned as an
//       integer value.
//
//       In the event of an error, 'indexId' will be set to a value
//       of minus one (-1).
//
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) AddTextFieldSpacer(
	fieldLen int,
	errorPrefix interface{}) (
	indexId int,
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	indexId = -1

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine.AddTextFieldSpacer()",
		"")

	if err != nil {
		return indexId, err
	}

	var newSpacerField *TextFieldSpecSpacer

	newSpacerField,
		err = TextFieldSpecSpacer{}.NewPtrSpacer(
		fieldLen,
		ePrefix.XCtx(
			"newSpacerField"))

	if err != nil {
		return indexId, err
	}

	stdLine.textFields = append(stdLine.textFields,
		newSpacerField)

	indexId = len(stdLine.textFields) - 1

	return indexId, err
}

// CopyIn - Copies the data fields from an incoming instance of
// TextLineSpecStandardLine ('incomingStdLine') to the data fields
// of the current TextLineSpecStandardLine instance ('stdLine').
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// All the data fields in current TextLineSpecStandardLine instance
// ('stdLine') will be deleted and overwritten.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  incomingStdLine     *TextLineSpecStandardLine
//     - A pointer to an instance of TextLineSpecStandardLine. This
//       method will NOT change the data values of member variables
//       contained in this instance.
//
//       All data values in this TextLineSpecStandardLine instance
//       will be copied to the current TextLineSpecStandardLine
//       instance ('stdLine').
//
//       If 'incomingStdLine' contains invalid member variable data
//       values, this method will return an error.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//                      containing error prefix and error context
//                      information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) CopyIn(
	incomingStdLine *TextLineSpecStandardLine,
	errorPrefix interface{}) error {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine.CopyIn()",
		"")

	if err != nil {
		return err
	}

	err = textLineSpecStandardLineNanobot{}.ptr().
		copyIn(
			stdLine,
			incomingStdLine,
			ePrefix)

	return err
}

// CopyOut - Returns a deep copy of the current
// TextLineSpecStandardLine instance.
//
// If the current TextLineSpecStandardLine instance contains invalid
// member variables, this method will return an error.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  TextLineSpecStandardLine
//     - If this method completes successfully and no errors are
//       encountered, this parameter will return a deep copy of the
//       current TextLineSpecStandardLine instance.
//
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) CopyOut(
	errorPrefix interface{}) (
	TextLineSpecStandardLine,
	error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine.CopyOut()",
		"")

	if err != nil {
		return TextLineSpecStandardLine{}, err
	}

	var newStdLine TextLineSpecStandardLine

	newStdLine,
		err = textLineSpecStandardLineNanobot{}.ptr().
		copyOut(
			stdLine,
			ePrefix.XCtx("stdLine"))

	return newStdLine, err
}

// CopyOutITextLine - Returns a deep copy of the current
// TextLineSpecStandardLine instance cast as a type
// ITextLineSpecification.
//
// This method fulfills requirements of ITextLineSpecification
// interface.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  ITextLineSpecification
//     - If this method completes successfully and no errors are
//       encountered, this parameter will return a deep copy of the
//       current TextLineSpecStandardLine instance cast as an
//       ITextLineSpecification object.
//
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) CopyOutITextLine(
	errorPrefix interface{}) (
	ITextLineSpecification,
	error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine.CopyOutITextLine()",
		"")

	if err != nil {
		return ITextLineSpecification(&TextLineSpecStandardLine{}), err
	}

	var newStdLine TextLineSpecStandardLine

	newStdLine,
		err = textLineSpecStandardLineNanobot{}.ptr().
		copyOut(
			stdLine,
			ePrefix.XCtx("stdLine"))

	return ITextLineSpecification(&newStdLine), err
}

// CopyOutPtr - Returns a pointer to a deep copy of the current
// TextLineSpecStandardLine instance.
//
// If the current TextLineSpecStandardLine instance contains invalid
// member variables, this method will return an error.
//
//
// -----------------------------------------------------------------
//
// Input Parameters
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  *TextLineSpecStandardLine
//     - If this method completes successfully and no errors are
//       encountered, this parameter will return a pointer to a
//       deep copy of the current TextLineSpecStandardLine
//       instance.
//
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) CopyOutPtr(
	errorPrefix interface{}) (
	*TextLineSpecStandardLine,
	error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine.CopyOutPtr()",
		"")

	if err != nil {
		return &TextLineSpecStandardLine{}, err
	}

	var newStdLine TextLineSpecStandardLine

	newStdLine,
		err = textLineSpecStandardLineNanobot{}.ptr().
		copyOut(
			stdLine,
			ePrefix.XCtx("stdLine"))

	return &newStdLine, err
}

// DeleteAtIndex - Deletes a member Text Field array element from
// the Text Field Collection at the index specified by input
// parameter 'indexId'.
//
// If successful, at the completion of this method, the Text
// Field Collection array will have a length which is one
// less than the starting array length.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  indexId                    int
//     - The index of the Text Field Collection array element
//       which will be deleted from the Collection for this
//       instance of TextLineSpecStandardLine.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) DeleteAtIndex(
	indexId int,
	errorPrefix interface{}) error {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"DeleteAtIndex()",
		"")

	if err != nil {
		return err
	}

	return textLineSpecStandardLineElectron{}.ptr().
		deleteTextField(
			stdLine,
			indexId,
			ePrefix.XCtx(
				fmt.Sprintf(
					"stdLine.textFields[%v]",
					indexId)))
}

// Empty - Deletes all the text fields stored as an array of
// ITextFieldSpecification pointers within the current
// TextLineSpecStandardLine instance. In addition, this method
// will set 'numOfStdLines', 'turnLIneTerminatorOff' and
// 'newLineChars' will be set to their initial or zero values.
//
// After calling 'Empty', the caller CAN NOT reuse this instance of
// TextLineSpecStandardLine. All the internal member variables
// will have to be re-initialized.
//
// To empty and reuse this TextLineSpecStandardLine instance,
// reference method TextLineSpecStandardLine.EmptyTextFields.
//
// This method fulfills requirements of the ITextLineSpecification
// interface.
//
func (stdLine *TextLineSpecStandardLine) Empty() {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	_ = textLineSpecStandardLineMolecule{}.ptr().
		emptyStandardLine(
			stdLine,
			nil)

	stdLine.lock.Unlock()

	stdLine.lock = nil

	return
}

// EmptyTextFields - Deletes all the text fields stored as an array of
// ITextFieldSpecification pointers within the current
// TextLineSpecStandardLine instance.
//
// This method will allow the user to clear and reuse the current
// instance of TextLineSpecStandardLine because it only deletes the
// existing text field collection. It does not overwrite member
// variables 'numOfStdLines', 'turnLIneTerminatorOff' or
// 'newLineChars'.
//
func (stdLine *TextLineSpecStandardLine) EmptyTextFields() {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	textLineSpecStandardLineMolecule{}.ptr().
		emptyStdLineTextFields(stdLine)

	return
}

// Equal - Receives a pointer to another instance of
// TextLineSpecStandardLine and proceeds to compare the member
// variables to those of the current TextLineSpecStandardLine
// instance in order to determine if they are equivalent.
//
// A boolean flag showing the result of this comparison is
// returned. If the member variables of both instances are equal in
// all respects, this flag is set to 'true'. Otherwise, this method
// returns 'false'.
//
func (stdLine *TextLineSpecStandardLine) Equal(
	incomingStdLine *TextLineSpecStandardLine) bool {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	return textLineSpecStandardLineMolecule{}.ptr().
		equal(
			stdLine,
			incomingStdLine)
}

// EqualITextLine - Receives an object implementing the
// ITextLineSpecification interface and proceeds to compare
// the member variables to those of the current
// TextLineSpecStandardLine instance in order to determine if
// they are equivalent.
//
// A boolean flag showing the result of this comparison is
// returned. If the member variables from both instances are equal
// in all respects, this flag is set to 'true'. Otherwise, this
// method returns 'false'.
//
// This method is required by interface ITextLineSpecification.
//
func (stdLine *TextLineSpecStandardLine) EqualITextLine(
	iTextLine ITextLineSpecification) bool {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	stdLineTwo, ok := iTextLine.(*TextLineSpecStandardLine)

	if !ok {
		return false
	}

	return textLineSpecStandardLineMolecule{}.ptr().
		equal(
			stdLine,
			stdLineTwo)
}

// GetFormattedText - Returns the formatted text generated by this
// Text Line Specification for text display, file output and
// printing.
//
// The standard line may be replicated multiple times if the
// value of internal member variable' stdLine.numOfStdLines' is
// greater than one ('1').
//
// If an error occurs, the error message will be included in the
// returned string.
//
// This method is similar to TextLineSpecStandardLine.String() with
// the sole difference being that this method returns an error.
//
// This method fulfills requirements of the ITextLineSpecification
// interface.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//                      containing error prefix and error context
//                      information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  string
//     - The formatted text line generated by the current instance
//       of TextLineSpecStandardLine.
//
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) GetFormattedText(
	errorPrefix interface{}) (
	string,
	error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine.GetFormattedText()",
		"")

	if err != nil {
		return "", err
	}

	return textLineSpecStandardLineMolecule{}.ptr().
		getFormattedText(
			stdLine,
			ePrefix)
}

// GetNewLineChars - Returns a string representing
// the value of member variable, 'newLineChars'.
//
// New Line Characters are also referred to as Line Termination
// Characters.
//
// By default, each line of text generated by
// TextLineSpecStandardLine will be terminated with a new line
// character ('\n'). However, users have the option to override and
// modify this behavior by supplying an alternative character or
// characters to be used as a line termination sequence for the
// standard line of text produced by the current
// TextLineSpecStandardLine instance.
//
// This method returns the current value of 'newLineChars',
// otherwise known as the line termination sequence.
//
// To override, monitor or control the behavior of 'newLineChars',
// see the following methods:
//         TextLineSpecStandardLine.GetNewLineRunes()
//         TextLineSpecStandardLine.SetNewLineChars()
//         TextLineSpecStandardLine.SetNewLineRunes()
//         TextLineSpecStandardLine.TurnAutoLineTerminationOff()
//         TextLineSpecStandardLine.TurnAutoLineTerminationOn()
//
func (stdLine *TextLineSpecStandardLine) GetNewLineChars() string {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	return string(stdLine.newLineChars)
}

// GetNewLineRunes - Returns an array runes representing
// the value of member variable, 'newLineChars'.
//
// New Line Runes are also referred to as Line Termination runes.
//
// By default, each line of text generated by
// TextLineSpecStandardLine will be terminated with a new line
// character ('\n'). However, users have the option to override and
// modify this behavior by supplying an alternative character or
// characters to be used as a line termination sequence for the
// standard line of text produced by the current
// TextLineSpecStandardLine instance.
//
// This method returns the current value of 'newLineChars',
// otherwise known as the line termination sequence.
//
// To override, monitor or control the behavior of 'newLineChars',
// see the following methods:
//         TextLineSpecStandardLine.GetNewLineChars()
//         TextLineSpecStandardLine.SetNewLineChars()
//         TextLineSpecStandardLine.SetNewLineRunes()
//         TextLineSpecStandardLine.TurnAutoLineTerminationOff()
//         TextLineSpecStandardLine.TurnAutoLineTerminationOn()
//
func (stdLine *TextLineSpecStandardLine) GetNewLineRunes() []rune {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	if len(stdLine.newLineChars) == 0 {
		return nil
	}

	var newLineChars []rune

	_ = strMechPreon{}.ptr().
		copyRuneArrays(
			&newLineChars,
			&stdLine.newLineChars,
			true,
			nil)

	return newLineChars
}

// GetNumOfStdLines - Returns the number of repetitions for this
// instance of TextLineSpecStandardLine. The number of standard
// lines is the number of times this standard line will be output
// printed.
//
func (stdLine *TextLineSpecStandardLine) GetNumOfStdLines() int {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	return stdLine.numOfStdLines
}

// GetNumOfTextFields - Returns the number of text fields
// encapsulated by the current TextLineSpecStandardLine instance.
//
// Text Fields constitute the granular elements of a standard text
// line. Analyzing the number of text fields in the collection
// provides verification that text fields exist and are ready for
// formatting. Once properly formatted, text fields may be
// presented for text display, file output or printing.
//
func (stdLine *TextLineSpecStandardLine) GetNumOfTextFields() int {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	return len(stdLine.textFields)
}

// GetTextFields - Returns a deep copy of the text fields contained
// in the current TextLineSpecStandardLine instance.
//
// These text fields are returned in an array of
// ITextFieldSpecification objects.
//
// If the text field collection maintained by the current
// TextLineSpecStandardLine instance is empty (contains zero
// elements), a 'nil' value will be returned.
//
// If any of the text fields within the collection maintained by
// the current TextLineSpecStandardLine instance are invalid,
// an error will be returned.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//                      containing error prefix and error context
//                      information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  []ITextFieldSpecification
//     - If this method completes successfully, a deep copy of the
//       text field collection maintained by the current
//       TextLineSpecStandardLine instance will be returned. These
//       text fields are returned as an array of objects
//       implementing the ITextFieldSpecification interface.
//
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) GetTextFields(
	errorPrefix interface{}) (
	[]ITextFieldSpecification,
	error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine.GetTextFields()",
		"")

	if err != nil {
		return nil, err
	}

	if len(stdLine.textFields) == 0 {

		return nil, err
	}

	_,
		err = textLineSpecStandardLineElectron{}.ptr().
		testValidityOfTextFields(
			&stdLine.textFields,
			false, // allowZeroLengthTextFields
			ePrefix.XCtx(
				"stdLine.textFields"))

	if err != nil {
		return nil, err
	}

	newTextFields := make([]ITextFieldSpecification, 0)

	_,
		err = textLineSpecStandardLineAtom{}.ptr().
		copyTextFields(
			&newTextFields,
			&stdLine.textFields,
			ePrefix.XCtx(
				"newTextFields<-stdLine.textFields"))

	return newTextFields, err
}

// GetTurnLineTerminatorOff - Returns the internal member variable
// 'turnLineTerminatorOff' as a boolean value.
//
// The 'turnLineTerminatorOff' flag controls whether a line
// termination character or characters will be automatically
// appended to each line of text produced by
// TextLineSpecStandardLine.
//
// When the boolean flag 'turnLineTerminatorOff' is set to 'false',
// line terminators as defined by member variable 'newLineChars'
// WILL BE applied as a line termination sequence for each line of
// text produced by TextLineSpecStandardLine. The default value for
// 'turnLineTerminatorOff' is 'false'.
//
// When this boolean value is set to 'true', it turns off or
// cancels the automatic generation of line terminators for each
// line of text produced by TextLineSpecStandardLine.
//
// The default line terminator is the new line character ('\n')
// which is defined by member variable 'newLineChars'. However,
// this value is subject to user control and may be overridden
// by one or more characters.
//
func (stdLine *TextLineSpecStandardLine) GetTurnLineTerminatorOff() bool {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	return stdLine.turnLineTerminatorOff
}

// InsertTextFieldAtIndex - Receives a Text Field in the form of a
// type ITextFieldSpecification. This Text Field is then inserted
// into Text Fields Collection maintained by the current instance
// of TextLineSpecStandardLine.
//
// The Text Field input parameter, 'iTextField', is inserted into
// the internal Text Fields array at the array element index
// position indicated by input parameter, 'indexId'.
//
//
// -----------------------------------------------------------------
//
// Input Parameters
//
//  iTextField                 ITextFieldSpecification
//     - A Text Field object which implements the
//       ITextFieldSpecification interface. A deep copy of this
//       text field will be inserted into the Text Field Collection
//       maintained by the current instance of
//       TextLineSpecStandardLine.
//
//       After the insertion operation is completed, the
//       'iTextField' object will be located at array element
//       'indexId' immediately BEFORE the original array element
//       located at that array index.
//
//       NOTE: You will need to pass the concrete instance of
//       'iTextField' as a pointer to the Text Field (&textField).
//
//       If the 'iTextField' parameter are found to be invalid, an
//       error will be returned.
//
//
//  indexId                    int
//     - This index number designates the array element index in
//       the Text Fields Collection of the 'txtStdLine' instance at
//       which the Text Fields parameter, 'iTextField' will be
//       inserted. This means that 'iTextField' will be inserted
//       immediately BEFORE the array element specified by
//       'indexId' in the final Text Fields Array.
//
//       If the value of 'indexId' is less than zero, it will be
//       reset to zero. This means that the 'iTextField' object
//       will be inserted in the first array element position of
//       the Text Fields Collection maintained by parameter,
//       'txtStdLine'.
//
//       If the value of 'indexId' is greater the last array
//       element index in the 'txtStdLine' Text Fields Collection,
//       the 'iTextField' object will be appended to the end of
//       that Text Fields Collection.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// -----------------------------------------------------------------
//
// Return Values
//
//  lastIndexId                int
//     - If this method completes successfully, the internal array
//       index of the last text field object for the Text Field
//       Collection maintained by the current
//       TextLineSpecStandardLine instance will be returned as an
//       integer value.
//
//       In the event of an error, 'lastIndexId' will be set to a
//       value of minus one (-1).
//
//
//  err                        error
//     - If the method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
//
func (stdLine *TextLineSpecStandardLine) InsertTextFieldAtIndex(
	iTextField ITextFieldSpecification,
	indexId int,
	errorPrefix interface{}) (
	lastIndexId int,
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	lastIndexId = -1

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"InsertTextFieldAtIndex()",
		"")

	if err != nil {
		return lastIndexId, err
	}

	lastIndexId,
		err = textLineSpecStandardLineNanobot{}.ptr().
		insertTextFieldAtIndex(
			stdLine,
			iTextField,
			indexId,
			ePrefix.XCtx(
				fmt.Sprintf("stdLine.textFields[%v]<-iTextField",
					indexId)))

	if err != nil {
		lastIndexId = -1
	} else {
		lastIndexId--
	}

	return lastIndexId, err
}

// IsValidInstance - Performs a diagnostic review of the data
// values encapsulated in the current TextLineSpecStandardLine
// instance to determine if they are valid.
//
// If all data element evaluate as valid, this method returns
// 'true'. If any data element is invalid, this method returns
// 'false'.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  --- NONE ---
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  isValid             bool
//     - If all data elements encapsulated by the current instance
//       of TextLineSpecStandardLine are valid, this returned
//       boolean value is set to 'true'. If any data values are
//       invalid, this return parameter is set to 'false'.
//
func (stdLine *TextLineSpecStandardLine) IsValidInstance() (
	isValid bool) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	isValid,
		_ = textLineSpecStandardLineAtom{}.ptr().
		testValidityOfTextLineSpecStdLine(
			stdLine,
			false, // allowZeroLengthTextFieldsArray
			nil)

	return isValid
}

// IsValidInstanceError - Performs a diagnostic review of the data
// values encapsulated in the current TextLineSpecStandardLine
// instance to determine if they are valid.
//
// If any data element evaluates as invalid, this method will
// return an error.
//
// If the number of standard lines for the current
// TextLineSpecStandardLine is set to a value less than one, this
// method will consider the current TextLineSpecStandardLine
// instance invalid and return an error.
//
// This method fulfills requirements of ITextLineSpecification
// interface.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  errorPrefix         interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If any of the internal member data variables contained in
//       the current instance of TextLineSpecStandardLine are found
//       to be invalid, this method will return an error.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' (error prefix) will be inserted or
//       prefixed at the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) IsValidInstanceError(
	errorPrefix interface{}) error {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"IsValidInstanceError()",
		"")

	if err != nil {
		return err
	}

	_,
		err = textLineSpecStandardLineAtom{}.ptr().
		testValidityOfTextLineSpecStdLine(
			stdLine,
			false, // allowZeroLengthTextFieldsArray
			ePrefix.XCtx("stdLine"))

	return err
}

// New - This method returns a new, partially configured concrete
// instance of TextLineSpecStandardLine. The returned instance of
// TextLineSpecStandardLine sets defaults for the parameters listed
// below. All that remains is for the user to add text fields to the
// Text Field Collection maintained by the returned
// TextLineSpecStandardLine object.
//
// The default number of lines repetitions is set to one ('1').
// This means that the returned standard line instance will only
// be output or printed once.
//
//
// ------------------------------------------------------------------------
//
// Default Values
//
// This method will automatically set the following default values:
//
//  numOfStdLines  - Defaults number of standard lines to one (1).
//
//  newLineChars   - Defaults new line character to '\n'.
//                   To change the value of the new line character,
//                   or characters, see methods:
//                   TextLineSpecStandardLine.SetNewLineChars()
//                   TextLineSpecStandardLine.SetNewLineRunes()
//
func (stdLine TextLineSpecStandardLine) New() TextLineSpecStandardLine {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	newStdLine := TextLineSpecStandardLine{}

	newStdLine.lock = new(sync.Mutex)

	newStdLine.numOfStdLines = 1

	newStdLine.newLineChars = []rune{'\n'}

	newStdLine.turnLineTerminatorOff = false

	return newStdLine
}

// NewPtr - This method returns a pointer to a partially
// configured instance of TextLineSpecStandardLine. The returned
// instance of TextLineSpecStandardLine sets defaults for the
// parameters listed below. All that remains is for the user to
// add text fields to the Text Field Collection maintained by the
// returned TextLineSpecStandardLine object.
//
// The TextLineSpecStandardLine type is a text specification for a
// standard line of text. A standard line of text comprises a
// single line of text which may be repeated one or more times.
//
// TextLineSpecStandardLine encapsulates an array of
// ITextFieldSpecification objects which are used to format text
// fields within a single line of text. Essentially, a standard
// text line is a collection of text fields which implement the
// ITextFieldSpecification interface. Text fields are the building
// blocks used to construct a standard line of text.
//
// Input parameter 'textFields' is an array of
// ITextFieldSpecification objects which will be assembled and
// formatted on a single line of text. The 'textFields' array
// for the TextLineSpecStandardLine instance returned by this
// method is empty. Use the following methods to add text fields
// to this collection:
//   TextLineSpecStandardLine.AddTextField()
//   TextLineSpecStandardLine.AddTextFieldFiller()
//   TextLineSpecStandardLine.AddTextFieldLabel()
//
//
// ------------------------------------------------------------------------
//
// Default Values
//
// This method will automatically set the following default values:
//
//  textFields          []ITextFieldSpecification
//     - 'textFields' is assigned a default value of 'nil' meaning
//       that the collection of text fields for the returned
//       instance of TextLineSpecStandardLine is empty.
//
//       'textFields' is a collection of objects implementing the
//       ITextLineSpecification interface. These text fields are
//       assembled by the TextLineSpecStandardLine type and formatted
//       as a single line of text. This single line of text is
//       output one or more times as specified by input parameter,
//       'numOfStdLines'.
//
//       Text fields are the building blocks used to assemble a
//       standard line of text.
//
//
//  numOfStdLines       int
//     - Defaults number of standard lines to one (1).
//
//       'numOfStdLines' is an integer value specifying the number
//        of repetitions for a standard line text formatted for
//        text display, file output or printing.
//
//       A 'numOfStdLines' value of 1 means the line will be output
//       once, a value of 2 signals the line will be repeated or
//       output twice, a value of '3' signals the line will be output
//       3-times and so on.
//
//       If the 'numOfStdLines' value is set to zero, no text line
//       will be formatted for text display, file output or printing.
//
//       If this value is set to a value less than zero, it will be
//       automatically reset to a value of one ('1').
//
//       The following examples illustrate the use of
//       'numOfStdLines':
//         Example #1:
//          Standard Line Text = "Hello World"
//          numOfStdLines = 1
//          Text Output:
//            "Hello World"
//
//         Example #2:
//          Standard Line Text = "Hello World"
//          numOfStdLines = 3
//          Text Output:
//            "Hello World"
//            "Hello World"
//            "Hello World"
//
//
//  newLineChars        []rune{'\n'}
//     - Defaults new line character to '\n'.
//
//       'newLineChars' is an array of runes which contains the
//        text character or characters which will be applied as
//        line termination characters for each line of text
//        produced by the returned instance of TextLineSpecStandardLine.
//
//       To change the value of the new line character,
//       or characters, see methods:
//         TextLineSpecStandardLine.GetNewLineRunes()
//         TextLineSpecStandardLine.SetNewLineChars()
//         TextLineSpecStandardLine.SetNewLineRunes()
//         TextLineSpecStandardLine.TurnAutoLineTerminationOff()
//         TextLineSpecStandardLine.TurnAutoLineTerminationOn()
//
//
//  turnLineTerminatorOff      bool
//     - Defaults 'turnLineTerminatorOff' flag to 'false'.
//
//       The 'turnLineTerminatorOff' flag controls whether a line
//       termination character or characters will be automatically
//       appended to each line of text produced by
//       TextLineSpecStandardLine.
//
//       When the boolean flag 'turnLineTerminatorOff' is set to
//       'false', line terminators as defined by parameter
//       'newLineChars' will be applied as a line termination
//       sequence for each line of text produced by
//       TextLineSpecStandardLine.
//
//       When this boolean value is set to 'true', it turns off or
//       cancels the automatic generation of line terminators for
//       each line of text produced by TextLineSpecStandardLine.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  --- NONE ---
//
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  *TextLineSpecStandardLine
//     - This method will create and return a pointer to a new
//       instance of TextLineSpecStandardLine which is fully
//       configured except for text fields. To add text fields,
//       see method TextLineSpecStandardLine.AddTextField()
//
func (stdLine TextLineSpecStandardLine) NewPtr() *TextLineSpecStandardLine {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	newStdLine := TextLineSpecStandardLine{}

	newStdLine.lock = new(sync.Mutex)

	newStdLine.numOfStdLines = 1

	newStdLine.newLineChars = []rune{'\n'}

	newStdLine.turnLineTerminatorOff = false

	return &newStdLine
}

// NewStandardLine - Returns a new concrete instance of
// TextLineSpecStandardLine. The returned new instance is
// constructed from input parameters 'numOfStdLines' and
// 'textFields'.
//
// This method is identical to
// TextLineSpecStandardLine.NewPtrStandardLine() with the sole
// exception being that this method returns a concrete instance of
// TextLineSpecStandardLine while method
// TextLineSpecStandardLine.NewPtrStandardLine() returns a pointer
// to a TextLineSpecStandardLine instance.
//
// The TextLineSpecStandardLine type is a text specification for a
// standard line of text. A standard line of text comprises a
// single line of text which may be repeated one or more times.
//
// TextLineSpecStandardLine encapsulates an array of
// ITextFieldSpecification objects which are used to format text
// fields within a single line of text. Essentially, a standard
// text line is a collection of text fields which implement the
// ITextFieldSpecification interface. Text fields are the building
// blocks used to construct a standard line of text.
//
// Input parameter 'textFields' is an array of
// ITextFieldSpecification objects which will be assembled and
// formatted on a single line of text.
//
//
// ------------------------------------------------------------------------
//
// Default Values
//
// This method will automatically set the following default values:
//
//  newLineChars               []rune{'\n'}
//     - By default, each line of text generated by
//       TextLineSpecStandardLine will be terminated with a new
//       line character ('\n'). However, users have the option to
//       override and modify this behavior by supplying an
//       alternative character or characters to be used as a line
//       termination sequence for each line of text produced by the
//       current TextLineSpecStandardLine instance.
//
//       This method will not change the current value of
//       'newLineChars'.
//
//       To override, change or control the behavior of
//       'newLineChars', see the following methods:
//         TextLineSpecStandardLine.GetNewLineRunes()
//         TextLineSpecStandardLine.SetNewLineChars()
//         TextLineSpecStandardLine.SetNewLineRunes()
//         TextLineSpecStandardLine.TurnAutoLineTerminationOff()
//         TextLineSpecStandardLine.TurnAutoLineTerminationOn()
//
//
//  turnLineTerminatorOff      false
//     - The 'turnLineTerminatorOff' flag controls whether a line
//       termination character or characters will be automatically
//       appended to each line of text produced by
//       TextLineSpecStandardLine.
//
//       When the boolean flag 'turnLineTerminatorOff' is set to
//       'false', line terminators as defined by member variable
//       'newLineChars' will be applied as a line termination
//       sequence for each line of text produced by
//       TextLineSpecStandardLine.
//
//       When this boolean value is set to 'true', it turns off or
//       cancels the automatic generation of line terminators for
//       each line of text produced by TextLineSpecStandardLine.
//
//       The default line terminator is the new line character
//       ('\n') which is defined by member variable 'newLineChars'.
//       However, this value is subject to user control and may be
//       overridden by one or more characters supplied by the user.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  numOfStdLines              int
//     - An integer value specifying the number of repetitions for
//       a standard line text formatted for text display, file
//       output or printing.
//
//       A 'numOfStdLines' value of 1 means the line will be output
//       once, a value of 2 signals the line will be repeated or
//       output twice, a value of '3' signals the line will be output
//       3-times and so on.
//
//       If the 'numOfStdLines' value is set to zero, no text line
//       will be formatted for text display, file output or printing.
//
//       If this value is set to a value less than zero, it will be
//       automatically reset to a value of one ('1').
//
//       The following examples illustrate the use of
//       'numOfStdLines':
//         Example #1:
//          Standard Line Text = "Hello World"
//          numOfStdLines = 1
//          Text Output:
//            "Hello World"
//
//         Example #2:
//          Standard Line Text = "Hello World"
//          numOfStdLines = 3
//          Text Output:
//            "Hello World"
//            "Hello World"
//            "Hello World"
//
//
//  textFields                 []ITextFieldSpecification
//     - 'textFields' is a collection of objects implementing the
//       ITextLineSpecification interface. These text fields are
//       assembled by the TextLineSpecStandardLine type and formatted
//       as a single line of text. This single line of text is
//       output one or more times as specified by input parameter,
//       'numOfStdLines'.
//
//       Text fields are the building blocks used to assemble a
//       standard line of text.
//
//       If this parameter is submitted as a 'nil' value or a zero
//       length array, an error will be returned.
//
//       If any of the objects contained in this collection are
//       invalid, an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  TextLineSpecStandardLine
//     - If this method completes successfully, it will create and
//       return a new concrete instance of TextLineSpecStandardLine
//       which is fully configured with all the parameters
//       necessary to format a standard text line for text display,
//       file output or printing.
//
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine TextLineSpecStandardLine) NewStandardLine(
	numOfStdLines int,
	textFields []ITextFieldSpecification,
	errorPrefix interface{}) (
	TextLineSpecStandardLine,
	error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	newStdLine := TextLineSpecStandardLine{}

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"NewPtrStandardLine()",
		"")

	if err != nil {
		return newStdLine, err
	}

	newStdLine.lock = new(sync.Mutex)

	if textFields == nil {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'textFields' is invalid!\n"+
			"'textFields' is a 'nil' value.\n",
			ePrefix.String())

		return newStdLine, err
	}

	lenTxtFields := len(textFields)

	if lenTxtFields == 0 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'textFields' is invalid!\n"+
			"'textFields' is a zero length array.\n",
			ePrefix.String())

		return newStdLine, err
	}

	if numOfStdLines < 0 {
		numOfStdLines = 1
	}

	newLineChars :=
		textSpecificationAtom{}.ptr().
			getDefaultNewLineChars()

	err = textLineSpecStandardLineNanobot{}.ptr().
		setTxtSpecStandardLine(
			&newStdLine,
			numOfStdLines,
			textFields,
			newLineChars,
			false,
			ePrefix)

	return newStdLine, err
}

// NewPtrStandardLine - Returns a pointer to a new instance of
// TextLineSpecStandardLine. The returned new instance is
// constructed from input parameters 'numOfStdLines' and
// 'textFields'.
//
// This method is identical to
// TextLineSpecStandardLine.NewStandardLine() with the sole
// exception being that this method returns a pointer to a
// TextLineSpecStandardLine instance while method
// TextLineSpecStandardLine.NewStandardLine() returns a concrete
// instance of TextLineSpecStandardLine.
//
// The TextLineSpecStandardLine type is a text specification for a
// standard line of text. A standard line of text comprises a
// single line of text which may be repeated one or more times.
//
// TextLineSpecStandardLine encapsulates an array of
// ITextFieldSpecification objects which are used to format text
// fields within a single line of text. Essentially, a standard
// text line is a collection of text fields which implement the
// ITextFieldSpecification interface. Text fields are the building
// blocks used to construct a standard line of text.
//
// Input parameter 'textFields' is an array of
// ITextFieldSpecification objects which will be assembled and
// formatted on a single line of text.
//
//
// ------------------------------------------------------------------------
//
// Default Values
//
// This method will automatically set the following default values:
//
//  newLineChars               []rune{'\n'}
//     - By default, each line of text generated by
//       TextLineSpecStandardLine will be terminated with a new
//       line character ('\n'). However, users have the option to
//       override and modify this behavior by supplying an
//       alternative character or characters to be used as a line
//       termination sequence for each line of text produced by the
//       current TextLineSpecStandardLine instance.
//
//       This method will not change the current value of
//       'newLineChars'.
//
//       To override, change or control the behavior of
//       'newLineChars', see the following methods:
//         TextLineSpecStandardLine.GetNewLineRunes()
//         TextLineSpecStandardLine.SetNewLineChars()
//         TextLineSpecStandardLine.SetNewLineRunes()
//         TextLineSpecStandardLine.TurnAutoLineTerminationOff()
//         TextLineSpecStandardLine.TurnAutoLineTerminationOn()
//
//
//  turnLineTerminatorOff      false
//     - The 'turnLineTerminatorOff' flag controls whether a line
//       termination character or characters will be automatically
//       appended to each line of text produced by
//       TextLineSpecStandardLine.
//
//       When the boolean flag 'turnLineTerminatorOff' is set to
//       'false', line terminators as defined by member variable
//       'newLineChars' will be applied as a line termination
//       sequence for each line of text produced by
//       TextLineSpecStandardLine.
//
//       When this boolean value is set to 'true', it turns off or
//       cancels the automatic generation of line terminators for
//       each line of text produced by TextLineSpecStandardLine.
//
//       The default line terminator is the new line character
//       ('\n') which is defined by member variable 'newLineChars'.
//       However, this value is subject to user control and may be
//       overridden by one or more characters supplied by the user.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  numOfStdLines              int
//     - An integer value specifying the number of repetitions for
//       a standard line text formatted for text display, file
//       output or printing.
//
//       A 'numOfStdLines' value of 1 means the line will be output
//       once, a value of 2 signals the line will be repeated or
//       output twice, a value of '3' signals the line will be output
//       3-times and so on.
//
//       If the 'numOfStdLines' value is set to zero, no text line
//       will be formatted for text display, file output or printing.
//
//       If this value is set to a value less than zero, it will be
//       automatically reset to a value of one ('1').
//
//       The following examples illustrate the use of
//       'numOfStdLines':
//         Example #1:
//          Standard Line Text = "Hello World"
//          numOfStdLines = 1
//          Text Output:
//            "Hello World"
//
//         Example #2:
//          Standard Line Text = "Hello World"
//          numOfStdLines = 3
//          Text Output:
//            "Hello World"
//            "Hello World"
//            "Hello World"
//
//
//  textFields                 []ITextFieldSpecification
//     - 'textFields' is a collection of objects implementing the
//       ITextLineSpecification interface. These text fields are
//       assembled by the TextLineSpecStandardLine type and formatted
//       as a single line of text. This single line of text is
//       output one or more times as specified by input parameter,
//       'numOfStdLines'.
//
//       Text fields are the building blocks used to assemble a
//       standard line of text.
//
//       If this parameter is submitted as a 'nil' value or a zero
//       length array, an error will be returned.
//
//       If any of the objects contained in this collection are
//       invalid, an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  *TextLineSpecStandardLine
//     - If this method completes successfully, it will create and
//       a pointer to a new instance of TextLineSpecStandardLine
//       which is fully configured with all the parameters
//       necessary to format a standard text line for text display,
//       file output or printing.
//
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine TextLineSpecStandardLine) NewPtrStandardLine(
	numOfStdLines int,
	textFields []ITextFieldSpecification,
	errorPrefix interface{}) (
	*TextLineSpecStandardLine,
	error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	newStdLine := TextLineSpecStandardLine{}

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"NewPtrStandardLine()",
		"")

	if err != nil {
		return &newStdLine, err
	}

	newStdLine.lock = new(sync.Mutex)

	if textFields == nil {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'textFields' is invalid!\n"+
			"'textFields' is a 'nil' value.\n",
			ePrefix.String())

		return &newStdLine, err
	}

	lenTxtFields := len(textFields)

	if lenTxtFields == 0 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'textFields' is invalid!\n"+
			"'textFields' is a zero length array.\n",
			ePrefix.String())

		return &newStdLine, err
	}

	if numOfStdLines < 0 {
		numOfStdLines = 1
	}

	newLineChars :=
		textSpecificationAtom{}.ptr().
			getDefaultNewLineChars()

	err = textLineSpecStandardLineNanobot{}.ptr().
		setTxtSpecStandardLine(
			&newStdLine,
			numOfStdLines,
			textFields,
			newLineChars,
			false,
			ePrefix)

	return &newStdLine, err
}

// NewStandardLineAllParms - Returns a new, populated concrete
// instance of TextLineSpecStandardLine. This method includes the
// maximum number input parameters thereby allowing the caller to
// control and configure all member variables for the new
// TextLineSpecStandardLine instance.
//
// This method is identical to
// TextLineSpecStandardLine.NewPtrStandardLineAllParms() with the
// sole exception being that this method returns a concrete
// instance of TextLineSpecStandardLine while method
// TextLineSpecStandardLine.NewPtrStandardLineAllParms() returns a
// pointer to a TextLineSpecStandardLine instance.
//
// The TextLineSpecStandardLine type is a text specification for a
// standard line of text. A standard line of text comprises a
// single line of text which may be repeated one or more times.
//
// TextLineSpecStandardLine encapsulates an array of
// ITextFieldSpecification objects which are used to format text
// fields within a single line of text. Essentially, a standard
// text line is a collection of text fields which implement the
// ITextFieldSpecification interface. Text fields are the building
// blocks used to construct a standard line of text.
//
// Input parameter 'textFields' is an array of
// ITextFieldSpecification objects which will be assembled and
// formatted on a single line of text.
//
//
// ------------------------------------------------------------------------
//
// Default Values
//
//  --- NONE ---   - Input parameters shown below configure all
//                   internal member variables associated with the
//                   returned new instance of TextLineSpecStandardLine.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  numOfStdLines              int
//     - An integer value specifying the number of repetitions for
//       a standard line text formatted for text display, file
//       output or printing.
//
//       A 'numOfStdLines' value of 1 means the line will be output
//       once, a value of 2 signals the line will be repeated or
//       output twice, a value of '3' signals the line will be output
//       3-times and so on.
//
//       If the 'numOfStdLines' value is set to zero, no text line
//       will be formatted for text display, file output or printing.
//
//       If this value is set to a value less than zero, it will be
//       automatically reset to a value of one ('1').
//
//       The following examples illustrate the use of
//       'numOfStdLines':
//         Example #1:
//          Standard Line Text = "Hello World"
//          numOfStdLines = 1
//          Text Output:
//            "Hello World"
//
//         Example #2:
//          Standard Line Text = "Hello World"
//          numOfStdLines = 3
//          Text Output:
//            "Hello World"
//            "Hello World"
//            "Hello World"
//
//
//  textFields                 []ITextFieldSpecification
//     - 'textFields' is a collection of objects implementing the
//       ITextLineSpecification interface. These text fields are
//       assembled by the TextLineSpecStandardLine type and formatted
//       as a single line of text. This single line of text is
//       output one or more times as specified by input parameter,
//       'numOfStdLines'.
//
//       Text fields are the building blocks used to assemble a
//       standard line of text.
//
//       If this parameter is submitted as a 'nil' value or a zero
//       length array, an error will be returned.
//
//       If any of the objects contained in this collection are
//       invalid, an error will be returned.
//
//
//  newLineChars               []rune
//     - An array of runes which contains the text characters which
//       will be applied as line termination characters for each
//       line of text produced by the returned instance of
//       TextLineSpecStandardLine.
//
//       By default, each line of text generated by
//       TextLineSpecStandardLine will be terminated with a new
//       line character ('\n'). However, this parameter allows the
//       caller specify the character or characters to be used as a
//       line termination sequence for each line of text produced
//       by the returned instance of TextLineSpecStandardLine.
//
//       If this parameter is submitted as a 'nil' value or, if
//       'newLineChars' is a zero length array, this method will
//       set 'newLineChars' to the default new line termination
//       character ('\n').
//
//
//  turnLineTerminatorOff      bool
//     - The 'turnLineTerminatorOff' flag controls whether a line
//       termination character or characters will be automatically
//       appended to each line of text produced by
//       TextLineSpecStandardLine.
//
//       When the boolean flag 'turnLineTerminatorOff' is set to
//       'false', line terminators as defined by parameter
//       'newLineChars' will be applied as a line termination
//       sequence for each line of text produced by
//       TextLineSpecStandardLine.
//
//       When this boolean value is set to 'true', it turns off or
//       cancels the automatic generation of line terminators for
//       each line of text produced by TextLineSpecStandardLine.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  TextLineSpecStandardLine
//     - If this method completes successfully, it will create and
//       return a new, populated concrete instance of
//       TextLineSpecStandardLine which is fully configured with all
//       the parameters necessary to format one or more standard lines
//       of text for text display, file output or printing.
//
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine TextLineSpecStandardLine) NewStandardLineAllParms(
	numOfStdLines int,
	textFields []ITextFieldSpecification,
	newLineChars []rune,
	turnLineTerminatorOff bool,
	errorPrefix interface{}) (
	TextLineSpecStandardLine,
	error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	newStdLine := TextLineSpecStandardLine{}

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"NewStandardLineAllParms()",
		"")

	if err != nil {
		return newStdLine, err
	}

	newStdLine.lock = new(sync.Mutex)

	if textFields == nil {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'textFields' is invalid!\n"+
			"'textFields' is a 'nil' value.\n",
			ePrefix.String())

		return newStdLine, err
	}

	lenTxtFields := len(textFields)

	if lenTxtFields == 0 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'textFields' is invalid!\n"+
			"'textFields' is a zero length array.\n",
			ePrefix.String())

		return newStdLine, err
	}

	if numOfStdLines < 0 {
		numOfStdLines = 1
	}

	err = textLineSpecStandardLineNanobot{}.ptr().
		setTxtSpecStandardLine(
			&newStdLine,
			numOfStdLines,
			textFields,
			newLineChars,
			turnLineTerminatorOff,
			ePrefix)

	return newStdLine, err
}

// NewPtrStandardLineAllParms - Returns a new, populated concrete
// instance of TextLineSpecStandardLine. This method includes the
// maximum number input parameters thereby allowing the caller to
// control and configure all member variables for the new
// TextLineSpecStandardLine instance.
//
// This method is identical to
// TextLineSpecStandardLine.NewStandardLineAllParms() with the sole
// exception being that this method returns a pointer to a
// TextLineSpecStandardLine instance while method
// TextLineSpecStandardLine.NewStandardLineAllParms() returns a
// concrete instance of TextLineSpecStandardLine.
//
// The TextLineSpecStandardLine type is a text specification for a
// standard line of text. A standard line of text comprises a
// single line of text which may be repeated one or more times.
//
// TextLineSpecStandardLine encapsulates an array of
// ITextFieldSpecification objects which are used to format text
// fields within a single line of text. Essentially, a standard
// text line is a collection of text fields which implement the
// ITextFieldSpecification interface. Text fields are the building
// blocks used to construct a standard line of text.
//
// Input parameter 'textFields' is an array of
// ITextFieldSpecification objects which will be assembled and
// formatted on a single line of text.
//
//
// ------------------------------------------------------------------------
//
// Default Values
//
//  --- NONE ---   - Input parameters shown below configure all
//                   internal member variables associated with the
//                   returned new instance of TextLineSpecStandardLine.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  numOfStdLines              int
//     - An integer value specifying the number of repetitions for
//       a standard line text formatted for text display, file
//       output or printing.
//
//       A 'numOfStdLines' value of 1 means the line will be output
//       once, a value of 2 signals the line will be repeated or
//       output twice, a value of '3' signals the line will be output
//       3-times and so on.
//
//       If the 'numOfStdLines' value is set to zero, no text line
//       will be formatted for text display, file output or printing.
//
//       If this value is set to a value less than zero, it will be
//       automatically reset to a value of one ('1').
//
//       The following examples illustrate the use of
//       'numOfStdLines':
//         Example #1:
//          Standard Line Text = "Hello World"
//          numOfStdLines = 1
//          Text Output:
//            "Hello World"
//
//         Example #2:
//          Standard Line Text = "Hello World"
//          numOfStdLines = 3
//          Text Output:
//            "Hello World"
//            "Hello World"
//            "Hello World"
//
//
//  textFields                 []ITextFieldSpecification
//     - 'textFields' is a collection of objects implementing the
//       ITextLineSpecification interface. These text fields are
//       assembled by the TextLineSpecStandardLine type and formatted
//       as a single line of text. This single line of text is
//       output one or more times as specified by input parameter,
//       'numOfStdLines'.
//
//       Text fields are the building blocks used to assemble a
//       standard line of text.
//
//       If this parameter is submitted as a 'nil' value or a zero
//       length array, an error will be returned.
//
//       If any of the objects contained in this collection are
//       invalid, an error will be returned.
//
//
//  newLineChars               []rune
//     - An array of runes which contains the text characters which
//       will be applied as line termination characters for each
//       line of text produced by the returned instance of
//       TextLineSpecStandardLine.
//
//       By default, each line of text generated by
//       TextLineSpecStandardLine will be terminated with a new
//       line character ('\n'). However, this parameter allows the
//       caller specify the character or characters to be used as a
//       line termination sequence for each line of text produced
//       by the returned instance of TextLineSpecStandardLine.
//
//       If this parameter is submitted as a 'nil' value or, if
//       'newLineChars' is a zero length array, this method will
//       set 'newLineChars' to the default new line termination
//       character ('\n').
//
//
//  turnLineTerminatorOff      bool
//     - The 'turnLineTerminatorOff' flag controls whether a line
//       termination character or characters will be automatically
//       appended to each line of text produced by
//       TextLineSpecStandardLine.
//
//       When the boolean flag 'turnLineTerminatorOff' is set to
//       'false', line terminators as defined by parameter
//       'newLineChars' will be applied as a line termination
//       sequence for each line of text produced by
//       TextLineSpecStandardLine.
//
//       When this boolean value is set to 'true', it turns off or
//       cancels the automatic generation of line terminators for
//       each line of text produced by TextLineSpecStandardLine.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  *TextLineSpecStandardLine
//     - If this method completes successfully, it will create and
//       return a pointer to a new, populated instance of
//       TextLineSpecStandardLine which is fully configured with
//       all the parameters necessary to format one or more
//       lines of text for text display, file output or printing.
//
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine TextLineSpecStandardLine) NewPtrStandardLineAllParms(
	numOfStdLines int,
	textFields []ITextFieldSpecification,
	newLineChars []rune,
	turnLineTerminatorOff bool,
	errorPrefix interface{}) (
	*TextLineSpecStandardLine,
	error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	newStdLine := TextLineSpecStandardLine{}

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"NewPtrStandardLineAllParms()",
		"")

	if err != nil {
		return &newStdLine, err
	}

	newStdLine.lock = new(sync.Mutex)

	if textFields == nil {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'textFields' is invalid!\n"+
			"'textFields' is a 'nil' value.\n",
			ePrefix.String())

		return &newStdLine, err
	}

	lenTxtFields := len(textFields)

	if lenTxtFields == 0 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'textFields' is invalid!\n"+
			"'textFields' is a zero length array.\n",
			ePrefix.String())

		return &newStdLine, err
	}

	if numOfStdLines < 0 {
		numOfStdLines = 1
	}

	err = textLineSpecStandardLineNanobot{}.ptr().
		setTxtSpecStandardLine(
			&newStdLine,
			numOfStdLines,
			textFields,
			newLineChars,
			turnLineTerminatorOff,
			ePrefix)

	return &newStdLine, err
}

// PeekAtFirstTextField - Returns a deep copy of the first Text Field
// ('ITextFieldSpecification') object in the Text Field Collection
// ('stdLine.textFields[0]').
//
// As a 'Peek' method, the original Text Field object
// ('stdLine.textFields[0]') WILL NOT be deleted from the Text
// Field Collection encapsulated by this instance of
// TextLineSpecStandardLine.
//
// After completion of this method, the Text Field Collection array
// will remain unchanged.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  iTxtFieldSpec              ITextFieldSpecification
//     - If this method completes successfully, a deep copy of
//       the designated member of the Text Fields Collection
//       will be returned to the calling function. The returned
//       object will implement the ITextFieldSpecification
//       interface.
//
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
//
// ------------------------------------------------------------------------
//
// Example Usage
//
//  When casting ITextFieldSpecification returned from this method,
//  use the following syntax to cast the interface object to a
//  concrete type.
//
//  It is necessary to cast the concrete object ('spacerField') as
//  a pointer to the concrete type. This is because the concrete
//  type uses methods with pointer receivers.
//
//  ------------------------------------------------------------
//     var iTxtFieldSpec ITextFieldSpecification
//
//     iTxtFieldSpec,
//     err = stdLine01.PeekAtFirstTextField(
//             ePrefix.XCtx(
//             "stdLine01"))
//
//     if err != nil {
//       t.Errorf("\n%v\n",
//       err.Error())
//       return
//     }
//
//     var spacerField *TextFieldSpecSpacer
//
//     var ok bool
//
//     spacerField, ok = iTxtFieldSpec.(*TextFieldSpecSpacer)
//
//     if !ok {
//
//       t.Errorf("%v - Error\n"+
//       "spacerField, ok := iTxtFieldSpec.(*TextFieldSpecSpacer)\n"+
//       "Expected return of type 'TextFieldSpecSpacer'.\n"+
//       "HOWEVER, THAT TYPE WAS NOT RETURNED!\n",
//       ePrefix.XCtxEmpty().String())
//
//       return
//     }
//
//     // 'spacerField' is now available for use
//     spacerLen := spacerField.GetFieldLength()
//
func (stdLine *TextLineSpecStandardLine) PeekAtFirstTextField(
	errorPrefix interface{}) (
	iTxtFieldSpec ITextFieldSpecification,
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	iTxtFieldSpec = nil

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"PeekAtFirstTextField()",
		"")

	if err != nil {
		return iTxtFieldSpec, err
	}

	iTxtFieldSpec,
		err = textLineSpecStandardLineAtom{}.ptr().
		peekPopTextField(
			stdLine,
			0,
			false,
			ePrefix.XCtx(
				"stdLine.textFields[0]"))

	return iTxtFieldSpec, err
}

// PeekAtLastTextField - Returns a deep copy of the last Text Field
// ('ITextFieldSpecification') object in the Text Field Collection
// ('stdLine.textFields[lastIdx]').
//
// As a 'Peek' method, the original Text Field object
// ('stdLine.textFields[lastIdx]') WILL NOT be deleted from the Text
// Field Collection encapsulated by this instance of
// TextLineSpecStandardLine.
//
// After completion of this method, the Text Field Collection array
// will remain unchanged.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  iTxtFieldSpec              ITextFieldSpecification
//     - If this method completes successfully, a deep copy of
//       the designated member of the Text Fields Collection
//       will be returned to the calling function. The returned
//       object will implement the ITextFieldSpecification
//       interface.
//
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
//
// ------------------------------------------------------------------------
//
// Example Usage
//
//  When casting ITextFieldSpecification returned from this method,
//  use the following syntax to cast the interface object to a
//  concrete type.
//
//  It is necessary to cast the concrete object ('spacerField') as
//  a pointer to the concrete type. This is because the concrete
//  type uses methods with pointer receivers.
//
//  ------------------------------------------------------------
//     var iTxtFieldSpec ITextFieldSpecification
//
//     iTxtFieldSpec,
//     err = stdLine01.PeekAtLastTextField(
//           ePrefix.XCtx(
//           "stdLine01"))
//
//     if err != nil {
//       t.Errorf("\n%v\n",
//       err.Error())
//       return
//     }
//
//     var spacerField *TextFieldSpecSpacer
//
//     var ok bool
//
//     spacerField, ok = iTxtFieldSpec.(*TextFieldSpecSpacer)
//
//     if !ok {
//
//       t.Errorf("%v - Error\n"+
//       "spacerField, ok := iTxtFieldSpec.(*TextFieldSpecSpacer)\n"+
//       "Expected return of type 'TextFieldSpecSpacer'.\n"+
//       "HOWEVER, THAT TYPE WAS NOT RETURNED!\n",
//       ePrefix.XCtxEmpty().String())
//
//       return
//     }
//
//     // 'spacerField' is now available for use
//     spacerLen := spacerField.GetFieldLength()
//
//
func (stdLine *TextLineSpecStandardLine) PeekAtLastTextField(
	errorPrefix interface{}) (
	iTxtFieldSpec ITextFieldSpecification,
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	iTxtFieldSpec = nil

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"PeekAtTextFieldAtIndex()",
		"")

	if err != nil {
		return iTxtFieldSpec, err
	}

	lastIdx := len(stdLine.textFields) - 1

	if lastIdx < 0 {
		err = fmt.Errorf("%v - ERROR\n"+
			"The Text Field Collection is empty!\n",
			ePrefix.String())

		return iTxtFieldSpec, err
	}

	iTxtFieldSpec,
		err = textLineSpecStandardLineAtom{}.ptr().
		peekPopTextField(
			stdLine,
			lastIdx,
			false,
			ePrefix.XCtx(
				fmt.Sprintf(
					"stdLine.textFields[%v]",
					lastIdx)))

	return iTxtFieldSpec, err
}

// PeekAtTextFieldAtIndex - Returns a deep copy of the Text Field
// ('ITextFieldSpecification') object located at index, 'indexId',
// in the Text Field Collection ('stdLine.textFields').
//
// As a 'Peek' method, the original Text Field object WILL NOT be
// deleted from the Text Field Collection encapsulated by this
// instance of TextLineSpecStandardLine.
//
// After completion of this method, the Text Field Collection array
// will remain unchanged.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  indexId                    int
//     - This index number designates the array element in the Text
//       Fields Collection on which the "Peek" operation will be
//       performed.
//
//       This method will return a deep copy of the Text Field
//       designated by 'indexId' to the calling function.
//
//       The original Text Fields Collection will remain unchanged
//       by this method.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  iTxtFieldSpec              ITextFieldSpecification
//     - If this method completes successfully, a deep copy of
//       the designated member of the Text Fields Collection
//       will be returned to the calling function. The returned
//       object will implement the ITextFieldSpecification
//       interface.
//
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
//
// ------------------------------------------------------------------------
//
// Example Usage
//
//  When casting ITextFieldSpecification returned from this method,
//  use the following syntax to cast the interface object to a
//  concrete type.
//
//  It is necessary to cast the concrete object ('spacerField') as
//  a pointer to the concrete type. This is because the concrete
//  type uses methods with pointer receivers.
//
//  ------------------------------------------------------------
//     var iTxtFieldSpec ITextFieldSpecification
//
//     iTxtFieldSpec,
//     err = stdLine01.PeekAtTextFieldAtIndex(
//           indexId,
//           ePrefix.XCtx(
//           "stdLine01"))
//
//     if err != nil {
//       t.Errorf("\n%v\n",
//       err.Error())
//       return
//     }
//
//     var spacerField *TextFieldSpecSpacer
//
//     var ok bool
//
//     spacerField, ok = iTxtFieldSpec.(*TextFieldSpecSpacer)
//
//     if !ok {
//
//       t.Errorf("%v - Error\n"+
//       "spacerField, ok := iTxtFieldSpec.(*TextFieldSpecSpacer)\n"+
//       "Expected return of type 'TextFieldSpecSpacer'.\n"+
//       "HOWEVER, THAT TYPE WAS NOT RETURNED!\n",
//       ePrefix.XCtxEmpty().String())
//
//       return
//     }
//
//     // 'spacerField' is now available for use
//     spacerLen := spacerField.GetFieldLength()
//
//
func (stdLine *TextLineSpecStandardLine) PeekAtTextFieldAtIndex(
	indexId int,
	errorPrefix interface{}) (
	iTxtFieldSpec ITextFieldSpecification,
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	iTxtFieldSpec = nil

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"PeekAtTextFieldAtIndex()",
		"")

	if err != nil {
		return iTxtFieldSpec, err
	}

	iTxtFieldSpec,
		err = textLineSpecStandardLineAtom{}.ptr().
		peekPopTextField(
			stdLine,
			indexId,
			false,
			ePrefix.XCtx(
				fmt.Sprintf(
					"stdLine.textFields[%v]",
					indexId)))

	return iTxtFieldSpec, err
}

// PopFirstTextField - Returns a deep copy of the first Text Field
// ('ITextFieldSpecification') object in the Text Field Collection
// ('stdLine.textFields[0]').
//
// As a 'Pop' method, the first Text Field object will be deleted
// from the Text Field Collection encapsulated by this instance of
// TextLineSpecStandardLine. Parameter 'remainingNumOfTxtFields'
// will be returned to the calling function containing the number
// of array elements still remaining in the Text Field Collection
// after deletion of the first array element.
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// After successful completion of this method, the Text Field
// Collection array will have a length which is one less than the
// starting array length.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  iTxtFieldSpec              ITextFieldSpecification
//     - If this method completes successfully, a deep copy of
//       if the designated member of the Text Fields Collection
//       will be returned to the calling function. The returned
//       object will implement the ITextFieldSpecification
//       interface.
//
//
//  remainingNumOfTxtFields    int
//     - If this method completes successfully, the first array
//       element in the Text Fields Collection will be deleted.
//       After deleting that element, this parameter will return
//       the number of array elements still remaining in the
//       Text Fields Collection.
//
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
//
// ------------------------------------------------------------------------
//
// Example Usage
//
//  When casting ITextFieldSpecification returned from this method,
//  use the following syntax to cast the interface object to a
//  concrete type.
//
//  It is necessary to cast the concrete object ('spacerField') as
//  a pointer to the concrete type. This is because the concrete
//  type uses methods with pointer receivers.
//
//  ------------------------------------------------------------
//     var iTxtFieldSpec ITextFieldSpecification
//
//     iTxtFieldSpec,
//     err = stdLine01.PopFirstTextField(
//           ePrefix.XCtx(
//           "stdLine01"))
//
//     if err != nil {
//       t.Errorf("\n%v\n",
//       err.Error())
//       return
//     }
//
//     var spacerField *TextFieldSpecSpacer
//
//     var ok bool
//
//     spacerField, ok = iTxtFieldSpec.(*TextFieldSpecSpacer)
//
//     if !ok {
//
//       t.Errorf("%v - Error\n"+
//       "spacerField, ok := iTxtFieldSpec.(*TextFieldSpecSpacer)\n"+
//       "Expected return of type 'TextFieldSpecSpacer'.\n"+
//       "HOWEVER, THAT TYPE WAS NOT RETURNED!\n",
//       ePrefix.XCtxEmpty().String())
//
//       return
//     }
//
//     // 'spacerField' is now available for use
//     spacerLen := spacerField.GetFieldLength()
//
//
func (stdLine *TextLineSpecStandardLine) PopFirstTextField(
	errorPrefix interface{}) (
	iTxtFieldSpec ITextFieldSpecification,
	remainingNumOfTxtFields int,
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	iTxtFieldSpec = nil

	remainingNumOfTxtFields = -1

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"PopFirstTextField()",
		"")

	if err != nil {
		return iTxtFieldSpec, remainingNumOfTxtFields, err
	}

	iTxtFieldSpec,
		err = textLineSpecStandardLineAtom{}.ptr().
		peekPopTextField(
			stdLine,
			0,
			true,
			ePrefix.XCtx(
				"stdLine.textFields[0]"))

	remainingNumOfTxtFields = len(stdLine.textFields)

	return iTxtFieldSpec, remainingNumOfTxtFields, err
}

// PopLastTextField - Returns a deep copy of the last Text Field
// ('ITextFieldSpecification') object in the Text Field Collection
// ('stdLine.textFields[lastIdx]').
//
// As a 'Pop' method, the last Text Field object will be deleted
// from the Text Field Collection encapsulated by this instance of
// TextLineSpecStandardLine. Parameter 'remainingNumOfTxtFields'
// will be returned to the calling function containing the number
// of array elements still remaining in the Text Field Collection
// after deletion of the last array element.
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// After successful completion of this method, the Text Field
// Collection array will have a length which is one less than the
// starting array length.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  iTxtFieldSpec              ITextFieldSpecification
//     - If this method completes successfully, a deep copy of
//       if the designated member of the Text Fields Collection
//       will be returned to the calling function. The returned
//       object will implement the ITextFieldSpecification
//       interface.
//
//
//  remainingNumOfTxtFields    int
//     - If this method completes successfully, the first array
//       element in the Text Fields Collection will be deleted.
//       After deleting that element, this parameter will return
//       the number of array elements still remaining in the
//       Text Fields Collection.
//
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
//
// ------------------------------------------------------------------------
//
// Example Usage
//
//  When casting ITextFieldSpecification returned from this method,
//  use the following syntax to cast the interface object to a
//  concrete type.
//
//  It is necessary to cast the concrete object ('spacerField') as
//  a pointer to the concrete type. This is because the concrete
//  type uses methods with pointer receivers.
//
//  ------------------------------------------------------------
//     var iTxtFieldSpec ITextFieldSpecification
//
//     iTxtFieldSpec,
//     err = stdLine01.PopLastTextField(
//           ePrefix.XCtx(
//           "stdLine01"))
//
//     if err != nil {
//       t.Errorf("\n%v\n",
//       err.Error())
//       return
//     }
//
//     var spacerField *TextFieldSpecSpacer
//
//     var ok bool
//
//     spacerField, ok = iTxtFieldSpec.(*TextFieldSpecSpacer)
//
//     if !ok {
//
//       t.Errorf("%v - Error\n"+
//       "spacerField, ok := iTxtFieldSpec.(*TextFieldSpecSpacer)\n"+
//       "Expected return of type 'TextFieldSpecSpacer'.\n"+
//       "HOWEVER, THAT TYPE WAS NOT RETURNED!\n",
//       ePrefix.XCtxEmpty().String())
//
//       return
//     }
//
//     // 'spacerField' is now available for use
//     spacerLen := spacerField.GetFieldLength()
//
//
func (stdLine *TextLineSpecStandardLine) PopLastTextField(
	errorPrefix interface{}) (
	iTxtFieldSpec ITextFieldSpecification,
	remainingNumOfTxtFields int,
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	iTxtFieldSpec = nil

	remainingNumOfTxtFields = -1

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"PopLastTextField()",
		"")

	if err != nil {
		return iTxtFieldSpec, remainingNumOfTxtFields, err
	}

	lastIdx := len(stdLine.textFields) - 1

	if lastIdx < 0 {
		err = fmt.Errorf("%v - ERROR\n"+
			"The Text Field Collection is empty!\n",
			ePrefix.String())

		return iTxtFieldSpec, remainingNumOfTxtFields, err
	}

	iTxtFieldSpec,
		err = textLineSpecStandardLineAtom{}.ptr().
		peekPopTextField(
			stdLine,
			lastIdx,
			true,
			ePrefix.XCtx(
				fmt.Sprintf(
					"stdLine.textFields[%v]",
					lastIdx)))

	remainingNumOfTxtFields = len(stdLine.textFields)

	return iTxtFieldSpec, remainingNumOfTxtFields, err
}

// PopTextFieldAtIndex - Returns a deep copy of the Text Field
// ('ITextFieldSpecification') object located at index, 'indexId',
// in the Text Field Collection ('stdLine.textFields').
//
// As a 'Pop' method, the original Text Field object designated by
// 'indexId' will be deleted from the Text Field Collection
// encapsulated by this instance of TextLineSpecStandardLine.
// Parameter 'remainingNumOfTxtFields' will be returned to the
// calling function containing the number of array elements still
// remaining in the Text Field Collection after the deletion
// operation.
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// After successful completion of this method, the Text Field
// Collection array will have a length which is one less than the
// starting array length.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  indexId                    int
//     - This index number designates the array element in the Text
//       Fields Collection on which the "Pop" operation will be
//       performed.
//
//       This method will return a deep copy of the Text Field
//       designated by 'indexId' to the calling function. It
//       will then proceed to delete the original member of the
//       Text Fields Collection located at array element 'indexId'.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  iTxtFieldSpec              ITextFieldSpecification
//     - If this method completes successfully, a deep copy of
//       if the designated member of the Text Fields Collection
//       will be returned to the calling function. The returned
//       object will implement the ITextFieldSpecification
//       interface.
//
//
//  remainingNumOfTxtFields    int
//     - If this method completes successfully, the array element
//       designated by 'indexId' in the Text Fields Collection,
//       will be deleted. After deleting that element, this
//       parameter will return the number of array elements still
//       remaining in the Text Fields Collection.
//
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
//
// ------------------------------------------------------------------------
//
// Example Usage
//
//  When casting ITextFieldSpecification returned from this method,
//  use the following syntax to cast the interface object to a
//  concrete type.
//
//  It is necessary to cast the concrete object ('spacerField') as
//  a pointer to the concrete type. This is because the concrete
//  type uses methods with pointer receivers.
//
//  ------------------------------------------------------------
//     var iTxtFieldSpec ITextFieldSpecification
//
//     iTxtFieldSpec,
//     err = stdLine01.PopTextFieldAtIndex(
//           indexId,
//           ePrefix.XCtx(
//           "stdLine01"))
//
//     if err != nil {
//       t.Errorf("\n%v\n",
//       err.Error())
//       return
//     }
//
//     var spacerField *TextFieldSpecSpacer
//
//     var ok bool
//
//     spacerField, ok = iTxtFieldSpec.(*TextFieldSpecSpacer)
//
//     if !ok {
//
//       t.Errorf("%v - Error\n"+
//       "spacerField, ok := iTxtFieldSpec.(*TextFieldSpecSpacer)\n"+
//       "Expected return of type 'TextFieldSpecSpacer'.\n"+
//       "HOWEVER, THAT TYPE WAS NOT RETURNED!\n",
//       ePrefix.XCtxEmpty().String())
//
//       return
//     }
//
//     // 'spacerField' is now available for use
//     spacerLen := spacerField.GetFieldLength()
//
//
func (stdLine *TextLineSpecStandardLine) PopTextFieldAtIndex(
	indexId int,
	errorPrefix interface{}) (
	iTxtFieldSpec ITextFieldSpecification,
	remainingNumOfTxtFields int,
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	iTxtFieldSpec = nil

	remainingNumOfTxtFields = -1

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"PopTextFieldAtIndex()",
		"")

	if err != nil {
		return iTxtFieldSpec, remainingNumOfTxtFields, err
	}

	iTxtFieldSpec,
		err = textLineSpecStandardLineAtom{}.ptr().
		peekPopTextField(
			stdLine,
			indexId,
			true,
			ePrefix.XCtx(
				fmt.Sprintf(
					"stdLine.textFields[%v]",
					indexId)))

	remainingNumOfTxtFields = len(stdLine.textFields)

	return iTxtFieldSpec, remainingNumOfTxtFields, err
}

// Read - Implements the io.Reader interface for type
// TextLineSpecStandardLine.
//
// The formatted text line string generated by the current
// instance of TextLineSpecStandardLine will be written to the
// byte buffer 'p'. If the length of 'p' is less than the length
// of the formatted text line string, multiple calls to this method
// will write the remaining unread characters to the byte buffer
// 'p'.
//
// Read() supports buffered 'read' operations.
//
// This method reads up to len(p) bytes into p. It returns the
// number of bytes read (0 <= n <= len(p)) and any error
// encountered. Even if read returns n < len(p), it may use all
// of p as scratch space during the call.
//
// If some data is available but not len(p) bytes, readBytes()
// conventionally returns what is available instead of waiting
// for more.
//
// When this method encounters an error or end-of-file condition
// after successfully reading n > 0 bytes, it returns the number
// of bytes read. It may return the (non-nil) error from the same
// call or return the error (and n == 0) from a subsequent call.
// An instance of this general case is that a Reader returning
// a non-zero number of bytes at the end of the input stream may
// return either err == EOF or err == nil. The next read operation
// should return 0, EOF.
//
// Callers should always process the n > 0 bytes returned before
// considering the error err. Doing so correctly handles I/O errors
// that happen after reading some bytes and also both of the
// allowed EOF behaviors.
//
// The last read operation performed on the formatted text string
// will always return n==0 and err==io.EOF.
//
// This method fulfills requirements of the ITextLineSpecification
// interface.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  p                          []byte
//     - The byte buffer into which the formatted text line string
//       generated by the current TextLineSpecStandardLine instance
//       will be written.
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  n                          int
//     - The number of bytes written to byte buffer 'p'.
//
//       Read() reads up to len(p) bytes into p. It returns
//       the number of bytes read (0 <= n <= len(p)) and any error
//       encountered. Even if Read() returns n < len(p), it may use
//       all of 'p' as scratch space during the call. If some
//       data is available but not len(p) bytes, Read()
//       conventionally returns what is available instead of
//       waiting for more.
//
//
//  err                        error
//     - If this method completes successfully, this returned error
//       Type is set equal to 'nil'. If errors are encountered
//       during processing, the returned error Type will
//       encapsulate an error message.
//
//       When Read() encounters an error or end-of-file condition
//       after successfully reading n > 0 bytes, it returns the
//       number of bytes read. It may return the (non-nil) error
//       from the same call or return the error (and n == 0) from
//       a subsequent call. An instance of this general case is
//       that a Reader returning a non-zero number of bytes at the
//       end of the input stream may return either err == EOF or
//       err == nil. The next read operation should return 0, EOF.
//
//
// ------------------------------------------------------------------------
//
// Usage Examples:
//
//  Example # 1
//
//  p := make([]byte, 50)
//
//  var n, readBytesCnt int
//  sb := strings.Builder{}
//
//  for {
//
//    n,
//    err = stdLine01.Read(p)
//
//    if n == 0 {
//      break
//    }
//
//    sb.Write(p[:n])
//    readBytesCnt += n
//  }
//
//  if err != nil &&
//    err != io.EOF {
//     return fmt.Error(
//      "Error Returned From stdLine01.Read(p)\n"+
//      "Error = \n%v\n",
//       err.Error())
//  }
//
//  fmt.Printf("Text Line String: %s\n",
//                sb.String())
//
//  fmt.Printf("Number of bytes Read: %v\n",
//                readBytesCnt)
//
//  Example # 2
//
//  p := make([]byte, 50)
//
//  var n, readBytesCnt int
//  var actualStr string
//
//  for {
//
//    n,
//    err = stdLine01.Read(p)
//
//    if n == 0 {
//      break
//    }
//
//    actualStr += string(p[:n])
//    readBytesCnt += n
//  }
//
//  if err != nil &&
//    err != io.EOF {
//     return fmt.Error(
//      "Error Returned From stdLine01.Read(p)\n"+
//      "Error = \n%v\n",
//       err.Error())
//  }
//
//  fmt.Printf("Text Line String: %v\n",
//                actualStr)
//
//  fmt.Printf("Number of bytes Read: %v\n",
//                readBytesCnt)
//
func (stdLine *TextLineSpecStandardLine) Read(
	p []byte) (
	n int,
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	ePrefix := ePref.ErrPrefixDto{}.NewEPrefCtx(
		"TextLineSpecStandardLine.Read()",
		"")

	if stdLine.textLineReader == nil {

		var formattedText string

		formattedText,
			err = textLineSpecStandardLineMolecule{}.ptr().
			getFormattedText(
				stdLine,
				ePrefix.XCtx("stdLine"))

		if err != nil {
			return n, err
		}

		stdLine.textLineReader =
			strings.NewReader(formattedText)

		if stdLine.textLineReader == nil {
			err = fmt.Errorf("%v\n"+
				"Error: strings.NewReader(formattedText)\n"+
				"returned a nil pointer.\n"+
				"plainTextLine.textLineReader == nil\n",
				ePrefix.XCtxEmpty().String())

			return n, err
		}
	}

	n,
		err = textSpecificationAtom{}.ptr().
		readBytes(
			stdLine.textLineReader,
			p,
			ePrefix.XCtx(
				"p -> stdLine.textLineReader"))

	if err == io.EOF {

		stdLine.textLineReader = nil

	}

	return n, err
}

// ReaderInitialize - This method will reset the internal member
// variable 'TextLineSpecStandardLine.textLineReader' to its initial
// zero state of 'nil'. Effectively, this resets the internal
// strings.Reader object for use in future read operations.
//
// This method is rarely used or needed. It provides a means of
// reinitializing the internal strings.Reader object in case an
// error occurs during a read operation initiated by method
// TextLineSpecStandardLine.Read().
//
// Calling this method cleans up the residue from an aborted read
// operation and prepares the strings.Reader object for future read
// operations.
//
// If any errors are returned by method
// TextLineSpecStandardLine.Read() which are NOT equal to io.EOF,
// call this method, TextLineSpecStandardLine.ReaderInitialize(),
// to reset and prepare the internal reader for future read
// operations.
//
// This method fulfills requirements of the ITextLineSpecification
// interface.
//
func (stdLine *TextLineSpecStandardLine) ReaderInitialize() {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	stdLine.textLineReader = nil

	return
}

// ReplaceTextField - Receives an object which implements the
// ITextFieldSpecification interface. A deep copy of this object
// will replace an existing text field object within the text
// fields collection maintained by this TextLineSpecStandardLine
// instance.
//
// The text field object to be replaced must exist at the index
// specified by input parameter, 'replaceAtIndex'.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  textField                  ITextFieldSpecification
//     - A text line object which implements the
//       ITextFieldSpecification interface. A deep copy of this
//       object will replace an existing element within the
//       text fields collection maintained by this instance of
//       TextLineSpecStandardLine. The text line object to
//       be replaced is identified by the collection element index
//       supplied by input parameter 'replaceAtIndex'.
//
//       If member variable data values contained in this
//       'textField' parameter are found to be invalid, an error
//       will be returned.
//
//
//  replaceAtIndex             int
//     - The index of an element within the text fields collection
//       maintained by the current TextLineSpecStandardLine
//       instance which will be replaced by input parameter
//       'textField'.
//
//       Remember that the text fields collection maintained by
//       the current TextLineSpecStandardLine instance is a zero
//       based array. Therefore, the first index in the collection
//       is zero (0).
//
//       If 'replaceAtIndex' proves to be an invalid index, an error
//       will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) ReplaceTextField(
	textField ITextFieldSpecification,
	replaceAtIndex int,
	errorPrefix interface{}) (
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine.ReplaceTextField()",
		"")

	if err != nil {
		return err
	}

	lenOfTextFieldsCol := len(stdLine.textFields)

	if lenOfTextFieldsCol == 0 {
		err = fmt.Errorf("%v\n"+
			"Error: The text fields collection is empty and contains no text fields!\n"+
			"First add some text fields before trying to replace a text field.\n",
			ePrefix.String())

		return err
	}

	err = textField.IsValidInstanceError(
		ePrefix.XCtx("Input Parameter: 'textField' is invalid"))

	if err != nil {
		return err
	}

	if replaceAtIndex < 0 {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'replaceAtIndex' is invalid!\n"+
			"Index is out of range. 'replaceAtIndex' is less than zero (0).\n"+
			"replaceAtIndex = '%v'\n",
			ePrefix.String(),
			replaceAtIndex)

		return err
	}

	lastIdx := lenOfTextFieldsCol - 1

	if replaceAtIndex > lastIdx {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'replaceAtIndex' is out of range and invalid!\n"+
			"'replaceAtIndex' is greater than the maximum collection index.\n"+
			"The last element in the text fields collection is index '%v'.\n"+
			"Input parameter 'replaceAtIndex' = '%v'\n",
			ePrefix.String(),
			lastIdx,
			replaceAtIndex)

		return err
	}

	var newTextField ITextFieldSpecification

	newTextField,
		err = textField.CopyOutITextField(
		ePrefix.XCtx(
			"newTextField"))

	if err != nil {
		return err
	}

	if stdLine.textFields[replaceAtIndex] != nil {

		stdLine.textFields[replaceAtIndex].Empty()
		stdLine.textFields[replaceAtIndex] = nil

	}

	stdLine.textFields[replaceAtIndex] = newTextField

	return err
}

// SetNumOfStdLines - Sets the number of repetitions for this
// instance of TextLineSpecStandardLine. The number of standard
// lines is the number of times this standard line will be output
// printed.
//
// If the input parameter 'numOfStdLines' is less than zero, this
// method will automatically reset the 'numOfStdLines' value to
// one ('1').
//
// If input parameter 'numOfStdLines' is set to a zero value, it
// means that no text will be output or printed for this instance
// of TextLineSpecStandardLine.
//
//       The following examples illustrate the use of
//       'numOfStdLines':
//         Example #1:
//          Standard Line Text = "Hello World"
//          numOfStdLines = 1
//          Text Output:
//            "Hello World"
//
//         Example #2:
//          Standard Line Text = "Hello World"
//          numOfStdLines = 3
//          Text Output:
//            "Hello World"
//            "Hello World"
//            "Hello World"
//
//
func (stdLine *TextLineSpecStandardLine) SetNumOfStdLines(
	numOfStdLines int) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	if numOfStdLines < 0 {
		numOfStdLines = 1
	}

	stdLine.numOfStdLines = numOfStdLines
}

// SetNewLineChars - By default, the line termination character for
// standard lines produced and applied by this text line
// specification is the new line character, '\n'. However, users
// have the option of substituting a character or series of
// characters for the line termination sequence using this method.
//
// New line characters are also referred to as Line Termination
// Characters.
//
// This method will receive a string as input and apply the
// characters in that string as the line termination sequence for
// this instance of TextLineSpecStandardLine.
//
// If input parameter 'newLineChars' is submitted as an empty
// string, this method will take no action and exit.
//
// By default, the TextLineSpecStandardLine type applies the line
// termination characters to each standard line of text generated.
// However, users have the option of monitoring and controlling the
// application of text line terminators by calling the following
// methods:
//
//   TextLineSpecStandardLine.GetNewLineRunes()
//   TextLineSpecStandardLine.SetNewLineChars()
//   TextLineSpecStandardLine.SetNewLineRunes()
//   TextLineSpecStandardLine.TurnAutoLineTerminationOff()
//   TextLineSpecStandardLine.TurnAutoLineTerminationOn()
//
// This method is similar to
// TextLineSpecStandardLine.SetNewLineRunes() with sole
// exception being that this method receives a string instead of
// an array of runes.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  newLineChars               string
//     - A string containing a single text character or a series
//       of text characters used to terminate each line of text
//       generated by the current instance of
//       TextLineSpecStandardLine.
//
//       New Line Characters are also referred to as Line
//       Termination Characters.
//
//       If this parameter is submitted as a zero length or empty
//       string, an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) SetNewLineChars(
	newLineChars string,
	errorPrefix interface{}) (
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"SetNewLineChars()",
		"")

	if err != nil {
		return err
	}

	if len(newLineChars) == 0 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'newLineChars'\n"+
			"is an empty string!\n",
			ePrefix.String())

		return err
	}

	stdLine.newLineChars = nil

	stdLine.newLineChars = []rune(newLineChars)

	return err
}

// SetNewLineRunes - By default, the line termination character for
// standard lines produced and applied by this text line
// specification is the new line character, '\n'. However, users
// have the option of substituting a character, or series of
// characters, for the line termination sequence using this method.
//
// New Line Runes are also referred to as Line Termination Runes.
//
// This method will receive an array of runes as input and applies
// the characters in this array as the line termination sequence
// for this instance of TextLineSpecStandardLine.
//
// If input parameter 'lineTerminationChars' is submitted as a zero
// length array, or if any of the rune values in this array have a
// zero value, this method will return an error.
//
// By default, the TextLineSpecStandardLine type applies the line
// termination characters to each standard line of text generated.
// However, users have the option of monitoring and controlling the
// application of text line terminators by calling the following
// methods:
//
//   TextLineSpecStandardLine.GetNewLineChars()
//   TextLineSpecStandardLine.GetNewLineRunes()
//   TextLineSpecStandardLine.SetNewLineChars()
//   TextLineSpecStandardLine.SetNewLineRunes()
//   TextLineSpecStandardLine.TurnAutoLineTerminationOff()
//   TextLineSpecStandardLine.TurnAutoLineTerminationOn()
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  newLineRunes               []rune
//     - An array of runes containing the character or characters
//       used to terminate each line of text generated by the
//       current instance of TextLineSpecStandardLine.
//
//       New Line Runes are also referred to as Line Termination
//       Runes.
//
//       If this parameter is submitted as a zero length or empty
//       rune array, or if the rune array contains invalid zero
//       rune values, an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) SetNewLineRunes(
	newLineRunes []rune,
	errorPrefix interface{}) (
	err error) {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"SetNewLineRunes()",
		"")

	if err != nil {
		return err
	}

	sMechPreon := strMechPreon{}

	_,
		err =
		sMechPreon.testValidityOfRuneCharArray(
			newLineRunes,
			ePrefix.XCtx(
				"newLineRunes Error"))

	if err != nil {
		return err
	}

	err =
		sMechPreon.copyRuneArrays(
			&stdLine.newLineChars,
			&newLineRunes,
			true,
			ePrefix.XCtx(
				"newLineRunes->"+
					"stdLine.newLineChars"))

	return err
}

// SetStandardLine - Reconfigures the current instance of
// TextLineSpecStandardLine with new data values.
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// The pre-existing data fields for the current instance of
// TextLineSpecStandardLine will be overwritten and deleted.
//
//
// ------------------------------------------------------------------------
//
// Unchanged Values
//
// The following member variables will remain unchanged from their
// current values. This method will NOT modify these values:
//
//  newLineChars               []rune
//     - By default, each line of text generated by
//       TextLineSpecStandardLine will be terminated with a new
//       line character ('\n'). However, users have the option to
//       override and modify this behavior by supplying an
//       alternative character or characters to be used as a line
//       termination sequence for each line of text produced by the
//       current TextLineSpecStandardLine instance.
//
//       This method will not change the current value of
//       'newLineChars'.
//
//       To override, change or control the behavior of
//       'newLineChars', see the following methods:
//         TextLineSpecStandardLine.GetNewLineRunes()
//         TextLineSpecStandardLine.SetNewLineChars()
//         TextLineSpecStandardLine.SetNewLineRunes()
//         TextLineSpecStandardLine.TurnAutoLineTerminationOff()
//         TextLineSpecStandardLine.TurnAutoLineTerminationOn()
//
//
//  turnLineTerminatorOff      bool
//     - The 'turnLineTerminatorOff' flag controls whether a line
//       termination character or characters will be automatically
//       appended to each line of text produced by
//       TextLineSpecStandardLine.
//
//       When the boolean flag 'turnLineTerminatorOff' is set to
//       'false', line terminators as defined by member variable
//       'newLineChars' will be applied as a line termination
//       sequence for each line of text produced by
//       TextLineSpecStandardLine.
//
//       When this boolean value is set to 'true', it turns off or
//       cancels the automatic generation of line terminators for
//       each line of text produced by TextLineSpecStandardLine.
//
//       The default line terminator is the new line character
//       ('\n') which is defined by member variable 'newLineChars'.
//       However, this value is subject to user control and may be
//       overridden by one or more characters supplied by the user.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  numOfStdLines              int
//     - An integer value specifying the number of repetitions for
//       a standard line text formatted for text display, file
//       output or printing.
//
//       A 'numOfStdLines' value of 1 means the line will be output
//       once, a value of 2 signals the line will be repeated or
//       output twice, a value of '3' signals the line will be output
//       3-times and so on.
//
//       If the 'numOfStdLines' value is set to zero, no text line
//       will be formatted for text display, file output or printing.
//
//       If this value is set to a value less than zero, it will be
//       automatically reset to a value of one ('1').
//
//       The following examples illustrate the use of
//       'numOfStdLines':
//         Example #1:
//          Standard Line Text = "Hello World"
//          numOfStdLines = 1
//          Text Output:
//            "Hello World"
//
//         Example #2:
//          Standard Line Text = "Hello World"
//          numOfStdLines = 3
//          Text Output:
//            "Hello World"
//            "Hello World"
//            "Hello World"
//
//
//  textFields                 []ITextFieldSpecification
//     - 'textFields' is a collection of objects implementing the
//       ITextLineSpecification interface. These text fields are
//       assembled by the TextLineSpecStandardLine type and formatted
//       as a single line of text. This single line of text is
//       output one or more times as specified by input parameter,
//       'numOfStdLines'.
//
//       Text fields are the building blocks used to assemble a
//       standard line of text.
//
//       If this parameter is submitted as a 'nil' value or a zero
//       length array, an error will be returned.
//
//       If any of the objects contained in this collection are
//       invalid, an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) SetStandardLine(
	numOfStdLines int,
	textFields []ITextFieldSpecification,
	errorPrefix interface{}) error {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"SetStandardLine()",
		"")

	if err != nil {
		return err
	}

	var newLineChars []rune

	if len(stdLine.newLineChars) == 0 {

		err =
			textSpecificationMolecule{}.ptr().
				setDefaultNewLineChars(
					&newLineChars,
					ePrefix)

		if err != nil {
			return err
		}

	} else {

		err = strMechPreon{}.ptr().
			copyRuneArrays(
				&newLineChars,
				&stdLine.newLineChars,
				true,
				ePrefix.XCtx(
					"stdLine.newLineChars->"+
						"newLineChars"))

		if err != nil {
			return err
		}
	}

	turnLineTerminatorOff := stdLine.turnLineTerminatorOff

	return textLineSpecStandardLineNanobot{}.ptr().
		setTxtSpecStandardLine(
			stdLine,
			numOfStdLines,
			textFields,
			newLineChars,
			turnLineTerminatorOff,
			ePrefix)
}

// SetStandardLineAllParms - Reconfigures the current instance of
// TextLineSpecStandardLine with new data values.
//
// This method includes the maximum number input parameters thereby
// allowing the caller to control and configure all member variables
// for the current instance of TextLineSpecStandardLine.
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// The pre-existing data fields for the current instance of
// TextLineSpecStandardLine will be deleted and overwritten.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  numOfStdLines              int
//     - An integer value specifying the number of repetitions for
//       a standard line text formatted for text display, file
//       output or printing.
//
//       A 'numOfStdLines' value of 1 means the line will be output
//       once, a value of 2 signals the line will be repeated or
//       output twice, a value of '3' signals the line will be output
//       3-times and so on.
//
//       If the 'numOfStdLines' value is set to zero, no text line
//       will be formatted for text display, file output or printing.
//
//       If this value is set to a value less than zero, it will be
//       automatically reset to a value of one ('1').
//
//       The following examples illustrate the use of
//       'numOfStdLines':
//         Example #1:
//          Standard Line Text = "Hello World"
//          numOfStdLines = 1
//          Text Output:
//            "Hello World"
//
//         Example #2:
//          Standard Line Text = "Hello World"
//          numOfStdLines = 3
//          Text Output:
//            "Hello World"
//            "Hello World"
//            "Hello World"
//
//
//  textFields                 []ITextFieldSpecification
//     - 'textFields' is a collection of objects implementing the
//       ITextLineSpecification interface. These text fields are
//       assembled by the TextLineSpecStandardLine type and formatted
//       as a single line of text. This single line of text is
//       output one or more times as specified by input parameter,
//       'numOfStdLines'.
//
//       Text fields are the building blocks used to assemble a
//       standard line of text.
//
//       If this parameter is submitted as a 'nil' value or a zero
//       length array, an error will be returned.
//
//       If any of the objects contained in this collection are
//       invalid, an error will be returned.
//
//
//  newLineChars               []rune
//     - An array of runes which contains the text characters which
//       will be applied as line termination characters for each
//       line of text produced by the returned instance of
//       TextLineSpecStandardLine.
//
//       By default, each line of text generated by
//       TextLineSpecStandardLine will be terminated with a new
//       line character ('\n'). However, this parameter allows the
//       caller specify the character or characters to be used as a
//       line termination sequence for each line of text produced
//       by the returned instance of TextLineSpecStandardLine.
//
//       If this parameter is submitted as a 'nil' value or, if
//       'newLineChars' is a zero length array, this method will
//       set 'newLineChars' to the default new line termination
//       character ('\n').
//
//
//  turnLineTerminatorOff      bool
//     - The 'turnLineTerminatorOff' flag controls whether a line
//       termination character or characters will be automatically
//       appended to each line of text produced by
//       TextLineSpecStandardLine.
//
//       When the boolean flag 'turnLineTerminatorOff' is set to
//       'false', line terminators as defined by parameter
//       'newLineChars' will be applied as a line termination
//       sequence for each line of text produced by
//       TextLineSpecStandardLine.
//
//       When this boolean value is set to 'true', it turns off or
//       cancels the automatic generation of line terminators for
//       each line of text produced by TextLineSpecStandardLine.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) SetStandardLineAllParms(
	numOfStdLines int,
	textFields []ITextFieldSpecification,
	newLineChars []rune,
	turnLineTerminatorOff bool,
	errorPrefix interface{}) error {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine."+
			"SetStandardLineAllParms()",
		"")

	if err != nil {
		return err
	}

	if len(newLineChars) == 0 {

		err =
			textSpecificationMolecule{}.ptr().
				setDefaultNewLineChars(
					&newLineChars,
					ePrefix)

		if err != nil {
			return err
		}

	}

	return textLineSpecStandardLineNanobot{}.ptr().
		setTxtSpecStandardLine(
			stdLine,
			numOfStdLines,
			textFields,
			newLineChars,
			turnLineTerminatorOff,
			ePrefix)
}

// SetTextFields - Replaces the existing array of text fields for
// the current TextLineSpecStandardLine instance.
//
// If input parameter 'textFields' is nil or zero length, the internal
// array of text fields will be emptied and set to nil.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  textFields                 []ITextFieldSpecification
//     - 'textFields' is a collection of objects implementing the
//       ITextLineSpecification interface. These text fields are
//       assembled by the TextLineSpecStandardLine type and formatted
//       as a single line of text. This single line of text is
//       output one or more times as specified by input parameter,
//       'numOfStdLines'.
//
//       Text fields are the building blocks used to assemble a
//       standard line of text.
//
//       If this parameter is submitted as a 'nil' value or a zero
//       length array, an error will be returned.
//
//       If any of the objects contained in this collection are
//       invalid, an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) SetTextFields(
	textFields []ITextFieldSpecification,
	errorPrefix interface{}) error {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine.SetTextFields()",
		"")

	if err != nil {
		return err
	}

	lenTextFields := len(textFields)

	if lenTextFields == 0 {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'textFields' is an empty array!\n",
			ePrefix.String())

		return err
	}

	_,
		err =
		textLineSpecStandardLineElectron{}.ptr().
			testValidityOfTextFields(
				&textFields,
				false, // allowZeroLengthTextFieldsArray
				ePrefix.XCtx("Input parameter textFields is invalid!"))

	if err != nil {
		return err
	}

	textLineSpecStandardLineMolecule{}.ptr().
		emptyStdLineTextFields(stdLine)

	_,
		err =
		textLineSpecStandardLineAtom{}.ptr().
			copyTextFields(
				&stdLine.textFields,
				&textFields,
				ePrefix.XCtx(
					"textFields->"+
						"stdLine.textFields"))

	return err
}

// String - Returns the formatted text generated by this Text Line
// Specification for output display and printing.
//
// The standard line may be replicated multiple times if the
// value of internal member variable' stdLine.numOfStdLines' is
// greater than one ('1').
//
// If an error occurs, the error message will be included in the
// returned string.
//
// This method is similar to
// TextLineSpecStandardLine.GetFormattedText() with the sole
// difference being that this method does not return an error.
//
// This method fulfills requirements of the ITextLineSpecification
// interface.
//
func (stdLine TextLineSpecStandardLine) String() string {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	ePrefix := ePref.ErrPrefixDto{}.NewEPrefCtx(
		"TextLineSpecStandardLine.GetFormattedText()",
		"")

	var formattedText string
	var err error

	formattedText,
		err = textLineSpecStandardLineMolecule{}.ptr().
		getFormattedText(
			&stdLine,
			ePrefix.XCtx("stdLine"))

	if err != nil {
		formattedText = fmt.Sprintf("%v\n",
			err.Error())
	}

	return formattedText
}

// TextBuilder - Configures the line of text produced by this
// instance of TextLineSpecPlainText, and writes it to an instance
// of strings.Builder.
//
// This method fulfills requirements of the ITextLineSpecification
// interface.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  sBuilder                   *strings.Builder
//    - A pointer to an instance of strings.Builder. The line of
//      text produced by the current instance of
//      TextLineSpecPlainText and writes that text to 'sBuilder'.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (stdLine *TextLineSpecStandardLine) TextBuilder(
	sBuilder *strings.Builder,
	errorPrefix interface{}) error {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecStandardLine.TextBuilder()",
		"")

	if err != nil {
		return err
	}

	if sBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'sBuilder' (strings.Builder)\n"+
			"is invalid! 'sBuilder' is a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	var formattedTxtStr string

	formattedTxtStr,
		err = textLineSpecStandardLineMolecule{}.ptr().
		getFormattedText(
			stdLine,
			ePrefix.XCtx("stdLine"))

	if err != nil {
		return err
	}

	var err2 error

	_,
		err2 = sBuilder.WriteString(formattedTxtStr)

	if err2 != nil {
		err = fmt.Errorf("%v\n"+
			"Error returned by sBuilder.WriteString(formattedTxtStr)\n"+
			"%v\n",
			ePrefix.XCtxEmpty().String(),
			err2.Error())
	}

	return err
}

// TextTypeName - returns a string specifying the type
// of Text Line Specification.
//
// This method fulfills requirements of ITextSpecification
// interface.
//
func (stdLine *TextLineSpecStandardLine) TextTypeName() string {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	return "TextLineSpecStandardLine"
}

// TextLineSpecName - returns a string specifying the name
// of this Text Line Specification.
//
// This method fulfills requirements of ITextLineSpecification
// interface.
//
func (stdLine *TextLineSpecStandardLine) TextLineSpecName() string {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	return "TextLineSpecStandardLine"
}

// TurnAutoLineTerminationOff - Turns off or cancels the automatic
// generation of new line terminators for each line of text
// produced by this instance of TextLineSpecStandardLine.
//
// When the member variable 'turnLineTerminatorOff' is set to
// 'true', line terminators as defined by member variable
// 'newLineChars' WILL NOT be applied as a line termination sequence
// for each line of text produced by TextLineSpecStandardLine.
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// This method will always set 'turnLineTerminatorOff' to 'true'
// thereby removing new line terminators for each line of text
// produced by this instance of TextLineSpecStandardLine.
//
// ----------------------------------------------------------------
//
// In contrast, method
// TextLineSpecStandardLine.TurnAutoLineTerminationOn will always
// set member variable 'turnLineTerminatorOff' to 'false'. This
// means that the automatic generation of line terminators is
// 'turned on' and a line termination sequence WILL BE applied for
// each line of text produced by TextLineSpecStandardLine.
//
// The default line terminator is the new line character ('\n')
// which is defined by member variable 'newLineChars'. However,
// this value is subject to user control and may be overridden by
// one or more characters supplied by the user.
//
// Again, this method will always set 'turnLineTerminatorOff' to
// 'true'.  This means that line terminators WILL NOT BE applied to
// each line of text produced by this instance of TextLineSpecStandardLine.
//
func (stdLine *TextLineSpecStandardLine) TurnAutoLineTerminationOff() {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	stdLine.turnLineTerminatorOff = true
}

// TurnAutoLineTerminationOn - Turns on or engages the automatic
// generation of new line terminators for each line of text
// produced by this instance of TextLineSpecStandardLine.
//
// This means that a new line termination sequence with characters
// defined by member variable 'newLineChars' WILL BE applied to
// each line of text produced by the current instance of
// TextLineSpecStandardLine.
//
// When the member variable 'turnLineTerminatorOff' is set to
// 'false', line terminators as defined by member variable
// 'newLineChars' WILL BE applied as a line termination sequence
// for each line of text produced by TextLineSpecStandardLine.
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// This method will always set 'turnLineTerminatorOff' to 'false'
// thereby ensuring that line termination characters will be
// automatically appended to each line of text produced by the
// current instance of TextLineSpecStandardLine.
//
// ----------------------------------------------------------------
//
// In contrast, method
// TextLineSpecStandardLine.TurnAutoLineTerminationOff will always
// set member variable 'turnLineTerminatorOff' to 'true'. This
// means that the automatic generation of line terminators is
// 'turned off' and a line termination sequence WILL NOT BE applied
// for each line of text produced by TextLineSpecStandardLine.
//
// The default line terminator is the new line character ('\n')
// which is defined by member variable 'newLineChars'. However,
// this value is subject to user control and may be overridden by
// one or more characters supplied by the user.
//
// Again, this method will always set 'turnLineTerminatorOff' to
// 'false' meaning that line terminators WILL BE applied to
// each line of text produced by this instance of TextLineSpecStandardLine.
//
func (stdLine *TextLineSpecStandardLine) TurnAutoLineTerminationOn() {

	if stdLine.lock == nil {
		stdLine.lock = new(sync.Mutex)
	}

	stdLine.lock.Lock()

	defer stdLine.lock.Unlock()

	stdLine.turnLineTerminatorOff = false
}
