package strmech

import (
	"fmt"
	ePref "github.com/MikeAustin71/errpref"
	"strings"
	"sync"
	"time"
)

// TextStrBuilder - The Text String Builder generates formatted
// text character strings for text displays, file output or
// printing.
//
// 'TextStrBuilder' methods are designed to receive a pointer to an
// instances of strings.Builder from the calling function. This
// instance of strings.Builder is used store the formatted text
// generated by individual 'TextStrBuilder' methods.
//
// The 'TextStrBuilder' methods will produce formatted text
// string elements. These text elements may consist of a single
// text field, a series of text fields or an entire line of text
// depending on the method invoked.
//
type TextStrBuilder struct {
	lock *sync.Mutex
}

// DateTime - Formats a single date time and writes it to an
// instance of strings.Builder.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  strBuilder                 *strings.Builder
//     - A pointer to an instance of strings.Builder. Formatted
//       Date/Time Text created by this method will be written
//       to this instance of strings.Builder.
//
//
//  dateTime                   time.Time
//     - The date/time value which will be formatted as a text
//       string.
//
//       If this parameter is set equal to zero, an error will be
//       returned.
//
//
//  dateTimeFieldLength        int
//     - Used to format Date/Time Text Fields. This is the length
//       of the text field in which the formatted 'dateTime' string
//       will be displayed. If 'dateTimeFieldLength' is less than
//       the length of the 'dateTime' string, it will be
//       automatically set equal to the 'dateTime' string length.
//
//       To automatically set the value of 'dateTimeFieldLength' to
//       the length of 'dateTime', set this parameter to a value of
//       minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  dateTimeFormat             string
//    - This string will be used to format the date/time value
//      'dateTime' as a text string.
//
//       If this 'dateTimeFormat' string is empty (has a zero
//       length), a default Date/Time format string will be applied
//       as follows:
//         "2006-01-02 15:04:05.000000000 -0700 MST"
//
//
//  dateTimeTextJustify        TextJustify
//      An enumeration value specifying the justification of the
//      'dateTime' string within the text field specified by
//      'dateTimeFieldLength'.
//
//      Text justification can only be evaluated in the context of
//      a text label, field length and a Text Justification object
//      of type TextJustify. This is because text labels with a
//      field length equal to or less than the length of the text
//      label never use text justification. In these cases, text
//      justification is completely ignored.
//
//      If the field length is greater than the length of the text
//      label, text justification must be equal to one of these
//      three valid values:
//          TextJustify(0).Left()
//          TextJustify(0).Right()
//          TextJustify(0).Center()
//
//      You can also use the abbreviated text justification
//      enumeration syntax as follows:
//
//          TxtJustify.Left()
//          TxtJustify.Right()
//          TxtJustify.Center()
//
//
//  lineTerminator             string
//     - This string holds the character or characters which will
//       be used to terminate the formatted text thereby converting
//       this text element into a valid line of text.
//
//       If a text line is required, setting this string to include
//       a new line character ('\n') will ensure that the text line
//       consists of the date/time text field and no other text
//       elements.
//
//       The most common usage sets this string to a new line
//       character ("\n").
//
//       If Line Termination is NOT required, set 'lineTerminator'
//       to a zero length or empty string and no line termination
//       characters will be created.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) DateTime(
	strBuilder *strings.Builder,
	dateTime time.Time,
	dateTimeFieldLength int,
	dateTimeFormat string,
	dateTimeTextJustify TextJustify,
	lineTerminator string,
	errorPrefix interface{}) (
	err error) {

	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"DateTime()",
		"")

	if err != nil {
		return err
	}

	if strBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'strBuilder' is invalid!\n"+
			"'strBuilder' has a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	if dateTime.IsZero() {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'dateTime' is invalid!\n"+
			"'dateTime' has a has a zero Date/Time value.\n",
			ePrefix.String())

		return err

	}

	if len(dateTimeFormat) == 0 {
		dateTimeFormat =
			textSpecificationMolecule{}.ptr().
				getDefaultDateTimeFormat()
	}

	var txtDateTimeField TextFieldSpecDateTime

	txtDateTimeField,
		err = TextFieldSpecDateTime{}.NewDateTimeField(
		dateTime,
		dateTimeFieldLength,
		dateTimeFormat,
		dateTimeTextJustify,
		ePrefix.XCpy(
			"txtDateTimeField<-dateTime"))

	if err != nil {
		return err
	}

	err = txtDateTimeField.TextBuilder(
		strBuilder,
		ePrefix.XCpy(
			"strBuilder<-txtDateTimeField"))

	if err != nil {
		return err
	}

	if len(lineTerminator) > 0 {
		strBuilder.WriteString(lineTerminator)
	}

	return err
}

// Label - Formats a single text label and writes the output string
// to an instance of strings.Builder passed as an input parameter
// by the calling function.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  strBuilder                 *strings.Builder
//     - A pointer to an instance of strings.Builder. A formatted
//       text label string created by this method will be written
//       to this instance of strings.Builder.
//
//
//  labelText                  string
//     - This strings holds the text characters which will be
//       formatted as a text label.
//
//       If 'labelText' is submitted as a zero length or empty
//       string, an error will be returned.
//
//
//  labelFieldLength           int
//     - Used to format Text Label Fields. This is the length of
//       the text field in which the formatted 'labelText' string
//       will be displayed. If 'labelFieldLength' is less than the
//       length of the 'labelText' string, it will be automatically
//       set equal to the 'labelText' string length.
//
//       To automatically set the value of 'labelFieldLength' to
//       the length of 'labelText', set this parameter to a value
//       of  minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  labelTextJustify           TextJustify
//      An enumeration value specifying the justification of the
//      'labelText' string within the text field specified by
//      'labelFieldLength'.
//
//      Text justification can only be evaluated in the context of
//      a text label, field length and a Text Justification object
//      of type TextJustify. This is because text labels with a
//      field length equal to or less than the length of the text
//      label never use text justification. In these cases, text
//      justification is completely ignored.
//
//      If the field length is greater than the length of the text
//      label, text justification must be equal to one of these
//      three valid values:
//          TextJustify(0).Left()
//          TextJustify(0).Right()
//          TextJustify(0).Center()
//
//      You can also use the abbreviated text justification
//      enumeration syntax as follows:
//
//          TxtJustify.Left()
//          TxtJustify.Right()
//          TxtJustify.Center()
//
//
//  lineTerminator             string
//     - This string holds the character or characters which will
//       be used to terminate the formatted text thereby converting
//       this text element into a valid line of text.
//
//       If a text line is required, setting this string to include
//       a new line character ('\n') will ensure that the text line
//       consists of the text label field and no other text
//       elements.
//
//       The most common usage sets this string to a new line
//       character ("\n").
//
//       If Line Termination is NOT required, set 'lineTerminator'
//       to a zero length or empty string and no line termination
//       characters will be created.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) Label(
	strBuilder *strings.Builder,
	labelText string,
	labelFieldLength int,
	labelTextJustify TextJustify,
	lineTerminator string,
	errorPrefix interface{}) (
	err error) {

	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"Label()",
		"")

	if err != nil {
		return err
	}

	if strBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'strBuilder' is invalid!\n"+
			"'strBuilder' has a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	if len(labelText) == 0 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'labelText' is invalid!\n"+
			"'labelText' is an empty string with a string length\n"+
			"of zero (0).\n",
			ePrefix.String())

		return err

	}

	var txtLabelSpec TextFieldSpecLabel

	txtLabelSpec,
		err = TextFieldSpecLabel{}.NewTextLabel(
		labelText,
		labelFieldLength,
		labelTextJustify,
		ePrefix.XCpy(
			"txtLabelSpec<-labelText"))

	if err != nil {
		return err
	}

	err = txtLabelSpec.TextBuilder(
		strBuilder,
		ePrefix.XCpy(
			"strBuilder<-txtLabelSpec"))

	if err != nil {
		return err
	}

	if len(lineTerminator) > 0 {
		strBuilder.WriteString(lineTerminator)
	}

	return err
}

// FieldsSingleDateTime - Is designed to produce three text
// elements consolidated and formatted as a single text field.
//
// The three text elements consist of a left margin string, a
// date/time text field and a right margin string.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  strBuilder                 *strings.Builder
//     - A pointer to an instance of strings.Builder. A formatted
//       string of text characters created by this method will be
//       written to this instance of strings.Builder.
//
//
//  leftMarginStr              string
//     - The contents of the string will be used as the left margin
//       for the 'dateTime' field.
//
//       If no left margin is required, set 'LeftMarginStr' to a
//       zero length or empty string, and no left margin will be
//       created.
//
//
//  dateTime                   time.Time
//     - The date/time value which will be formatted as a text
//       string.
//
//       If this parameter is set equal to zero, an error will be
//       returned.
//
//
//  dateTimeFieldLength        int
//     - Used to format Date/Time Text Fields. This is the length
//       of the text field in which the formatted 'dateTime' string
//       will be displayed. If 'dateTimeFieldLength' is less than
//       the length of the 'dateTime' string, it will be
//       automatically set equal to the 'dateTime' string length.
//
//       To automatically set the value of 'dateTimeFieldLength' to
//       the length of 'dateTime', set this parameter to a value of
//       minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  dateTimeFormat             string
//    - This string will be used to format the date/time value
//      'dateTime' as a text string.
//
//       If this 'dateTimeFormat' string is empty (has a zero
//       length), a default Date/Time format string will be applied
//       as follows:
//         "2006-01-02 15:04:05.000000000 -0700 MST"
//
//
//  dateTimeTextJustify        TextJustify
//      An enumeration value specifying the justification of the
//      'dateTime' string within the text field specified by
//      'dateTimeFieldLength'.
//
//      Text justification can only be evaluated in the context of
//      a text label, field length and a Text Justification object
//      of type TextJustify. This is because text labels with a
//      field length equal to or less than the length of the text
//      label never use text justification. In these cases, text
//      justification is completely ignored.
//
//      If the field length is greater than the length of the text
//      label, text justification must be equal to one of these
//      three valid values:
//          TextJustify(0).Left()
//          TextJustify(0).Right()
//          TextJustify(0).Center()
//
//      You can also use the abbreviated text justification
//      enumeration syntax as follows:
//
//          TxtJustify.Left()
//          TxtJustify.Right()
//          TxtJustify.Center()
//
//
//  rightMarginStr             string
//     - The contents of the string will be used as the right
//       margin for the 'dateTime' field.
//
//       If no right margin is required, set 'RightMarginStr' to a
//       zero length or empty string, and no right margin will be
//       created.
//
//
//  lineTerminator             string
//     - This string holds the character or characters which will
//       be used to terminate the formatted text thereby converting
//       this text element into a valid line of text.
//
//       If a text line is required, setting this string to include
//       a new line character ('\n') will ensure that the three
//       text elements formmated by this method as single text
//       field will constitute a single line of text.
//
//       The most common usage sets this string to a new line
//       character ("\n").
//
//       If Line Termination is NOT required, set 'lineTerminator'
//       to a zero length or empty string and no line termination
//       characters will be created.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) FieldsSingleDateTime(
	leftMarginStr string,
	dateTime time.Time,
	dateTimeFieldLength int,
	dateTimeFormat string,
	dateTimeTextJustify TextJustify,
	rightMarginStr string,
	lineTerminator string,
	strBuilder *strings.Builder,
	errorPrefix interface{}) (
	err error) {

	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"FieldsSingleDateTime()",
		"")

	if err != nil {
		return err
	}

	if strBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'strBuilder' is invalid!\n"+
			"'strBuilder' has a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	if dateTime.IsZero() {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'dateTime' is invalid!\n"+
			"'dateTime' has a has a zero Date/Time value.\n",
			ePrefix.String())

		return err

	}

	if len(dateTimeFormat) == 0 {
		dateTimeFormat =
			textSpecificationMolecule{}.ptr().
				getDefaultDateTimeFormat()
	}

	if len(leftMarginStr) > 0 {
		strBuilder.WriteString(leftMarginStr)
	}

	var txtDateTimeField TextFieldSpecDateTime

	txtDateTimeField,
		err = TextFieldSpecDateTime{}.NewDateTimeField(
		dateTime,
		dateTimeFieldLength,
		dateTimeFormat,
		dateTimeTextJustify,
		ePrefix.XCpy(
			"txtDateTimeField<-dateTime"))

	if err != nil {
		return err
	}

	err = txtDateTimeField.TextBuilder(
		strBuilder,
		ePrefix.XCpy(
			"strBuilder<-txtDateTimeField"))

	if err != nil {
		return err
	}

	if len(rightMarginStr) > 0 {
		strBuilder.WriteString(leftMarginStr)
	}

	if len(lineTerminator) > 0 {
		strBuilder.WriteString(lineTerminator)
	}

	return err
}

// FieldsSingleLabel - Is designed to produce three text elements
// consolidated and formatted as a single text field.
//
// The three text elements consist of a left margin string, a text
// label and a right margin string.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  strBuilder                 *strings.Builder
//     - A pointer to an instance of strings.Builder. A formatted
//       string of text characters created by this method will be
//       written to this instance of strings.Builder.
//
//
//  leftMarginStr              string
//     - The contents of the string will be used as the left margin
//       for 'labelText field.
//
//       If no left margin is required, set 'LeftMarginStr' to a
//       zero length or empty string, and no left margin will be
//       created.
//
//
//  labelText                  string
//     - This strings holds the text characters which will be
//       formatted as a text label.
//
//       This text label will be positioned to the immediate
//       right of the left margin string, 'leftMarginStr'.
//
//       If 'labelText' is submitted as a zero length or empty
//       string, an error will be returned.
//
//
//  labelFieldLength           int
//     - Used to format the Text Label Field, 'labelText'. This is
//       the length of the text field in which the formatted
//       'labelText' string will be displayed. If
//       'labelFieldLength' is less than the length of the
//       'labelText' string, it will be automatically set equal to
//       the 'labelText' string length.
//
//       To automatically set the value of 'labelFieldLength' to
//       the length of 'labelText', set this parameter to a value
//       of  minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  labelTextJustify           TextJustify
//      An enumeration value specifying the justification of the
//      'labelText' string within the text field specified by
//      'labelFieldLength'.
//
//      Text justification can only be evaluated in the context of
//      a text label, field length and a Text Justification object
//      of type TextJustify. This is because text labels with a
//      field length equal to or less than the length of the text
//      label never use text justification. In these cases, text
//      justification is completely ignored.
//
//      If the field length is greater than the length of the text
//      label, text justification must be equal to one of these
//      three valid values:
//          TextJustify(0).Left()
//          TextJustify(0).Right()
//          TextJustify(0).Center()
//
//      You can also use the abbreviated text justification
//      enumeration syntax as follows:
//
//          TxtJustify.Left()
//          TxtJustify.Right()
//          TxtJustify.Center()
//
//
//  rightMarginStr             string
//     - The contents of the string will be used as the right
//       margin for the 'labelText' field.
//
//       If no right margin is required, set 'RightMarginStr' to a
//       zero length or empty string, and no right margin will be
//       created.
//
//
//  lineTerminator             string
//     - This string holds the character or characters which will
//       be used to terminate the formatted text thereby converting
//       this text element into a valid line of text.
//
//       If a text line is required, setting this string to include
//       a new line character ('\n') will ensure that the three
//       text elements formmated by this method as single text
//       field will constitute a single line of text.
//
//       The most common usage sets this string to a new line
//       character ("\n").
//
//       If Line Termination is NOT required, set 'lineTerminator'
//       to a zero length or empty string and no line termination
//       characters will be created.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) FieldsSingleLabel(
	strBuilder *strings.Builder,
	leftMarginStr string,
	labelText string,
	labelFieldLength int,
	labelTextJustify TextJustify,
	rightMarginStr string,
	lineTerminator string,
	errorPrefix interface{}) (
	err error) {

	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"Label()",
		"")

	if err != nil {
		return err
	}

	if strBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'strBuilder' is invalid!\n"+
			"'strBuilder' has a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	if len(labelText) == 0 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'labelText' is invalid!\n"+
			"'labelText' is an empty string with a string length\n"+
			"of zero (0).\n",
			ePrefix.String())

		return err

	}

	if len(leftMarginStr) > 0 {
		strBuilder.WriteString(leftMarginStr)
	}

	var txtLabelSpec TextFieldSpecLabel

	txtLabelSpec,
		err = TextFieldSpecLabel{}.NewTextLabel(
		labelText,
		labelFieldLength,
		labelTextJustify,
		ePrefix.XCpy(
			"txtLabelSpec<-labelText"))

	if err != nil {
		return err
	}

	err = txtLabelSpec.TextBuilder(
		strBuilder,
		ePrefix.XCpy(
			"strBuilder<-txtLabelSpec"))

	if err != nil {
		return err
	}

	if len(rightMarginStr) > 0 {
		strBuilder.WriteString(leftMarginStr)
	}

	if len(lineTerminator) > 0 {
		strBuilder.WriteString(lineTerminator)
	}

	return err
}

// FieldsLabelParameterValue - Is designed to five text elements
// consolidated and formatted as a single text field.
//
// The five text elements consist of a left margin string, a
// parameter text label field, a parameter label right margin
// string, a parameter value label field, and a parameter value
// right margin string.
//
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  strBuilder                 *strings.Builder
//     - A pointer to an instance of strings.Builder. A formatted
//       string of text characters created by this method will be
//       written to this instance of strings.Builder.
//
//
//  leftMarginStr              string
//     - The contents of the string will be used as the left margin
//       for the 'paramLabelStr' field.
//
//       If no left margin is required, set 'LeftMarginStr' to a
//       zero length or empty string, and no left margin will be
//       created.
//
//
//  paramLabelStr              string
//     - This strings holds the text characters which will be
//       formatted as a Parameter Text Label. The 'paramLabelStr'
//       field provides a text description of the Parameter Value
//       field, 'paramValueStr'.
//
//       This text label will be positioned to the immediate
//       right of the left margin string, 'leftMarginStr'.
//
//       If 'paramLabelStr' is submitted as a zero length or empty
//       string, it will be skipped or ignored and noo error will
//       be generated.
//
//
//  paramLabelFieldLength      int
//     - Used to format the Text Label Field, 'paramLabelStr'. This
//       is the length of the text field in which the formatted
//       'paramLabelStr' string will be displayed. If
//       'paramLabelFieldLength' is less than the length of the
//       'paramLabelStr' string, it will be automatically set equal
//       to the 'paramLabelStr' string length.
//
//       To automatically set the value of 'paramLabelFieldLength'
//       to the length of 'paramLabelStr', set this parameter to a
//       value of  minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  paramLabelTextJustify      TextJustify
//      An enumeration value specifying the justification of the
//      'paramLabelStr' string within the text field specified by
//      'paramLabelFieldLength'.
//
//      Text justification can only be evaluated in the context of
//      a text label, field length and a Text Justification object
//      of type TextJustify. This is because text labels with a
//      field length equal to or less than the length of the text
//      label never use text justification. In these cases, text
//      justification is completely ignored.
//
//      If the field length is greater than the length of the text
//      label, text justification must be equal to one of these
//      three valid values:
//          TextJustify(0).Left()
//          TextJustify(0).Right()
//          TextJustify(0).Center()
//
//      You can also use the abbreviated text justification
//      enumeration syntax as follows:
//
//          TxtJustify.Left()
//          TxtJustify.Right()
//          TxtJustify.Center()
//
//
//  paramLabelRightMarginStr   string
//     - The contents of the string will be used as the right
//       margin for the 'paramLabelStr' field.
//
//       If no right margin is required, set
//       'paramLabelRightMarginStr' to a zero length or empty
//       string, and no right margin will be created.
//
//
//  paramValueStr              string
//     - This strings holds the text characters which will be
//       formatted as a Parameter Text Label. The 'paramValueStr'
//       field contains actual Parameter Value information.
//
//       This text label will be positioned to the immediate
//       right of the Parameter Label Right Margin string,
//       'paramLabelRightMarginStr'.
//
//       If 'paramValueStr' is submitted as a zero length or empty
//       string, an error will be returned.
//
//
//  paramValueFieldLength      int
//     - Used to format the Text Label Field, 'paramValueStr'. This
//       is the length of the text field in which the formatted
//       'paramValueStr' string will be displayed. If
//       'paramValueFieldLength' is less than the length of the
//       'paramValueStr' string, it will be automatically set equal
//       to the 'paramValueStr' string length.
//
//       To automatically set the value of 'paramValueFieldLength'
//       to the length of 'paramValueStr', set this parameter to a
//       value of minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  paramValueTextJustify      TextJustify
//      An enumeration value specifying the justification of the
//      'paramValueStr' string within the text field specified by
//      'paramValueFieldLength'.
//
//      Text justification can only be evaluated in the context of
//      a text label, field length and a Text Justification object
//      of type TextJustify. This is because text labels with a
//      field length equal to or less than the length of the text
//      label never use text justification. In these cases, text
//      justification is completely ignored.
//
//      If the field length is greater than the length of the text
//      label, text justification must be equal to one of these
//      three valid values:
//          TextJustify(0).Left()
//          TextJustify(0).Right()
//          TextJustify(0).Center()
//
//      You can also use the abbreviated text justification
//      enumeration syntax as follows:
//
//          TxtJustify.Left()
//          TxtJustify.Right()
//          TxtJustify.Center()
//
//
//  paramValueRightMarginStr   string
//     - The contents of the string will be used as the right
//       margin for the 'paramValueStr' field.
//
//       If no right margin is required, set
//       'paramValueRightMarginStr' to a zero length or empty
//       string, and no right margin will be created.
//
//
//  lineTerminator             string
//     - This string holds the character or characters which will
//       be used to terminate the formatted text thereby converting
//       these five text element into a single line of text.
//
//       If a text line is required, setting this string to include
//       a new line character ('\n') will ensure that the five text
//       elements formmated by this method as single text field
//       will constitute a single line of text.
//
//       The most common usage sets this string to a new line
//       character ("\n").
//
//       If Line Termination is NOT required, set 'lineTerminator'
//       to a zero length or empty string and no line termination
//       characters will be created.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) FieldsLabelParameterValue(
	strBuilder *strings.Builder,
	leftMarginStr string,
	paramLabelStr string,
	paramLabelFieldLength int,
	paramLabelTextJustify TextJustify,
	paramLabelRightMarginStr string,
	paramValueStr string,
	paramValueFieldLength int,
	paramValuelTextJustify TextJustify,
	paramValueRightMarginStr string,
	lineTerminator string,
	errorPrefix interface{}) (
	err error) {
	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"Label()",
		"")

	if err != nil {
		return err
	}

	if strBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'strBuilder' is invalid!\n"+
			"'strBuilder' has a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	if len(paramValueStr) == 0 {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'paramValueStr' is invalid!\n"+
			"'paramValueStr' is an empty string with a string\n"+
			"length of zero (0).\n",
			ePrefix.String())

		return err

	}

	if len(leftMarginStr) > 0 {
		strBuilder.WriteString(leftMarginStr)
	}

	if len(paramLabelStr) > 0 {

		var paramLabelSpec TextFieldSpecLabel

		paramLabelSpec,
			err = TextFieldSpecLabel{}.NewTextLabel(
			paramLabelStr,
			paramLabelFieldLength,
			paramLabelTextJustify,
			ePrefix.XCpy(
				"paramLabelSpec<-paramLabelStr"))

		if err != nil {
			return err
		}

		err = paramLabelSpec.TextBuilder(
			strBuilder,
			ePrefix.XCpy(
				"strBuilder<-paramLabelSpec"))

		if err != nil {
			return err
		}

	}

	if len(paramLabelRightMarginStr) > 0 {
		strBuilder.WriteString(paramLabelRightMarginStr)
	}

	var paramValueSpec TextFieldSpecLabel

	paramValueSpec,
		err = TextFieldSpecLabel{}.NewTextLabel(
		paramValueStr,
		paramValueFieldLength,
		paramValuelTextJustify,
		ePrefix.XCpy(
			"paramValueSpec<-paramValueStr"))

	if err != nil {
		return err
	}

	err = paramValueSpec.TextBuilder(
		strBuilder,
		ePrefix.XCpy(
			"strBuilder<-paramValueSpec"))

	if err != nil {
		return err
	}

	if len(paramValueRightMarginStr) > 0 {
		strBuilder.WriteString(paramValueRightMarginStr)
	}

	if len(lineTerminator) > 0 {
		strBuilder.WriteString(lineTerminator)
	}

	return err
}

func (txtStrBuildr *TextStrBuilder) LineSolid(
	leftMargin string,
	fillerCharacter string,
	fillerRepeatCount int,
	rightMargin string,
	lineTerminator string,
	strBuilder *strings.Builder,
	errorPrefix interface{}) (
	err error) {

	return err
}

func (txtStrBuildr *TextStrBuilder) LineBlank(
	numOfBlankLines int,
	strBuilder *strings.Builder,
	errorPrefix interface{}) (
	err error) {

	return err
}

func (txtStrBuildr *TextStrBuilder) LinePlainText(
	leftMargin string,
	plainText string,
	rightMargin string,
	lineTerminator string,
	strBuilder *strings.Builder,
	errorPrefix interface{}) (
	err error) {

	return err
}

func (txtStrBuildr *TextStrBuilder) LineTimerStartStop(
	leftMargin string,
	startTimeLabel string,
	startTime time.Time,
	endTimeLabel string,
	endTime time.Time,
	timeFormat string,
	timeDurationLabel string,
	textLabelFieldLen int,
	labelJustifiy TextJustify,
	rightMargin string,
	strBuilder *strings.Builder,
	errorPrefix interface{}) (
	err error) {

	return err
}
