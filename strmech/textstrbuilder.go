package strmech

import (
	"fmt"
	ePref "github.com/MikeAustin71/errpref"
	"strings"
	"sync"
	"time"
)

// TextStrBuilder - The Text String Builder generates formatted
// text character strings for text displays, file output or
// printing.
//
// 'TextStrBuilder' methods are designed to receive a pointer to an
// instances of strings.Builder from the calling function. This
// instance of strings.Builder is used store the formatted text
// generated by individual 'TextStrBuilder' methods.
//
// The 'TextStrBuilder' methods will produce formatted text
// string elements. These text elements may consist of a single
// text field, a series of text fields or an entire line of text
// depending on the method invoked.
//
type TextStrBuilder struct {
	lock *sync.Mutex
}

// BuildLabelsValues - Designed to process Parameter Label Value
// pairs. The calling functions passes an array of Label Value
// string pairs which are used to produce a series of text lines.
// Each line of text consists of five text elements consisting of
// a left margin string, a parameter text label field, a parameter
// label right margin string, a parameter value label field, and
// a parameter value right margin string.
//
// These five text elements can be configured as a complete line of
// text depending on the value applied to input parameter
// 'lineTerminator'.
//
// Since the Label Value string pairs are passed by means of an
// array, this method is capable of producing a large number of
// text lines.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  strBuilder                 *strings.Builder
//     - A pointer to an instance of strings.Builder. A formatted
//       string of text characters created by this method will be
//       written to this instance of strings.Builder.
//
//
//  paramLabelValues           []TextLabelValueStrings
//     - An array of Text Label Value string pairs. This array
//       contains the parameter label strings and the parameter
//       value strings which will be used to produce multiple lines
//       of text output.
//
//       The TextLabelValueStrings structure is listed as follows:
//
//       type TextLabelValueStrings struct {
//       	ParamLabel string
//       	ParamValue string
//        }
//
//       If either 'ParamLabel' or 'ParamValue' is submitted as an
//       empty or zero length string, it will be defaulted to a
//       single white space character " ".
//
//
//  leftMarginStr              string
//     - The contents of the string will be used as the left margin
//       for the 'paramLabelValues.ParamLabel' field.
//
//       If no left margin is required, set 'LeftMarginStr' to a
//       zero length or empty string, and no left margin will be
//       created.
//
//       This Left Margin String will be applied to every text line
//       generated from the 'paramLabelValues' array.
//
//
//  paramLabelFieldLength      int
//     - Used to format the Text Label Field,
//       'paramLabelValues.ParamLabel'. This is the length of the
//       text field in which the formatted
//       'paramLabelValues.ParamLabel' string will be displayed. If
//       'paramLabelFieldLength' is less than the length of the
//       'paramLabelValues.ParamLabel' string, it will be
//       automatically set equal to the
//       'paramLabelValues.ParamLabel' string length.
//
//       This Parameter Label Field Length value will be applied to
//       every text line generated from the 'paramLabelValues' array
//
//       To automatically set the value of 'paramLabelFieldLength'
//       to the length of 'paramLabelValues.ParamLabel', set this
//       parameter to a value of  minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  paramLabelTextJustify      TextJustify
//      An enumeration value specifying the justification of the
//      'paramLabelValues.ParamLabel' string within the text field
//      specified by 'paramLabelFieldLength'.
//
//       This Parameter Label Text Justification value will be
//       applied to every text line generated from the
//       'paramLabelValues' array.
//
//      Text justification can only be evaluated in the context of
//      a text label, field length and a Text Justification object
//      of type TextJustify. This is because text labels with a
//      field length equal to or less than the length of the text
//      label never use text justification. In these cases, text
//      justification is completely ignored.
//
//      If the field length is greater than the length of the text
//      label, text justification must be equal to one of these
//      three valid values:
//          TextJustify(0).Left()
//          TextJustify(0).Right()
//          TextJustify(0).Center()
//
//      You can also use the abbreviated text justification
//      enumeration syntax as follows:
//
//          TxtJustify.Left()
//          TxtJustify.Right()
//          TxtJustify.Center()
//
//
//  paramLabelRightMarginStr   string
//     - The contents of the string will be used as the right
//       margin for the 'paramLabelValues.ParamLabel' field.
//
//       If no right margin is required, set
//       'paramLabelRightMarginStr' to a zero length or empty
//       string, and no right margin will be created.
//
//       This Parameter Label Right Margin String will be applied
//       to every text line generated from the 'paramLabelValues'
//       array.
//
//
//  paramValueFieldLength      int
//     - Used to format the Text Label Field,
//       'paramLabelValues.ParamValue'. This is the length of the
//       text field in which the formatted
//       'paramLabelValues.ParamValue' string will be displayed. If
//       'paramValueFieldLength' is less than the length of the
//       'paramLabelValues.ParamValue' string, it will be
//       automatically set equal to the
//       'paramLabelValues.ParamValue' string length.
//
//       This Parameter Value Field Length will be applied to every
//       text line generated from the 'paramLabelValues' array.
//
//       To automatically set the value of 'paramValueFieldLength'
//       to the length of 'paramLabelValues.ParamValue', set this
//       parameter to a value of minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  paramValueTextJustify      TextJustify
//      An enumeration value specifying the justification of the
//      'paramLabelValues.ParamValue' string within the text field
//      specified by 'paramValueFieldLength'.
//
//       This Parameter Value Text Justification will be applied to
//       every text line generated from the 'paramLabelValues'
//       array.
//
//      Text justification can only be evaluated in the context of
//      a text label, field length and a Text Justification object
//      of type TextJustify. This is because text labels with a
//      field length equal to or less than the length of the text
//      label never use text justification. In these cases, text
//      justification is completely ignored.
//
//      If the field length is greater than the length of the text
//      label, text justification must be equal to one of these
//      three valid values:
//          TextJustify(0).Left()
//          TextJustify(0).Right()
//          TextJustify(0).Center()
//
//      You can also use the abbreviated text justification
//      enumeration syntax as follows:
//
//          TxtJustify.Left()
//          TxtJustify.Right()
//          TxtJustify.Center()
//
//
//  paramValueRightMarginStr   string
//     - The contents of the string will be used as the right
//       margin for the 'paramLabelValues.ParamValue' field.
//
//       This Parameter Value Right Margin String will be applied
//       to every text line generated from the 'paramLabelValues'
//       array.
//
//       If no right margin is required, set
//       'paramValueRightMarginStr' to a zero length or empty
//       string, and no right margin will be created.
//
//
//  lineTerminator             string
//     - This string holds the character or characters which will
//       be used to terminate the formatted text thereby converting
//       these five text element into a single line of text.
//
//       This Line Terminator String will be applied to every text
//       line generated from the 'paramLabelValues' array.
//
//       If a text line is required, setting this string to include
//       a new line character ('\n') will ensure that the five text
//       elements formatted by this method as single text field
//       will constitute a single line of text.
//
//       The most common usage sets this string to a new line
//       character ("\n").
//
//       If Line Termination is NOT required, set 'lineTerminator'
//       to a zero length or empty string and no line termination
//       characters will be created.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) BuildLabelsValues(
	strBuilder *strings.Builder,
	paramLabelValues []TextLabelValueStrings,
	leftMarginStr string,
	paramLabelFieldLength int,
	paramLabelTextJustify TextJustify,
	paramLabelRightMarginStr string,
	paramValueFieldLength int,
	paramValueTextJustify TextJustify,
	paramValueRightMarginStr string,
	lineTerminator string,
	errorPrefix interface{}) (
	err error) {

	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"BuildLabelsValues()",
		"")

	if err != nil {
		return err
	}

	if strBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'strBuilder' is invalid!\n"+
			"'strBuilder' has a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	if len(paramLabelValues) == 0 {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'paramLabelValues' is invalid!\n"+
			"The 'paramLabelValues' array has a length of zero (0).\n",
			ePrefix.String())

		return err

	}

	txtBuilderAtom := textStrBuilderAtom{}

	for idx, item := range paramLabelValues {

		err = txtBuilderAtom.fieldLabelWithMargins(
			strBuilder,
			leftMarginStr,
			item.ParamLabel,
			paramLabelFieldLength,
			paramLabelTextJustify,
			paramLabelRightMarginStr,
			"",
			ePrefix.XCpy(fmt.Sprintf(
				"strBuilder<-item[%v].paramLabel",
				idx)))

		if err != nil {
			return err
		}

		err = txtBuilderAtom.fieldLabelWithMargins(
			strBuilder,
			"",
			item.ParamValue,
			paramValueFieldLength,
			paramValueTextJustify,
			paramValueRightMarginStr,
			lineTerminator,
			ePrefix.XCpy(fmt.Sprintf(
				"strBuilder<-item[%v].paramValue",
				idx)))

		if err != nil {
			return err
		}

	}

	return err
}

// FieldDateTime - Formats a single date time and writes it to an
// instance of strings.Builder.
//
// This single Date/Time element can be configured as a complete
// line of text depending on the value applied to input parameter
// 'lineTerminator'.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  strBuilder                 *strings.Builder
//     - A pointer to an instance of strings.Builder. Formatted
//       Date/Time Text created by this method will be written
//       to this instance of strings.Builder.
//
//
//  dateTime                   time.Time
//     - The date/time value which will be formatted as a text
//       string.
//
//       If this parameter is set equal to zero, an error will be
//       returned.
//
//
//  dateTimeFieldLength        int
//     - Used to format Date/Time Text Fields. This is the length
//       of the text field in which the formatted 'dateTime' string
//       will be displayed. If 'dateTimeFieldLength' is less than
//       the length of the 'dateTime' string, it will be
//       automatically set equal to the 'dateTime' string length.
//
//       To automatically set the value of 'dateTimeFieldLength' to
//       the length of 'dateTime', set this parameter to a value of
//       minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  dateTimeFormat             string
//    - This string will be used to format the date/time value
//      'dateTime' as a text string.
//
//       If this 'dateTimeFormat' string is empty (has a zero
//       length), a default Date/Time format string will be applied
//       as follows:
//         "2006-01-02 15:04:05.000000000 -0700 MST"
//
//
//  dateTimeTextJustify        TextJustify
//      An enumeration value specifying the justification of the
//      'dateTime' string within the text field specified by
//      'dateTimeFieldLength'.
//
//      Text justification can only be evaluated in the context of
//      a text label, field length and a Text Justification object
//      of type TextJustify. This is because text labels with a
//      field length equal to or less than the length of the text
//      label never use text justification. In these cases, text
//      justification is completely ignored.
//
//      If the field length is greater than the length of the text
//      label, text justification must be equal to one of these
//      three valid values:
//          TextJustify(0).Left()
//          TextJustify(0).Right()
//          TextJustify(0).Center()
//
//      You can also use the abbreviated text justification
//      enumeration syntax as follows:
//
//          TxtJustify.Left()
//          TxtJustify.Right()
//          TxtJustify.Center()
//
//
//  lineTerminator             string
//     - This string holds the character or characters which will
//       be used to terminate the formatted text thereby converting
//       this text element into a valid line of text.
//
//       If a text line is required, setting this string to include
//       a new line character ('\n') will ensure that the text line
//       consists of the date/time text field and no other text
//       elements.
//
//       The most common usage sets this string to a new line
//       character ("\n").
//
//       If Line Termination is NOT required, set 'lineTerminator'
//       to a zero length or empty string and no line termination
//       characters will be created.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) FieldDateTime(
	strBuilder *strings.Builder,
	dateTime time.Time,
	dateTimeFieldLength int,
	dateTimeFormat string,
	dateTimeTextJustify TextJustify,
	lineTerminator string,
	errorPrefix interface{}) (
	err error) {

	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"FieldDateTime()",
		"")

	if err != nil {
		return err
	}

	if strBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'strBuilder' is invalid!\n"+
			"'strBuilder' has a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	if dateTime.IsZero() {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'dateTime' is invalid!\n"+
			"'dateTime' has a has a zero Date/Time value.\n",
			ePrefix.String())

		return err

	}

	return textStrBuilderAtom{}.ptr().fieldDateTimeWithMargins(
		strBuilder,
		"",
		dateTime,
		dateTimeFieldLength,
		dateTimeFormat,
		dateTimeTextJustify,
		"",
		lineTerminator,
		ePrefix.XCpy(
			"strBuilder<-dateTime"))
}

// FieldFiller - The Filler Text Field consists of a single
// character or multiple character sequence which is replicated
// some number of times to create the entire length of the Filler
// Text Field.
//
//  Example 1:
//   Filler Characters = "-"
//   Filler Characters Repeat Count = 3
//   Formatted Text = "---"
//
//  Example 2:
//   Filler Characters = "-*"
//   Filler Characters Repeat Count = 3
//   Formatted Text = "-*-*-*"
//
// This single Filler Text Field can be configured as a complete
// line of text depending on the value applied to input parameter
// 'lineTerminator'.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  fillerCharacters           string
//     - A string containing the text characters which will be
//       included in the Text Filler Field. The final Text Filler
//       Field will be constructed from the filler characters
//       repeated one or more times as specified by the
//       'fillerCharsRepeatCount' parameter.
//
//        Text Field Filler Length =
//          Length of fillerCharacters X fillerCharsRepeatCount
//
//          Example #1: fillerCharacters = "-*"
//                      fillerRepeatCount = 3
//                      Final Text Filler Field = "-*-*-*"
//
//          Example #2: fillerCharacters = "-"
//                      fillerRepeatCount = 3
//                      Final Text Filler Field = "---"
//
//       If 'fillerCharacters' is submitted as an empty or zero
//       length string, this method will return an error.
//
//
//  fillerCharsRepeatCount     int
//     - Controls the number of times 'fillerCharacters' is
//       repeated when constructing the final Text Filler Field
//       returned by this method. The actual length of the string
//       which will populated the completed Text Filler Field is
//       equal to the length of 'fillerCharacters' times the value
//       of 'fillerCharsRepeatCount'.
//
//        Text Field Filler Length =
//          Length of fillerCharacters X fillerCharsRepeatCount
//
//          Example #1: fillerCharacters = "-*"
//                      fillerRepeatCount = 3
//                      Final Text Filler Field = "-*-*-*"
//
//          Example #2: fillerCharacters = "-"
//                      fillerRepeatCount = 3
//                      Final Text Filler Field = "---"
//
//       If 'fillerCharsRepeatCount' has a value less than one (1) or
//       greater than one-million (1,000,000), an error will be
//       returned.
//
//
//  lineTerminator             string
//     - This string holds the character or characters which will
//       be used to terminate the formatted text thereby converting
//       this text element into a valid line of text.
//
//       If a text line is required, setting this string to include
//       a new line character ('\n') will ensure that the text line
//       consists of the text label field and no other text
//       elements.
//
//       The most common usage sets this string to a new line
//       character ("\n").
//
//       If Line Termination is NOT required, set 'lineTerminator'
//       to a zero length or empty string and no line termination
//       characters will be created.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  error
//     - If this method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) FieldFiller(
	strBuilder *strings.Builder,
	fillerCharacters string,
	fillerCharsRepeatCount int,
	lineTerminator string,
	errorPrefix interface{}) (
	err error) {

	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"FieldLabel()",
		"")

	if err != nil {
		return err
	}

	if strBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'strBuilder' is invalid!\n"+
			"'strBuilder' has a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	if len(fillerCharacters) == 0 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'fillerCharacters' is invalid!\n"+
			"'fillerCharacters' is an empty string with a string\n"+
			"length of zero (0).\n",
			ePrefix.String())

		return err

	}

	return textStrBuilderAtom{}.ptr().fieldFillerWithMargins(
		strBuilder,
		"",
		fillerCharacters,
		fillerCharsRepeatCount,
		"",
		lineTerminator,
		ePrefix.XCpy(
			"strBuilder<-fillerCharacters"))
}

// FieldLabel - Formats a single text label and writes the output string
// to an instance of strings.Builder passed as an input parameter
// by the calling function.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  strBuilder                 *strings.Builder
//     - A pointer to an instance of strings.Builder. A formatted
//       text label string created by this method will be written
//       to this instance of strings.Builder.
//
//
//  labelText                  string
//     - This strings holds the text characters which will be
//       formatted as a text label.
//
//       If 'labelText' is submitted as a zero length or empty
//       string, an error will be returned.
//
//
//  labelFieldLength           int
//     - Used to format Text Label Fields. This is the length of
//       the text field in which the formatted 'labelText' string
//       will be displayed. If 'labelFieldLength' is less than the
//       length of the 'labelText' string, it will be automatically
//       set equal to the 'labelText' string length.
//
//       To automatically set the value of 'labelFieldLength' to
//       the length of 'labelText', set this parameter to a value
//       of  minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  labelTextJustify           TextJustify
//      An enumeration value specifying the justification of the
//      'labelText' string within the text field specified by
//      'labelFieldLength'.
//
//      Text justification can only be evaluated in the context of
//      a text label, field length and a Text Justification object
//      of type TextJustify. This is because text labels with a
//      field length equal to or less than the length of the text
//      label never use text justification. In these cases, text
//      justification is completely ignored.
//
//      If the field length is greater than the length of the text
//      label, text justification must be equal to one of these
//      three valid values:
//          TextJustify(0).Left()
//          TextJustify(0).Right()
//          TextJustify(0).Center()
//
//      You can also use the abbreviated text justification
//      enumeration syntax as follows:
//
//          TxtJustify.Left()
//          TxtJustify.Right()
//          TxtJustify.Center()
//
//
//  lineTerminator             string
//     - This string holds the character or characters which will
//       be used to terminate the formatted text thereby converting
//       this text element into a valid line of text.
//
//       If a text line is required, setting this string to include
//       a new line character ('\n') will ensure that the text line
//       consists of the text label field and no other text
//       elements.
//
//       The most common usage sets this string to a new line
//       character ("\n").
//
//       If Line Termination is NOT required, set 'lineTerminator'
//       to a zero length or empty string and no line termination
//       characters will be created.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) FieldLabel(
	strBuilder *strings.Builder,
	labelText string,
	labelFieldLength int,
	labelTextJustify TextJustify,
	lineTerminator string,
	errorPrefix interface{}) (
	err error) {

	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"FieldLabel()",
		"")

	if err != nil {
		return err
	}

	if strBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'strBuilder' is invalid!\n"+
			"'strBuilder' has a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	if len(labelText) == 0 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'labelText' is invalid!\n"+
			"'labelText' is an empty string with a string length\n"+
			"of zero (0).\n",
			ePrefix.String())

		return err

	}

	return textStrBuilderAtom{}.ptr().fieldLabelWithMargins(
		strBuilder,
		"",
		labelText,
		labelFieldLength,
		labelTextJustify,
		"",
		lineTerminator,
		ePrefix.XCpy(
			"strBuilder<-labelText"))
}

// FieldsSingleDateTime - Is designed to produce three text
// elements consolidated and formatted as a single text field.
//
// The three text elements consist of a left margin string, a
// date/time text field and a right margin string.
//
// These three text elements can be configured as a complete line
// of text depending on the value applied to input parameter
// 'lineTerminator'.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  strBuilder                 *strings.Builder
//     - A pointer to an instance of strings.Builder. A formatted
//       string of text characters created by this method will be
//       written to this instance of strings.Builder.
//
//
//  leftMarginStr              string
//     - The contents of the string will be used as the left margin
//       for the 'dateTime' field.
//
//       If no left margin is required, set 'LeftMarginStr' to a
//       zero length or empty string, and no left margin will be
//       created.
//
//
//  dateTime                   time.Time
//     - The date/time value which will be formatted as a text
//       string.
//
//       If this parameter is set equal to zero, an error will be
//       returned.
//
//
//  dateTimeFieldLength        int
//     - Used to format Date/Time Text Fields. This is the length
//       of the text field in which the formatted 'dateTime' string
//       will be displayed. If 'dateTimeFieldLength' is less than
//       the length of the 'dateTime' string, it will be
//       automatically set equal to the 'dateTime' string length.
//
//       To automatically set the value of 'dateTimeFieldLength' to
//       the length of 'dateTime', set this parameter to a value of
//       minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  dateTimeFormat             string
//    - This string will be used to format the date/time value
//      'dateTime' as a text string.
//
//       If this 'dateTimeFormat' string is empty (has a zero
//       length), a default Date/Time format string will be applied
//       as follows:
//         "2006-01-02 15:04:05.000000000 -0700 MST"
//
//
//  dateTimeTextJustify        TextJustify
//      An enumeration value specifying the justification of the
//      'dateTime' string within the text field specified by
//      'dateTimeFieldLength'.
//
//      Text justification can only be evaluated in the context of
//      a text label, field length and a Text Justification object
//      of type TextJustify. This is because text labels with a
//      field length equal to or less than the length of the text
//      label never use text justification. In these cases, text
//      justification is completely ignored.
//
//      If the field length is greater than the length of the text
//      label, text justification must be equal to one of these
//      three valid values:
//          TextJustify(0).Left()
//          TextJustify(0).Right()
//          TextJustify(0).Center()
//
//      You can also use the abbreviated text justification
//      enumeration syntax as follows:
//
//          TxtJustify.Left()
//          TxtJustify.Right()
//          TxtJustify.Center()
//
//
//  rightMarginStr             string
//     - The contents of the string will be used as the right
//       margin for the 'dateTime' field.
//
//       If no right margin is required, set 'RightMarginStr' to a
//       zero length or empty string, and no right margin will be
//       created.
//
//
//  lineTerminator             string
//     - This string holds the character or characters which will
//       be used to terminate the formatted text thereby converting
//       this text element into a valid line of text.
//
//       If a text line is required, setting this string to include
//       a new line character ('\n') will ensure that the three
//       text elements formatted by this method as single text
//       field will constitute a single line of text.
//
//       The most common usage sets this string to a new line
//       character ("\n").
//
//       If Line Termination is NOT required, set 'lineTerminator'
//       to a zero length or empty string and no line termination
//       characters will be created.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) FieldsSingleDateTime(
	leftMarginStr string,
	dateTime time.Time,
	dateTimeFieldLength int,
	dateTimeFormat string,
	dateTimeTextJustify TextJustify,
	rightMarginStr string,
	lineTerminator string,
	strBuilder *strings.Builder,
	errorPrefix interface{}) (
	err error) {

	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"FieldsSingleDateTime()",
		"")

	if err != nil {
		return err
	}

	if strBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'strBuilder' is invalid!\n"+
			"'strBuilder' has a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	if dateTime.IsZero() {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'dateTime' is invalid!\n"+
			"'dateTime' has a has a zero Date/Time value.\n",
			ePrefix.String())

		return err

	}

	return textStrBuilderAtom{}.ptr().fieldDateTimeWithMargins(
		strBuilder,
		leftMarginStr,
		dateTime,
		dateTimeFieldLength,
		dateTimeFormat,
		dateTimeTextJustify,
		rightMarginStr,
		lineTerminator,
		ePrefix.XCpy(
			"strBuilder<-dateTime"))
}

// FieldsSingleFiller - Designed to produce three text elements
// consolidated and formatted as a single text field.
//
// The three text elements consist of a left margin string, a Text
// Filler Field and a right margin string.
//
// These three text elements can be configured as a complete line
// of text depending on the value applied to input parameter
// 'lineTerminator'.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  strBuilder                 *strings.Builder
//     - A pointer to an instance of strings.Builder. A formatted
//       string of text characters created by this method will be
//       written to this instance of strings.Builder.
//
//
//  leftMarginStr              string
//     - The contents of the string will be used as the left margin
//       for 'labelText field.
//
//       If no left margin is required, set 'LeftMarginStr' to a
//       zero length or empty string, and no left margin will be
//       created.
//
//
//  fillerCharacters           string
//     - A string containing the text characters which will be
//       included in the Text Filler Field. The final Text Filler
//       Field will be constructed from the filler characters
//       repeated one or more times as specified by the
//       'fillerCharsRepeatCount' parameter.
//
//        Text Field Filler Length =
//          Length of fillerCharacters X fillerCharsRepeatCount
//
//          Example #1: fillerCharacters = "-*"
//                      fillerRepeatCount = 3
//                      Final Text Filler Field = "-*-*-*"
//
//          Example #2: fillerCharacters = "-"
//                      fillerRepeatCount = 3
//                      Final Text Filler Field = "---"
//
//       If 'fillerCharacters' is submitted as an empty or zero
//       length string, this method will return an error.
//
//
//  fillerCharsRepeatCount     int
//     - Controls the number of times 'fillerCharacters' is
//       repeated when constructing the final Text Filler Field
//       returned by this method. The actual length of the string
//       which will populated the completed Text Filler Field is
//       equal to the length of 'fillerCharacters' times the value
//       of 'fillerCharsRepeatCount'.
//
//        Text Field Filler Length =
//          Length of fillerCharacters X fillerCharsRepeatCount
//
//          Example #1: fillerCharacters = "-*"
//                      fillerRepeatCount = 3
//                      Final Text Filler Field = "-*-*-*"
//
//          Example #2: fillerCharacters = "-"
//                      fillerRepeatCount = 3
//                      Final Text Filler Field = "---"
//
//       If 'fillerCharsRepeatCount' has a value less than one (1) or
//       greater than one-million (1,000,000), an error will be
//       returned.
//
//
//  rightMarginStr             string
//     - The contents of the string will be used as the right
//       margin for the Text Filler Field.
//
//       If no right margin is required, set 'RightMarginStr' to a
//       zero length or empty string, and no right margin will be
//       created.
//
//
//  lineTerminator             string
//     - This string holds the character or characters which will
//       be used to terminate the formatted text thereby converting
//       this text element into a valid line of text.
//
//       If a text line is required, setting this string to include
//       a new line character ('\n') will ensure that the text line
//       consists of the text label field and no other text
//       elements.
//
//       The most common usage sets this string to a new line
//       character ("\n").
//
//       If Line Termination is NOT required, set 'lineTerminator'
//       to a zero length or empty string and no line termination
//       characters will be created.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  error
//     - If this method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) FieldsSingleFiller(
	strBuilder *strings.Builder,
	leftMarginStr string,
	fillerCharacters string,
	fillerCharsRepeatCount int,
	rightMarginStr string,
	lineTerminator string,
	errorPrefix interface{}) (
	err error) {

	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"FieldsSingleFiller()",
		"")

	if err != nil {
		return err
	}

	if strBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'strBuilder' is invalid!\n"+
			"'strBuilder' has a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	if len(fillerCharacters) == 0 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'fillerCharacters' is invalid!\n"+
			"'fillerCharacters' is an empty string with a string\n"+
			"length of zero (0).\n",
			ePrefix.String())

		return err

	}

	return textStrBuilderAtom{}.ptr().fieldFillerWithMargins(
		strBuilder,
		leftMarginStr,
		fillerCharacters,
		fillerCharsRepeatCount,
		rightMarginStr,
		lineTerminator,
		ePrefix.XCpy(
			"strBuilder<-fillerCharacters"))
}

// FieldsSingleLabel - Is designed to produce three text elements
// consolidated and formatted as a single text field.
//
// The three text elements consist of a left margin string, a text
// label and a right margin string.
//
// These three text elements can be configured as a complete line
// of text depending on the value applied to input parameter
// 'lineTerminator'.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  strBuilder                 *strings.Builder
//     - A pointer to an instance of strings.Builder. A formatted
//       string of text characters created by this method will be
//       written to this instance of strings.Builder.
//
//
//  leftMarginStr              string
//     - The contents of the string will be used as the left margin
//       for 'labelText field.
//
//       If no left margin is required, set 'LeftMarginStr' to a
//       zero length or empty string, and no left margin will be
//       created.
//
//
//  labelText                  string
//     - This strings holds the text characters which will be
//       formatted as a text label.
//
//       This text label will be positioned to the immediate
//       right of the left margin string, 'leftMarginStr'.
//
//       If 'labelText' is submitted as a zero length or empty
//       string, an error will be returned.
//
//
//  labelFieldLength           int
//     - Used to format the Text Label Field, 'labelText'. This is
//       the length of the text field in which the formatted
//       'labelText' string will be displayed. If
//       'labelFieldLength' is less than the length of the
//       'labelText' string, it will be automatically set equal to
//       the 'labelText' string length.
//
//       To automatically set the value of 'labelFieldLength' to
//       the length of 'labelText', set this parameter to a value
//       of  minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  labelTextJustify           TextJustify
//      An enumeration value specifying the justification of the
//      'labelText' string within the text field specified by
//      'labelFieldLength'.
//
//      Text justification can only be evaluated in the context of
//      a text label, field length and a Text Justification object
//      of type TextJustify. This is because text labels with a
//      field length equal to or less than the length of the text
//      label never use text justification. In these cases, text
//      justification is completely ignored.
//
//      If the field length is greater than the length of the text
//      label, text justification must be equal to one of these
//      three valid values:
//          TextJustify(0).Left()
//          TextJustify(0).Right()
//          TextJustify(0).Center()
//
//      You can also use the abbreviated text justification
//      enumeration syntax as follows:
//
//          TxtJustify.Left()
//          TxtJustify.Right()
//          TxtJustify.Center()
//
//
//  rightMarginStr             string
//     - The contents of the string will be used as the right
//       margin for the 'labelText' field.
//
//       If no right margin is required, set 'RightMarginStr' to a
//       zero length or empty string, and no right margin will be
//       created.
//
//
//  lineTerminator             string
//     - This string holds the character or characters which will
//       be used to terminate the formatted text thereby converting
//       this text element into a valid line of text.
//
//       If a text line is required, setting this string to include
//       a new line character ('\n') will ensure that the three
//       text elements formatted by this method as single text
//       field will constitute a single line of text.
//
//       The most common usage sets this string to a new line
//       character ("\n").
//
//       If Line Termination is NOT required, set 'lineTerminator'
//       to a zero length or empty string and no line termination
//       characters will be created.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) FieldsSingleLabel(
	strBuilder *strings.Builder,
	leftMarginStr string,
	labelText string,
	labelFieldLength int,
	labelTextJustify TextJustify,
	rightMarginStr string,
	lineTerminator string,
	errorPrefix interface{}) (
	err error) {

	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"FieldsSingleLabel()",
		"")

	if err != nil {
		return err
	}

	if strBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'strBuilder' is invalid!\n"+
			"'strBuilder' has a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	if len(labelText) == 0 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'labelText' is invalid!\n"+
			"'labelText' is an empty string with a string length\n"+
			"of zero (0).\n",
			ePrefix.String())

		return err

	}

	return textStrBuilderAtom{}.ptr().fieldLabelWithMargins(
		strBuilder,
		leftMarginStr,
		labelText,
		labelFieldLength,
		labelTextJustify,
		rightMarginStr,
		lineTerminator,
		ePrefix.XCpy(
			"strBuilder<-labelText"))
}

// FieldsLabelParameterDateTime - Is designed to produce five text
// elements consolidated and formatted as a single text field.
//
// The five text elements consist of a left margin string, a
// parameter text label field, a parameter label right margin
// string, a parameter Date/Time value , and a parameter Date/Time
// value right margin string.
//
// These five text elements can be configured as a complete line of
// text depending on the value applied to input parameter
// 'lineTerminator'.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  strBuilder                      *strings.Builder
//     - A pointer to an instance of strings.Builder. A formatted
//       string of text characters created by this method will be
//       written to this instance of strings.Builder.
//
//
//  leftMarginStr                   string
//     - The contents of the string will be used as the left margin
//       for the 'paramLabelStr' field.
//
//       If no left margin is required, set 'LeftMarginStr' to a
//       zero length or empty string, and no left margin will be
//       created.
//
//
//  paramLabelStr                   string
//     - This strings holds the text characters which will be
//       formatted as a Parameter Text Label. The 'paramLabelStr'
//       field provides a narrative text description of the
//       Parameter Date/Time Value field, 'paramDateTimeValue'.
//
//       This text label, 'paramLabelStr', will be positioned to
//       the immediate right of the left margin string,
//       'leftMarginStr'.
//
//       If 'paramLabelStr' is submitted as a zero length or empty
//       string, it will be skipped or ignored and no error will be
//       generated.
//
//
//  paramLabelFieldLength           int
//     - Used to format the Text Label Field, 'paramLabelStr'. This
//       is the length of the text field in which the formatted
//       'paramLabelStr' string will be displayed. If
//       'paramLabelFieldLength' is less than the length of the
//       'paramLabelStr' string, it will be automatically set equal
//       to the 'paramLabelStr' string length.
//
//       To automatically set the value of 'paramLabelFieldLength'
//       to the length of 'paramLabelStr', set this parameter to a
//       value of  minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  paramLabelTextJustify           TextJustify
//      An enumeration value specifying the justification of the
//      'paramLabelStr' string within the text field specified by
//      'paramLabelFieldLength'.
//
//      Text justification can only be evaluated in the context of
//      a text label, field length and a Text Justification object
//      of type TextJustify. This is because text labels with a
//      field length equal to or less than the length of the text
//      label never use text justification. In these cases, text
//      justification is completely ignored.
//
//      If the field length is greater than the length of the text
//      label, text justification must be equal to one of these
//      three valid values:
//          TextJustify(0).Left()
//          TextJustify(0).Right()
//          TextJustify(0).Center()
//
//      You can also use the abbreviated text justification
//      enumeration syntax as follows:
//
//          TxtJustify.Left()
//          TxtJustify.Right()
//          TxtJustify.Center()
//
//
//  paramLabelRightMarginStr        string
//     - The contents of the string will be used as the right
//       margin for the 'paramLabelStr' field.
//
//       If no right margin is required, set
//       'paramLabelRightMarginStr' to a zero length or empty
//       string, and no right margin will be created.
//
//
//  paramDateTimeValue              time.Time
//     - This strings holds the text characters which will be
//       formatted as a Parameter Text Label. The 'paramDateTimeValue'
//       field contains actual Parameter Value information.
//
//       This text label will be positioned to the immediate
//       right of the Parameter Label Right Margin string,
//       'paramLabelRightMarginStr'.
//
//       If 'paramDateTimeValue' is submitted as a zero length or empty
//       string, an error will be returned.
//
//
//  paramDateTimeFieldLength        int
//     - Used to format the Text Label Field, 'paramDateTimeValue'. This
//       is the length of the text field in which the formatted
//       'paramDateTimeValue' string will be displayed. If
//       'paramDateTimeFieldLength' is less than the length of the
//       'paramDateTimeValue' string, it will be automatically set equal
//       to the 'paramDateTimeValue' string length.
//
//       To automatically set the value of 'paramDateTimeFieldLength'
//       to the length of 'paramDateTimeValue', set this parameter to a
//       value of minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  paramDateTimeTextJustify        TextJustify
//      An enumeration value specifying the justification of the
//      'paramDateTimeValue' string within the text field specified by
//      'paramDateTimeFieldLength'.
//
//      Text justification can only be evaluated in the context of
//      a text label, field length and a Text Justification object
//      of type TextJustify. This is because text labels with a
//      field length equal to or less than the length of the text
//      label never use text justification. In these cases, text
//      justification is completely ignored.
//
//      If the field length is greater than the length of the text
//      label, text justification must be equal to one of these
//      three valid values:
//          TextJustify(0).Left()
//          TextJustify(0).Right()
//          TextJustify(0).Center()
//
//      You can also use the abbreviated text justification
//      enumeration syntax as follows:
//
//          TxtJustify.Left()
//          TxtJustify.Right()
//          TxtJustify.Center()
//
//
//  paramDateTimeRightMarginStr     string
//     - The contents of the string will be used as the right
//       margin for the 'paramDateTimeValue' field.
//
//       If no right margin is required, set
//       'paramDateTimeRightMarginStr' to a zero length or empty
//       string, and no right margin will be created.
//
//
//  lineTerminator                  string
//     - This string holds the character or characters which will
//       be used to terminate the formatted text thereby converting
//       these five text element into a single line of text.
//
//       If a text line is required, setting this string to include
//       a new line character ('\n') will ensure that the five text
//       elements formatted by this method as single text field
//       will constitute a single line of text.
//
//       The most common usage sets this string to a new line
//       character ("\n").
//
//       If Line Termination is NOT required, set 'lineTerminator'
//       to a zero length or empty string and no line termination
//       characters will be created.
//
//
//  errorPrefix                     interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  err                             error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) FieldsLabelParameterDateTime(
	strBuilder *strings.Builder,
	leftMarginStr string,
	paramLabelStr string,
	paramLabelFieldLength int,
	paramLabelTextJustify TextJustify,
	paramLabelRightMarginStr string,
	paramDateTimeValue time.Time,
	paramDateTimeFieldLength int,
	paramDateTimeFormat string,
	paramDateTimeTextJustify TextJustify,
	paramDateTimeRightMarginStr string,
	lineTerminator string,
	errorPrefix interface{}) (
	err error) {

	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"FieldsLabelParameterDateTime()",
		"")

	if err != nil {
		return err
	}

	if strBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'strBuilder' is invalid!\n"+
			"'strBuilder' has a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	if paramDateTimeValue.IsZero() {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'paramDateTimeValue' is invalid!\n"+
			"'paramDateTimeValue' has a value of zero (0).\n",
			ePrefix.String())

		return err

	}

	txtBuilderAtom := textStrBuilderAtom{}

	err = txtBuilderAtom.fieldLabelWithMargins(
		strBuilder,
		leftMarginStr,
		paramLabelStr,
		paramLabelFieldLength,
		paramLabelTextJustify,
		paramLabelRightMarginStr,
		"",
		ePrefix.XCpy(
			"strBuilder<-paramLabelStr"))

	if err != nil {
		return err
	}

	err = txtBuilderAtom.fieldDateTimeWithMargins(
		strBuilder,
		"",
		paramDateTimeValue,
		paramDateTimeFieldLength,
		paramDateTimeFormat,
		paramDateTimeTextJustify,
		paramDateTimeRightMarginStr,
		lineTerminator,
		ePrefix.XCpy(
			"strBuilder<-paramDateTimeValue"))

	return err
}

// FieldsLabelParameterValue - Is designed to five text elements
// consolidated and formatted as a single text field.
//
// The five text elements consist of a left margin string, a
// parameter text label field, a parameter label right margin
// string, a parameter value label field, and a parameter value
// right margin string.
//
// These five text elements can be configured as a complete line of
// text depending on the value applied to input parameter
// 'lineTerminator'.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  strBuilder                 *strings.Builder
//     - A pointer to an instance of strings.Builder. A formatted
//       string of text characters created by this method will be
//       written to this instance of strings.Builder.
//
//
//  leftMarginStr              string
//     - The contents of the string will be used as the left margin
//       for the 'paramLabelStr' field.
//
//       If no left margin is required, set 'LeftMarginStr' to a
//       zero length or empty string, and no left margin will be
//       created.
//
//
//  paramLabelStr              string
//     - This strings holds the text characters which will be
//       formatted as a Parameter Text Label. The 'paramLabelStr'
//       field provides a text description of the Parameter Value
//       field, 'paramValueStr'.
//
//       This text label, 'paramLabelStr', will be positioned to
//       the immediate right of the left margin string,
//       'leftMarginStr'.
//
//       If 'paramLabelStr' is submitted as a zero length or empty
//       string, it will be skipped or ignored and no error will be
//       generated.
//
//
//  paramLabelFieldLength      int
//     - Used to format the Text Label Field, 'paramLabelStr'. This
//       is the length of the text field in which the formatted
//       'paramLabelStr' string will be displayed. If
//       'paramLabelFieldLength' is less than the length of the
//       'paramLabelStr' string, it will be automatically set equal
//       to the 'paramLabelStr' string length.
//
//       To automatically set the value of 'paramLabelFieldLength'
//       to the length of 'paramLabelStr', set this parameter to a
//       value of  minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  paramLabelTextJustify      TextJustify
//      An enumeration value specifying the justification of the
//      'paramLabelStr' string within the text field specified by
//      'paramLabelFieldLength'.
//
//      Text justification can only be evaluated in the context of
//      a text label, field length and a Text Justification object
//      of type TextJustify. This is because text labels with a
//      field length equal to or less than the length of the text
//      label never use text justification. In these cases, text
//      justification is completely ignored.
//
//      If the field length is greater than the length of the text
//      label, text justification must be equal to one of these
//      three valid values:
//          TextJustify(0).Left()
//          TextJustify(0).Right()
//          TextJustify(0).Center()
//
//      You can also use the abbreviated text justification
//      enumeration syntax as follows:
//
//          TxtJustify.Left()
//          TxtJustify.Right()
//          TxtJustify.Center()
//
//
//  paramLabelRightMarginStr   string
//     - The contents of the string will be used as the right
//       margin for the 'paramLabelStr' field.
//
//       If no right margin is required, set
//       'paramLabelRightMarginStr' to a zero length or empty
//       string, and no right margin will be created.
//
//
//  paramValueStr              string
//     - This strings holds the text characters which will be
//       formatted as a Parameter Text Label. The 'paramValueStr'
//       field contains actual Parameter Value information.
//
//       This text label will be positioned to the immediate
//       right of the Parameter Label Right Margin string,
//       'paramLabelRightMarginStr'.
//
//       If 'paramValueStr' is submitted as a zero length or empty
//       string, an error will be returned.
//
//
//  paramValueFieldLength      int
//     - Used to format the Text Label Field, 'paramValueStr'. This
//       is the length of the text field in which the formatted
//       'paramValueStr' string will be displayed. If
//       'paramValueFieldLength' is less than the length of the
//       'paramValueStr' string, it will be automatically set equal
//       to the 'paramValueStr' string length.
//
//       To automatically set the value of 'paramValueFieldLength'
//       to the length of 'paramValueStr', set this parameter to a
//       value of minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  paramValueTextJustify      TextJustify
//      An enumeration value specifying the justification of the
//      'paramValueStr' string within the text field specified by
//      'paramValueFieldLength'.
//
//      Text justification can only be evaluated in the context of
//      a text label, field length and a Text Justification object
//      of type TextJustify. This is because text labels with a
//      field length equal to or less than the length of the text
//      label never use text justification. In these cases, text
//      justification is completely ignored.
//
//      If the field length is greater than the length of the text
//      label, text justification must be equal to one of these
//      three valid values:
//          TextJustify(0).Left()
//          TextJustify(0).Right()
//          TextJustify(0).Center()
//
//      You can also use the abbreviated text justification
//      enumeration syntax as follows:
//
//          TxtJustify.Left()
//          TxtJustify.Right()
//          TxtJustify.Center()
//
//
//  paramValueRightMarginStr   string
//     - The contents of the string will be used as the right
//       margin for the 'paramValueStr' field.
//
//       If no right margin is required, set
//       'paramValueRightMarginStr' to a zero length or empty
//       string, and no right margin will be created.
//
//
//  lineTerminator             string
//     - This string holds the character or characters which will
//       be used to terminate the formatted text thereby converting
//       these five text element into a single line of text.
//
//       If a text line is required, setting this string to include
//       a new line character ('\n') will ensure that the five text
//       elements formatted by this method as single text field
//       will constitute a single line of text.
//
//       The most common usage sets this string to a new line
//       character ("\n").
//
//       If Line Termination is NOT required, set 'lineTerminator'
//       to a zero length or empty string and no line termination
//       characters will be created.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) FieldsLabelParameterValue(
	strBuilder *strings.Builder,
	leftMarginStr string,
	paramLabelStr string,
	paramLabelFieldLength int,
	paramLabelTextJustify TextJustify,
	paramLabelRightMarginStr string,
	paramValueStr string,
	paramValueFieldLength int,
	paramValueTextJustify TextJustify,
	paramValueRightMarginStr string,
	lineTerminator string,
	errorPrefix interface{}) (
	err error) {

	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"FieldsLabelParameterValue()",
		"")

	if err != nil {
		return err
	}

	if strBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'strBuilder' is invalid!\n"+
			"'strBuilder' has a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	if len(paramValueStr) == 0 {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'paramValueStr' is invalid!\n"+
			"'paramValueStr' is an empty string with a string\n"+
			"length of zero (0).\n",
			ePrefix.String())

		return err

	}

	txtBuilderAtom := textStrBuilderAtom{}

	err = txtBuilderAtom.fieldLabelWithMargins(
		strBuilder,
		leftMarginStr,
		paramLabelStr,
		paramLabelFieldLength,
		paramLabelTextJustify,
		paramLabelRightMarginStr,
		"",
		ePrefix.XCpy(
			"strBuilder<-paramLabelStr"))

	if err != nil {
		return err
	}

	err = txtBuilderAtom.fieldLabelWithMargins(
		strBuilder,
		"",
		paramValueStr,
		paramValueFieldLength,
		paramValueTextJustify,
		paramValueRightMarginStr,
		lineTerminator,
		ePrefix.XCpy(
			"strBuilder<-paramValueStr"))

	return err
}

// LineSolid - Designed to produce one or more separate lines of
// text.
//
// Each line consists of three text elements: a left margin
// string, a Text Filler Field, and a right margin strings.
//
// These three text elements can be configured as independent
// lines of text or concatenated together depending on the value
// applied to input parameters 'interiorLineTerminator' and
// 'finalLineTerminator'.
//
// This method is similar to method:
//   TextStrBuilder.FieldsSingleFiller()
//
// However, this method is capable of producing multiple lines
// of filler text.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  strBuilder                 *strings.Builder
//     - A pointer to an instance of strings.Builder. A formatted
//       string of text characters created by this method will be
//       written to this instance of strings.Builder.
//
//
//  leftMarginStr              string
//     - The contents of the string will be used as the left margin
//       for 'labelText field.
//
//       If no left margin is required, set 'LeftMarginStr' to a
//       zero length or empty string, and no left margin will be
//       created.
//
//
//  fillerCharacters           string
//     - A string containing the text characters which will be
//       included in the Text Filler Field. The final Text Filler
//       Field will be constructed from the filler characters
//       repeated one or more times as specified by the
//       'fillerCharsRepeatCount' parameter.
//
//        Text Field Filler Length =
//          Length of fillerCharacters X fillerCharsRepeatCount
//
//          Example #1: fillerCharacters = "-*"
//                      fillerRepeatCount = 3
//                      Final Text Filler Field = "-*-*-*"
//
//          Example #2: fillerCharacters = "-"
//                      fillerRepeatCount = 3
//                      Final Text Filler Field = "---"
//
//       If 'fillerCharacters' is submitted as an empty or zero
//       length string, this method will return an error.
//
//
//  fillerCharsRepeatCount     int
//     - Controls the number of times 'fillerCharacters' is
//       repeated when constructing the final Text Filler Field
//       returned by this method. The actual length of the string
//       which will populated the completed Text Filler Field is
//       equal to the length of 'fillerCharacters' times the value
//       of 'fillerCharsRepeatCount'.
//
//        Text Field Filler Length =
//          Length of fillerCharacters X fillerCharsRepeatCount
//
//          Example #1: fillerCharacters = "-*"
//                      fillerRepeatCount = 3
//                      Final Text Filler Field = "-*-*-*"
//
//          Example #2: fillerCharacters = "-"
//                      fillerRepeatCount = 3
//                      Final Text Filler Field = "---"
//
//       If 'fillerCharsRepeatCount' has a value less than one (1) or
//       greater than one-million (1,000,000), an error will be
//       returned.
//
//
//  rightMarginStr             string
//     - The contents of the string will be used as the right
//       margin for the Text Filler Field.
//
//       If no right margin is required, set 'RightMarginStr' to a
//       zero length or empty string, and no right margin will be
//       created.
//
//
//  interiorLineTerminator     string
//     - This string holds the character or characters which will
//       be used to terminate the formatted text thereby converting
//       this text element into a valid line of text.
//
//       Be sure to coordinate 'interiorLineTerminator' with input
//       parameter 'finalLineTerminator'. 'interiorLineTerminator'
//       is applied after each line of text is generated.
//       'finalLineTerminator' is applied after all lines of text
//       have been generated.
//
//       If a text line is required, setting this string to include
//       a new line character ('\n') will ensure that the text line
//       consists of the text label field and no other text
//       elements.
//
//       The most common usage sets this string to a new line
//       character ("\n").
//
//       If Line Termination is NOT required, set 'lineTerminator'
//       to a zero length or empty string and no line termination
//       characters will be created.
//
//
//  numOfLines                 int
//     - The number of times the combination of left margin string,
//       Text Filler Field, right margin string and interior line
//       terminator string will be repeated.
//
//       Essentially, this the repeat count for the Text Filler
//       Lines.
//
//       If this value is less than one (+1), an error will be
//       returned. Likewise, if this value is greater than
//       one-million (1,000,000), an error will be returned.
//
//
//  finalLineTerminator        string
//     - After all the text lines have been generated according to
//       input parameter 'numOfLines', this line termination
//       sequence will be applied to the final text output string.
//
//       Be sure to coordinate 'finalLineTerminator' with input
//       parameter 'interiorLineTerminator'.
//
//       'interiorLineTerminator' is applied after each line of
//       text is generated. 'finalLineTerminator' is applied after
//       all lines of text have been generated.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  error
//     - If this method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) LineSolid(
	strBuilder *strings.Builder,
	leftMarginStr string,
	fillerCharacters string,
	fillerCharsRepeatCount int,
	rightMarginStr string,
	interiorLineTerminator string,
	numOfLines int,
	finalLineTerminator string,
	errorPrefix interface{}) (
	err error) {

	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"LineSolid()",
		"")

	if err != nil {
		return err
	}

	if strBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'strBuilder' is invalid!\n"+
			"'strBuilder' has a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	if len(fillerCharacters) == 0 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'fillerCharacters' is invalid!\n"+
			"'fillerCharacters' is an empty string with a string\n"+
			"length of zero (0).\n",
			ePrefix.String())

		return err

	}

	return textStrBuilderNanobot{}.ptr().lineSolidWithMargins(
		strBuilder,
		leftMarginStr,
		fillerCharacters,
		fillerCharsRepeatCount,
		rightMarginStr,
		interiorLineTerminator,
		numOfLines,
		finalLineTerminator,
		ePrefix.XCpy(
			"strBuilder<-fillerCharacters"))

}

// LineBlank - Designed to produce one or more blank or empty lines
// of text. Each blank line will consist of a single new line
// character, '/n'.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  strBuilder                 *strings.Builder
//     - A pointer to an instance of strings.Builder. A formatted
//       string of text characters created by this method will be
//       written to this instance of strings.Builder.
//
//
//  numOfBlankLines            int
//     - The number of blank lines which will be generated by this
//       method.
//
//       If this value is less than one (+1), an error will be
//       returned. Likewise, if this value is greater than
//       one-million (1,000,000), an error will be returned.
//
//
//  errorPrefix                     interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  err                             error
//     - If this method completes successfully and no errors are
//       encountered, this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) LineBlank(
	strBuilder *strings.Builder,
	numOfBlankLines int,
	errorPrefix interface{}) (
	err error) {

	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"FieldsLabelParameterDateTime()",
		"")

	if err != nil {
		return err
	}

	if strBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'strBuilder' is invalid!\n"+
			"'strBuilder' has a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	if numOfBlankLines < 1 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'numOfBlankLines' is invalid!\n"+
			"'numOfBlankLines' has a value less than one (+1).\n"+
			"numOfBlankLines = '%v'\n",
			ePrefix.String(),
			numOfBlankLines)

		return err
	}

	if numOfBlankLines > 1000000 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'numOfBlankLines' is invalid!\n"+
			"'numOfBlankLines' has a value greater than one-million (1,000,000).\n"+
			"numOfBlankLines = '%v'\n",
			ePrefix.String(),
			numOfBlankLines)

		return err
	}

	for i := 0; i < numOfBlankLines; i++ {

		strBuilder.WriteString("\n")

	}

	return err
}

// LineTimerStartStop - Creates and returns a new instance of
// the Start/Stop Time Lines which is configured with all the
// parameters necessary to format and output a complete timer
// event.
//
// The purpose of the Start/Stop Time Lines text display is to
// capture all the essential elements of a timer event and
// format that information for text display, file output or
// printing.
//
// This method is designed to be used when both start time and
// ending time for the timer event are known quantities.
//
// Sample Output
//
//    Start Time: 2021-08-13 03:19:32.462108100 -0500 CDT
//      End Time: 2021-08-13 03:19:32.462163100 -0500 CDT
//  Elapsed Time: 55 Microseconds 0 Nanoseconds
//                Total Elapsed Nanoseconds: 55,000
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  leftMarginStr              string
//     - The character or characters which will comprise the left
//       margin of the text label.
//
//       If the string length of 'leftMarginStr' plus
//       'rightMarginStr' plus the text label field length
//       ('textLabelFieldLen') exceeds the maximum length of
//       55-characters, this method will return an error.
//
//       If leftMarginStr is submitted as an empty or zero length
//       string, no error will be triggered and the left margin
//       will simply be omitted.
//
//
//  startTimeLabel             string
//     - A string containing the text characters constituting the
//       starting time text label.
//
//       If this string is submitted as a zero length or empty
//       string, 'startTimeLabel' will be assigned a default value
//       of "Start Time".
//
//       If the string length of 'leftMarginStr' plus
//       'rightMarginStr' plus the text label field length
//       ('textLabelFieldLen') exceeds the maximum length of
//       55-characters, this method will return an error.
//
//
//  startTime                  time.Time
//     - A time value which will be used in conjunction with
//       'endTime' parameter to compute the time duration or
//       elapsed for the timer event.
//
//       If this parameter is submitted as a zero time value,
//       'startTime' will be defaulted to value of July 4, 1776
//       9:30AM UTC.
//
//
//  endTimeLabel               string
//     - A string containing the text characters constituting the
//       ending time text label.
//
//       If this string is submitted as a zero length or empty
//       string, 'endTimeLabel' will be assigned a default value of
//       "End Time".
//
//       If the string length of 'leftMarginStr' plus
//       'rightMarginStr' plus the text label field length
//       ('textLabelFieldLen') exceeds the maximum length of
//       55-characters, this method will return an error.
//
//
//  endTime                    time.Time
//     - A time value which will be used in conjunction with
//       'startTime' parameter to compute the time duration or
//       elapsed for the timer event.
//
//       If this parameter is submitted as a zero time value,
//       'endTime' will be defaulted to value of 'startTime'.
//
//
//  timeFormat                 string
//     - This string holds the time format parameters used to
//       format starting time and ending time values for text
//       display and output.
//
//       If this parameter is submitted as an empty string,
//       parameter 'timeFormat' will be assigned a default value
//       of "2006-01-02 15:04:05.000000000 -0700 MST"
//
//
//  timeDurationLabel          string
//     - The text label used to describe the time duration or
//       elapsed time computed from the 'startTime' and 'endTime'
//       parameters.
//
//       If this string is submitted as a zero length or empty
//       string, 'timeDurationLabel' will be assigned a default
//       value of "Elapsed Time".
//
//       If the string length of 'leftMarginStr' plus
//       'rightMarginStr' plus the text label field length
//       ('textLabelFieldLen') exceeds the maximum length of
//       55-characters, this method will return an error.
//
//
//  textLabelFieldLen          int
//     - A user entered value which defines the length of the text
//       field used by all three text labels, 'startTimeLabel',
//       'endTimeLabel' and 'timeDurationLabel'.
//
//       The length of the text fields which will be used to
//       position and display the three text labels provided by
//       input parameters 'startTimeLabel', 'endTimeLabel' and
//       'timeDurationLabel'.
//
//       If 'textLabelFieldLen' is less than the length of the
//       longest text label it will be defaulted to the length
//       of the longest text label ('startTimeLabel',
//       'endTimeLabel' or 'timeDurationLabel').
//
//       If the string length of 'leftMarginStr' plus
//       'rightMarginStr' plus the text label field length
//       ('textLabelFieldLen') exceeds the maximum length of
//       55-characters, this method will return an error.
//
//
//  textLabelJustification         TextJustify
//     - An enumeration which specifies the justification of the
//       three text labels 'startTimeLabel', 'endTimeLabel' and
//       'timeDurationLabel' within the field length specified by
//       'textLabelFieldLen'.
//
//       Label justification must be equal to one of these three
//       valid values:
//           TextJustify(0).Left()
//           TextJustify(0).Right()
//           TextJustify(0).Center()
//
//       The abbreviated text justification enumeration syntax can
//       also be used:
//
//           TxtJustify.Left()
//           TxtJustify.Right()
//           TxtJustify.Center()
//
//
//  rightMarginStr      string
//     - This string contains the character or characters which
//       will be used to separate the text labels ('startTimeLabel',
//       'endTimeLabel' and 'timeDurationLabel') from the output or
//       data values displayed on the same line.
//       Example:
//        Start Time[right margin chars]2010-01-02 15:04:05.000000000 -0700 MST
//
//       Often this parameter is set to a single white space
//       character (" ") or a colon plus white space character,
//       (": ").
//
//       If this string is submitted as a zero length or empty
//       string, 'rightMarginStr' will be assigned a
//       default value of  ": ". Example Output:
//        Start Time: 2010-01-02 15:04:05.000000000 -0700 MST
//
//       If the string length of 'leftMarginStr' plus
//       'rightMarginStr' plus the text label field length
//       ('textLabelFieldLen') exceeds the maximum length of
//       55-characters, this method will return an error.
//
//       If leftMarginStr is submitted as a zero length
//       string, no error will be triggered. In this case, the left
//       margin will simply be omitted.
//
//
//  errorPrefix                     interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//          containing error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of
//                          ErrPrefixDto. ErrorPrefixInfo from this
//                          object will be copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  *TextLineSpecTimerLines
//     - If this method completes successfully, it will create and
//       return a pointer to a new instance of
//       TextLineSpecTimerLines which is fully configured with all
//       the parameters necessary to format a complete timer event
//       for text display, file output or printing.
//
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtStrBuildr *TextStrBuilder) LineTimerStartStop(
	strBuilder *strings.Builder,
	leftMarginStr string,
	startTimeLabel string,
	startTime time.Time,
	endTimeLabel string,
	endTime time.Time,
	timeFormat string,
	timeDurationLabel string,
	textLabelFieldLen int,
	textLabelJustification TextJustify,
	rightMarginStr string,
	errorPrefix interface{}) (
	err error) {

	if txtStrBuildr.lock == nil {
		txtStrBuildr.lock = new(sync.Mutex)
	}

	txtStrBuildr.lock.Lock()

	defer txtStrBuildr.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextStrBuilder."+
			"LineTimerStartStop()",
		"")

	if err != nil {
		return err
	}

	var timerLinesSpec *TextLineSpecTimerLines

	timerLinesSpec,
		err = TextLineSpecTimerLines{}.NewFullTimerEvent(
		leftMarginStr,
		startTimeLabel,
		startTime,
		endTimeLabel,
		endTime,
		timeFormat,
		timeDurationLabel,
		textLabelFieldLen,
		textLabelJustification,
		rightMarginStr,
		ePrefix.XCpy(
			"timerLinesSpec"))

	if err != nil {
		return err
	}

	err = timerLinesSpec.TextBuilder(
		strBuilder,
		ePrefix.XCpy(
			"strBuilder<-timerLinesSpec"))

	return err
}
