package strmech

import (
	ePref "github.com/MikeAustin71/errpref"
	"strings"
	"sync"
	"time"
)

// TextFieldSpecDateTime - The Date/Time Text Field specification
// is used to produce a formatted text string from a date/time
// value. The golang date/time types are documented at:
//         https://pkg.go.dev/time
//
// Type TextFieldSpecDateTime is a Text Field Specification. Text
// Field Specifications are designed to be configured as one
// element within a single line of text. That line of text can then
// be used for text displays, file output or printing.
//
// Type TextLineSpecStandardLine can be used to compose a line of
// text consisting of multiple Text Field Specifications like
// TextFieldSpecDateTime. Text Field Specifications like
// TextFieldSpecDateTime are therefore used as the components or
// building blocks for constructing a single lines of text.
//
// Member Variables
//
// ----------------------------------------------------------------
//
//  dateTime                   time.Time
//     - A valid date/time value which is used to generate a
//       formatted date/time text string. This text string is the
//       content of the text field created by type
//       TextFieldSpecDateTime. Type time.Time is part of the
//       Golang time package:
//            https://pkg.go.dev/time.
//
//
//  fieldLen                   int
//     - The length of the text field in which the formatted
//       'dateTime' value will be displayed.
//
//       If 'fieldLen' is less than the length of the formatted
//       'dateTime' string, it will be automatically set equal to
//       the formatted 'dateTime' string length.
//
//       If 'fieldLen' is greater than the length of the formatted
//       'dateTime' string, 'dateTime' will be positioned within a
//       text field with a length equal to 'fieldLen'. In this
//       case, the position of the 'dateTime' string within the
//       text field will be controlled by the text justification
//       value contained in member variable, 'textJustification'.
//
//
//  dateTimeFormat             string
//     - This string holds the date/time format parameters used to
//       format the 'dateTime' value when generating a 'dateTime'
//       text string. The formatted 'dateTime' text string is
//       generated by type TextFieldSpecDateTime for use in text
//       displays, file output or printing.
//
//       The date/time format is documented in the Golang time.Time
//       package, https://pkg.go.dev/time. The format operations
//       are are documented at https://pkg.go.dev/time#Time.Format .
//
//       If the user configures this parameter as an empty string,
//       parameter, 'dateTimeFormat' will be assigned a default
//       value of "2006-01-02 15:04:05.000000000 -0700 MST"
//
//
//  textJustification          TextJustify
//     - An enumeration which specifies the justification of the
//       'dateTime' string within a text field with a field length
//       specified by member variable 'fieldLen'.
//
//       Text justification can only be evaluated in the context of
//       a 'dateTime' text string, field length and a
//       'textJustification' object of type TextJustify. This is
//       because a field length ('fieldLen') value equal to or less
//       than the length of the 'dateTime' text string will never
//       use text justification. In these cases, text justification
//       is completely ignored because the length of the text field
//       ('fieldLen') is automatically set equal to the length of
//       the 'dateTime' text string.
//
//       If the field length ('fieldLen') is greater than the
//       length of the 'dateTime' text string, text justification
//       must be equal to one of these three valid values:
//           TextJustify(0).Left()
//           TextJustify(0).Right()
//           TextJustify(0).Center()
//
//
// Example Usage
//
// ----------------------------------------------------------------
//
// Typically the user will supply a date time value ('dateTime'), a
// field length value ('fieldLen'), a date time format
// ('dateTimeFormat') and a text justification specification
// ('textJustification'). Type TextFieldSpecDateTime will convert
// the date time value ('dateTime') to a date time string using the
// format specifications provided in 'dateTimeFormat'. Next a text
// field will be created. If field length ('fieldLen') is less than
// the length of the computed date time string, the length of the
// text field will be set equal to the length of the date time
// string. If the field length ('fieldLen') is greater than the
// length of the computed date time string, the date time string
// will be positioned within the text field using the text
// justification specification (left, center, right). The justified
// text field will then be returned to the user.
//
//  dateTime = October 11, 2021 19:01:00-hours
//  fieldLen = 43
//  dateTimeFormat = "2006-01-02 15:04:05.000000000 -0700 MST"
//  textJustification = TxtJustify.Center()
//
//  Result = "  2021-10-11 19:01:00.000000000 -0500 CDT  "
//
type TextFieldSpecDateTime struct {
	dateTime time.Time // The content of the datetime text.
	fieldLen int       // The length of the text field in which
	//               //  the text label will be positioned.
	dateTimeFormat string // Holds the format parameters used to
	//                        //  format the datetime for text presentation.
	textJustification TextJustify // The specification which controls
	//                            //  how the datetime text will be positioned
	//                            //  within the text field: 'Left', 'Right'
	//                            //  or 'Center'.
	textLineReader *strings.Reader
	lock           *sync.Mutex
}

// CopyIn - Copies the data fields from an incoming instance of
// TextFieldSpecDateTime ('incomingDateTimeTxtField') to the data
// fields of the current TextFieldSpecDateTime instance
// ('txtDateTimeField').
//
// IMPORTANT
// All the data fields in current TextFieldSpecDateTime instance
// ('txtDateTimeField') will be modified and overwritten.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  incomingTxtFieldLabel     *TextFieldSpecDateTime
//     - A pointer to an instance of TextFieldSpecDateTime. This
//       method will NOT change the values of internal member
//       variables contained in this instance.
//
//       All data values in this TextFieldSpecDateTime instance
//       will be copied to current TextFieldSpecDateTime
//       instance ('txtFieldLabel').
//
//       If parameter 'incomingDateTimeTxtField' is determined to be
//       invalid, an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If this method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (txtDateTimeField *TextFieldSpecDateTime) CopyIn(
	incomingDateTimeTxtField *TextFieldSpecDateTime,
	errorPrefix interface{}) error {

	if txtDateTimeField.lock == nil {
		txtDateTimeField.lock = new(sync.Mutex)
	}

	txtDateTimeField.lock.Lock()

	defer txtDateTimeField.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldSpecDateTime.CopyIn()",
		"")

	if err != nil {
		return err
	}

	return textFieldSpecDateTimeNanobot{}.ptr().
		copyIn(
			txtDateTimeField,
			incomingDateTimeTxtField,
			ePrefix.XCtx("incomingDateTimeTxtField"))
}

// Empty - Resets all internal member variables to their initial
// or zero states.
//
func (txtDateTimeField *TextFieldSpecDateTime) Empty() {

	if txtDateTimeField.lock == nil {
		txtDateTimeField.lock = new(sync.Mutex)
	}

	txtDateTimeField.lock.Lock()

	textFieldSpecDateTimeAtom{}.ptr().empty(
		txtDateTimeField)

	txtDateTimeField.lock.Unlock()

	txtDateTimeField.lock = nil
}

// Equal - Receives a pointer to another instance of
// TextFieldSpecDateTime and proceeds to compare the member
// variables to those of the current TextFieldSpecDateTime instance
// in order to determine if they are equivalent.
//
// A boolean flag showing the result of this comparison is
// returned. If the member variables are equal in all respects,
// this flag is set to 'true'. Otherwise, this method returns
// 'false'.
//
func (txtDateTimeField *TextFieldSpecDateTime) Equal(
	incomingTxtFieldDateTime *TextFieldSpecDateTime) bool {

	if txtDateTimeField.lock == nil {
		txtDateTimeField.lock = new(sync.Mutex)
	}

	txtDateTimeField.lock.Lock()

	defer txtDateTimeField.lock.Unlock()

	return textFieldSpecDateTimeAtom{}.ptr().equal(
		txtDateTimeField,
		incomingTxtFieldDateTime)
}

// New - Returns a new concrete instance of TextFieldSpecDateTime.
// This returned instance is empty and unpopulated. All the member
// variables contained in this new instance are set to their
// uninitialized or zero values.
//
// The returned instance of TextFieldSpecDateTime serves as a Text
// Field Specification. Text Field Specifications are designed to
// be configured within a single line of text. That line of text
// can then be used for text displays, file output or printing.
//
// Type TextLineSpecStandardLine can be used to compose a line of
// text consisting of multiple Text Field Specifications like
// TextFieldSpecDateTime. Text Field Specifications like
// TextFieldSpecDateTime are therefore used as the components or
// building blocks for constructing a single lines of text.
//
// Be advised that setting member variables of the returned
// TextFieldSpecDateTime instance to their zero values means that
// the returned instance is invalid. Therefore, in order to use
// this TextFieldSpecDateTime instance, users must later call the
// setter methods on this type in order to configure valid and
// meaningful meaningful member variable data values.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  --- NONE ---
//
//
// -----------------------------------------------------------------
//
// Return Values
//
//  TextFieldSpecDateTime
//     - This parameter returns a new and empty concrete instance
//       of TextFieldSpecDateTime. Member variable data values are
//       set to their initial or zero values.
//
func (txtDateTimeField TextFieldSpecDateTime) New() TextFieldSpecDateTime {

	if txtDateTimeField.lock == nil {
		txtDateTimeField.lock = new(sync.Mutex)
	}

	txtDateTimeField.lock.Lock()

	defer txtDateTimeField.lock.Unlock()

	newTxtFieldDateTime := TextFieldSpecDateTime{}

	newTxtFieldDateTime.textJustification = TextJustify(0).None()

	newTxtFieldDateTime.textLineReader = nil

	newTxtFieldDateTime.lock = new(sync.Mutex)

	return newTxtFieldDateTime
}

// NewPtr - Returns a pointer to a new unpopulated instance of
// TextFieldSpecDateTime. All the member variables contained in
// this new instance are set to their uninitialized or zero values.
//
// Be advised that setting member variables to their zero values
// means that the returned TextFieldSpecDateTime instance is
// invalid. Therefore, in order to use this TextFieldSpecDateTime
// instance, users must later call the setter methods on this type
// in order to configure valid and meaningful member variable data
// values.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  --- NONE ---
//
//
// -----------------------------------------------------------------
//
// Return Values
//
//  *TextFieldSpecDateTime
//     - This parameter returns a pointer to a new, empty instance
//       of TextFieldSpecDateTime. Member variable data values are
//       set to their initial or zero values.
//
func (txtDateTimeField TextFieldSpecDateTime) NewPtr() *TextFieldSpecDateTime {

	if txtDateTimeField.lock == nil {
		txtDateTimeField.lock = new(sync.Mutex)
	}

	txtDateTimeField.lock.Lock()

	defer txtDateTimeField.lock.Unlock()

	newTxtFieldDateTime := TextFieldSpecDateTime{}

	newTxtFieldDateTime.textJustification = TextJustify(0).None()

	newTxtFieldDateTime.textLineReader = nil

	newTxtFieldDateTime.lock = new(sync.Mutex)

	return &newTxtFieldDateTime
}

// NewDateTimeField - Returns a new, populated, concrete instance
// of TextFieldSpecDateTime. This type encapsulates a date time
// value which is formatted as a text string.
//
// The new returned instance of TextFieldSpecDateTime is
// constructed from input parameters, 'dateTime', 'fieldLen',
// 'dateTimeFormat' and 'textJustification'.
//
// This method is identical to
// TextFieldSpecDateTime.NewPtrDateTimeField() with the sole
// exception being that this method returns a concrete instance of
// TextFieldSpecDateTime and
// TextFieldSpecDateTime.NewPtrDateTimeField() returns a pointer to
// a TextFieldSpecDateTime instance.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  dateTime                   time.Time
//     - A valid date time value which is used to generate a
//       formatted date/time text string. Type time.Time is part of
//       the Golang time package:
//              https://pkg.go.dev/time.
//
//       If this parameter is submitted as a zero value, an error
//       will be returned.
//
//
//  fieldLen                   int
//     - The length of the text field in which the formatted
//       'dateTime' value will be displayed.
//
//       If 'fieldLen' is less than the length of the formatted
//       'dateTime' string, it will be automatically set equal to
//       the formatted 'dateTime' string length.
//
//       If 'fieldLen' is greater than the length of the formatted
//       'dateTime' string, 'dateTime' will be positioned within a
//       text field with a length equal to 'fieldLen'. In this
//       case, the position of the 'dateTime' string within the
//       text field will be controlled by the text justification
//       value contained in parameter, 'textJustification'.
//
//       To automatically set the value of 'fieldLen' to the length
//       of the formatted 'dateTime', set this parameter to a value
//       of minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  dateTimeFormat             string
//     - This string holds the date/time format parameters used to
//       format the 'dateTime' value when generating a 'dateTime'
//       text string. The formatted 'dateTime' text string is
//       generated by type TextFieldSpecDateTime for use in text
//       displays, file output or printing.
//
//       The date/time format is documented in the Golang time.Time
//       package, https://pkg.go.dev/time. The format operations are
//       are documented at https://pkg.go.dev/time#Time.Format .
//
//       If this parameter is submitted as an empty string,
//       parameter 'dateTimeFormat' will be assigned a default
//       value of "2006-01-02 15:04:05.000000000 -0700 MST".
//
//
//  textJustification          TextJustify
//     - An enumeration which specifies the justification of the
//       'dateTime' string within a text field with a field length
//       specified by parameter 'fieldLen'.
//
//       Text justification can only be evaluated in the context of
//       a 'dateTime' text string, field length and a
//       'textJustification' object of type TextJustify. This is
//       because a field length ('fieldLen') value equal to or less
//       than the length of the 'dateTime' text string will never
//       use text justification. In these cases, text justification
//       is completely ignored because the length of the text field
//       ('fieldLen') is automatically set equal to the length of
//       the 'dateTime' text string.
//
//       If the field length is greater than the length of the text
//       label, text justification must be equal to one of these
//       three valid values:
//           TextJustify(0).Left()
//           TextJustify(0).Right()
//           TextJustify(0).Center()
//
//       You can also use the abbreviated text justification
//       enumeration syntax as follows:
//
//           TxtJustify.Left()
//           TxtJustify.Right()
//           TxtJustify.Center()
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  newTextDateTime            *TextFieldSpecDateTime
//     - This method will return a new, populated concrete instance
//       of TextFieldSpecDateTime constructed from the information
//       provided by the input parameters.
//
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
//
// Example Usage
//
// ----------------------------------------------------------------
//
// Typically the user will supply a date time value ('dateTime'), a
// field length value ('fieldLen'), a date time format
// ('dateTimeFormat') and a text justification specification
// ('textJustification').
//
// Type TextFieldSpecDateTime will convert the date time value
// ('dateTime') to a date time string using the format
// specifications provided in 'dateTimeFormat'. Next a text field
// will be created.
//
// If field length ('fieldLen') is less than the length of the
// computed date time string, the length of the text field will be
// set equal to the length of the date time string. If the field
// length ('fieldLen') is greater than the length of the computed
// date time string, the date time string will be positioned within
// the text field using the text justification specification (left,
// center, right). The justified text field will then be returned to
// the user by calling methods:
//     TextFieldSpecDateTime.GetFormattedText()
//                    or
//     TextFieldSpecDateTime.String()
//
//         Example
//  dateTime = October 11, 2021 19:01:00-hours
//  fieldLen = 43
//  dateTimeFormat = "2006-01-02 15:04:05.000000000 -0700 MST"
//  textJustification = TxtJustify.Center()
//
//  Result = "  2021-10-11 19:01:00.000000000 -0500 CDT  "
//
func (txtDateTimeField TextFieldSpecDateTime) NewDateTimeField(
	dateTime time.Time,
	fieldLen int,
	dateTimeFormat string,
	textJustification TextJustify,
	errorPrefix interface{}) (
	newTextDateTime TextFieldSpecDateTime,
	err error) {

	if txtDateTimeField.lock == nil {
		txtDateTimeField.lock = new(sync.Mutex)
	}

	txtDateTimeField.lock.Lock()

	defer txtDateTimeField.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldSpecDateTime.NewDateTimeField()",
		"")

	if err != nil {
		return newTextDateTime, err
	}

	err = textFieldSpecDateTimeMechanics{}.ptr().
		setTextFieldDateTime(
			&newTextDateTime,
			dateTime,
			fieldLen,
			dateTimeFormat,
			textJustification,
			ePrefix)

	return newTextDateTime, err
}

// NewPtrDateTimeField - Returns a pointer to a new, fully
// populated, instance of TextFieldSpecDateTime. This type
// encapsulates a date time value which is formatted as a text
// string.
//
// The new returned instance of TextFieldSpecDateTime is
// constructed from input parameters, 'dateTime', 'fieldLen',
// 'dateTimeFormat' and 'textJustification'.
//
// This method is identical to
// TextFieldSpecDateTime.NewDateTimeField() with the sole exception
// being that this method returns a pointer to an instance of
// TextFieldSpecDateTime and
// TextFieldSpecDateTime.NewDateTimeField() returns a concrete
// instance of TextFieldSpecDateTime.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  dateTime                   time.Time
//     - A valid date time value which is used to generate a
//       formatted date/time text string. Type time.Time is part of
//       the Golang time package:
//              https://pkg.go.dev/time.
//
//       If this parameter is submitted as a zero value, an error
//       will be returned.
//
//
//  fieldLen                   int
//     - The length of the text field in which the formatted
//       'dateTime' value will be displayed.
//
//       If 'fieldLen' is less than the length of the formatted
//       'dateTime' string, it will be automatically set equal to
//       the formatted 'dateTime' string length.
//
//       If 'fieldLen' is greater than the length of the formatted
//       'dateTime' string, 'dateTime' will be positioned within a
//       text field with a length equal to 'fieldLen'. In this
//       case, the position of the 'dateTime' string within the
//       text field will be controlled by the text justification
//       value contained in parameter, 'textJustification'.
//
//       To automatically set the value of 'fieldLen' to the length
//       of the formatted 'dateTime', set this parameter to a value
//       of minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  dateTimeFormat             string
//     - This string holds the date/time format parameters used to
//       format the 'dateTime' value when generating a 'dateTime'
//       text string. The formatted 'dateTime' text string is
//       generated by type TextFieldSpecDateTime for use in text
//       displays, file output or printing.
//
//       The date/time format is documented in the Golang time.Time
//       package, https://pkg.go.dev/time. The format operations are
//       are documented at https://pkg.go.dev/time#Time.Format .
//
//       If this parameter is submitted as an empty string,
//       parameter 'dateTimeFormat' will be assigned a default
//       value of "2006-01-02 15:04:05.000000000 -0700 MST".
//
//
//  textJustification          TextJustify
//     - An enumeration which specifies the justification of the
//       'dateTime' string within a text field with a field length
//       specified by parameter 'fieldLen'.
//
//       Text justification can only be evaluated in the context of
//       a 'dateTime' text string, field length and a
//       'textJustification' object of type TextJustify. This is
//       because a field length ('fieldLen') value equal to or less
//       than the length of the 'dateTime' text string will never
//       use text justification. In these cases, text justification
//       is completely ignored because the length of the text field
//       ('fieldLen') is automatically set equal to the length of
//       the 'dateTime' text string.
//
//       If the field length is greater than the length of the text
//       label, text justification must be equal to one of these
//       three valid values:
//           TextJustify(0).Left()
//           TextJustify(0).Right()
//           TextJustify(0).Center()
//
//       You can also use the abbreviated text justification
//       enumeration syntax as follows:
//
//           TxtJustify.Left()
//           TxtJustify.Right()
//           TxtJustify.Center()
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  newTextDateTime            TextFieldSpecDateTime
//     - This method will return a new, populated concrete instance
//       of TextFieldSpecDateTime constructed from the information
//       provided by the input parameters.
//
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
//
// Example Usage
//
// ----------------------------------------------------------------
//
// Typically the user will supply a date time value ('dateTime'), a
// field length value ('fieldLen'), a date time format
// ('dateTimeFormat') and a text justification specification
// ('textJustification').
//
// Type TextFieldSpecDateTime will convert the date time value
// ('dateTime') to a date time string using the format
// specifications provided in 'dateTimeFormat'. Next a text field
// will be created.
//
// If field length ('fieldLen') is less than the length of the
// computed date time string, the length of the text field will be
// set equal to the length of the date time string. If the field
// length ('fieldLen') is greater than the length of the computed
// date time string, the date time string will be positioned within
// the text field using the text justification specification (left,
// center, right). The justified text field will then be returned to
// the user by calling methods:
//     TextFieldSpecDateTime.GetFormattedText()
//                    or
//     TextFieldSpecDateTime.String()
//
//         Example
//  dateTime = October 11, 2021 19:01:00-hours
//  fieldLen = 43
//  dateTimeFormat = "2006-01-02 15:04:05.000000000 -0700 MST"
//  textJustification = TxtJustify.Center()
//
//  Result = "  2021-10-11 19:01:00.000000000 -0500 CDT  "
//
func (txtDateTimeField TextFieldSpecDateTime) NewPtrDateTimeField(
	dateTime time.Time,
	fieldLen int,
	dateTimeFormat string,
	textJustification TextJustify,
	errorPrefix interface{}) (
	newTextDateTime *TextFieldSpecDateTime,
	err error) {

	if txtDateTimeField.lock == nil {
		txtDateTimeField.lock = new(sync.Mutex)
	}

	txtDateTimeField.lock.Lock()

	defer txtDateTimeField.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	newTextDateTime = TextFieldSpecDateTime{}.NewPtr()

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldSpecDateTime.NewDateTimeField()",
		"")

	if err != nil {
		return newTextDateTime, err
	}

	err = textFieldSpecDateTimeMechanics{}.ptr().
		setTextFieldDateTime(
			newTextDateTime,
			dateTime,
			fieldLen,
			dateTimeFormat,
			textJustification,
			ePrefix)

	return newTextDateTime, err
}

// SetDateTimeField - Sets the date time text field component
// values for the current instance of TextFieldSpecDateTime.
//
// IMPORTANT
//
// This method will overwrite and delete the existing data values
// for the current TextFieldSpecDateTime instance
// (txtDateTimeField).
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  dateTime                   time.Time
//     - A valid date time value which is used to generate a
//       formatted date/time text string. Type time.Time is part of
//       the Golang time package:
//              https://pkg.go.dev/time.
//
//       If this parameter is submitted as a zero value, an error
//       will be returned.
//
//
//  fieldLen                   int
//     - The length of the text field in which the formatted
//       'dateTime' value will be displayed.
//
//       If 'fieldLen' is less than the length of the formatted
//       'dateTime' string, it will be automatically set equal to
//       the formatted 'dateTime' string length.
//
//       If 'fieldLen' is greater than the length of the formatted
//       'dateTime' string, 'dateTime' will be positioned within a
//       text field with a length equal to 'fieldLen'. In this
//       case, the position of the 'dateTime' string within the
//       text field will be controlled by the text justification
//       value contained in parameter, 'textJustification'.
//
//       To automatically set the value of 'fieldLen' to the length
//       of the formatted 'dateTime', set this parameter to a value
//       of minus one (-1).
//
//       If this parameter is submitted with a value less than
//       minus one (-1) or greater than 1-million (1,000,000), an
//       error will be returned.
//
//
//  dateTimeFormat             string
//     - This string holds the date/time format parameters used to
//       format the 'dateTime' value when generating a 'dateTime'
//       text string. The formatted 'dateTime' text string is
//       generated by type TextFieldSpecDateTime for use in text
//       displays, file output or printing.
//
//       The date/time format is documented in the Golang time.Time
//       package, https://pkg.go.dev/time. The format operations are
//       are documented at https://pkg.go.dev/time#Time.Format .
//
//       If this parameter is submitted as an empty string,
//       parameter 'dateTimeFormat' will be assigned a default
//       value of "2006-01-02 15:04:05.000000000 -0700 MST".
//
//
//  textJustification          TextJustify
//     - An enumeration which specifies the justification of the
//       'dateTime' string within a text field with a field length
//       specified by parameter 'fieldLen'.
//
//       Text justification can only be evaluated in the context of
//       a 'dateTime' text string, field length and a
//       'textJustification' object of type TextJustify. This is
//       because a field length ('fieldLen') value equal to or less
//       than the length of the 'dateTime' text string will never
//       use text justification. In these cases, text justification
//       is completely ignored because the length of the text field
//       ('fieldLen') is automatically set equal to the length of
//       the 'dateTime' text string.
//
//       If the field length is greater than the length of the text
//       label, text justification must be equal to one of these
//       three valid values:
//           TextJustify(0).Left()
//           TextJustify(0).Right()
//           TextJustify(0).Center()
//
//       You can also use the abbreviated text justification
//       enumeration syntax as follows:
//
//           TxtJustify.Left()
//           TxtJustify.Right()
//           TxtJustify.Center()
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If this method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
//
// Example Usage
//
// ----------------------------------------------------------------
//
// Typically the user will supply a date time value ('dateTime'), a
// field length value ('fieldLen'), a date time format
// ('dateTimeFormat') and a text justification specification
// ('textJustification').
//
// Type TextFieldSpecDateTime will convert the date time value
// ('dateTime') to a date time string using the format
// specifications provided in 'dateTimeFormat'. Next a text field
// will be created.
//
// If field length ('fieldLen') is less than the length of the
// computed date time string, the length of the text field will be
// set equal to the length of the date time string. If the field
// length ('fieldLen') is greater than the length of the computed
// date time string, the date time string will be positioned within
// the text field using the text justification specification (left,
// center, right). The justified text field will then be returned to
// the user by calling methods:
//     TextFieldSpecDateTime.GetFormattedText()
//                    or
//     TextFieldSpecDateTime.String()
//
//         Example
//  dateTime = October 11, 2021 19:01:00-hours
//  fieldLen = 43
//  dateTimeFormat = "2006-01-02 15:04:05.000000000 -0700 MST"
//  textJustification = TxtJustify.Center()
//
//  Result = "  2021-10-11 19:01:00.000000000 -0500 CDT  "
//
func (txtDateTimeField *TextFieldSpecDateTime) SetDateTimeField(
	dateTime time.Time,
	fieldLen int,
	dateTimeFormat string,
	textJustification TextJustify,
	errorPrefix interface{}) (
	err error) {

	if txtDateTimeField.lock == nil {
		txtDateTimeField.lock = new(sync.Mutex)
	}

	txtDateTimeField.lock.Lock()

	defer txtDateTimeField.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldSpecDateTime.SetDateTimeField()",
		"")

	if err != nil {
		return err
	}

	err = textFieldSpecDateTimeMechanics{}.ptr().
		setTextFieldDateTime(
			txtDateTimeField,
			dateTime,
			fieldLen,
			dateTimeFormat,
			textJustification,
			ePrefix)

	return err
}
