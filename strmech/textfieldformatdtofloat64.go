package strmech

import (
	"fmt"
	ePref "github.com/MikeAustin71/errpref"
	"strconv"
	"strings"
	"sync"
)

type TextFieldFormatDtoFloat64 struct {
	LeftMarginStr string
	//	One or more characters used to create a left
	//	margin for the 'Float64Num' Text Field.
	//
	//	If this parameter is set to an empty string, no
	//	left margin will be configured for this
	//	'Float64Num' Text Field.

	Float64Num float64
	// The float64 floating point number to
	// be formatted for output as a text string.

	LeadingMinusSign bool
	// When generating rounded pure number strings,
	// setting this parameter to 'true' will ensure
	// that negative numeric values will be prefixed
	// with a leading minus sign ('-').
	//
	//		Example: -123.456
	//
	// Bear in mind that packages and parsing functions
	// provided by the Go Programming Language, as well
	// as many other programming languages, often require
	// that negative numeric values be formatted with
	// leading minus signs.
	//
	// If this parameter is set to false, negative
	// numeric values will be suffixed with a trailing
	// minus sign ('-'). Trailing minus signs are used
	// in Europe and many other countries across the
	// globe.
	//
	//		Example 123.456-
	//
	// Again this only applies to rounded pure number
	// strings. Native number strings generated by the
	// Golang 'strconv' package will always format
	// negative numbers with a leading minus sign.
	//
	//		Example: -123.456

	RoundingType NumberRoundingType
	//	This enumeration parameter is used to specify the
	//	type of rounding algorithm that will be applied for
	//	the	rounding of fractional digits contained in the
	//	'Float64Num' value for presentation in number
	//	strings.
	//
	//	If in doubt as to a suitable rounding method,
	//	'HalfAwayFromZero' is recommended.
	//
	//	Possible values are listed as follows:
	//		NumRoundType.None() - Invalid Value
	//
	//		* Valid Values *
	//		NumRoundType.NoRounding()
	//		NumRoundType.HalfUpWithNegNums()
	//		NumRoundType.HalfDownWithNegNums()
	//		NumRoundType.HalfAwayFromZero()
	//		NumRoundType.HalfTowardsZero()
	//		NumRoundType.HalfToEven()
	//		NumRoundType.HalfToOdd()
	//		NumRoundType.Randomly()
	//		NumRoundType.Floor()
	//		NumRoundType.Ceiling()
	//		NumRoundType.Truncate()
	//
	//	Definitions:
	//
	//		NoRounding
	//
	//			Signals that no rounding operation will be
	//			performed on fractional digits. The
	//			fractional digits will therefore remain
	//			unchanged.
	//
	//		HalfUpWithNegNums
	//
	//			Half Round Up Including Negative Numbers.
	//			This method is intuitive but may produce
	//			unexpected results when applied to negative
	//			numbers.
	//
	//			'HalfUpWithNegNums' rounds .5 up.
	//
	//				Examples of 'HalfUpWithNegNums'
	//				7.6 rounds up to 8
	//				7.5 rounds up to 8
	//				7.4 rounds down to 7
	//				-7.4 rounds up to -7
	//				-7.5 rounds up to -7
	//				-7.6 rounds down to -8
	//
	//		HalfDownWithNegNums
	//
	//		Half Round Down Including Negative Numbers. This
	//		method is also considered intuitive but may
	//		produce unexpected results when applied to
	//		negative numbers.
	//
	//		'HalfDownWithNegNums' rounds .5 down.
	//
	//			Examples of HalfDownWithNegNums
	//
	//			7.6 rounds up to 8
	//			7.5 rounds down to 7
	//			7.4 rounds down to 7
	//			-7.4 rounds up to -7
	//			-7.5 rounds down to -8
	//			-7.6 rounds down to -8
	//
	//		HalfAwayFromZero
	//
	//			The 'HalfAwayFromZero' method rounds .5 further
	//			away from zero.	It provides clear and consistent
	//			behavior when dealing with negative numbers.
	//
	//				Examples of HalfAwayFromZero
	//
	//				7.6 rounds away to 8
	//				7.5 rounds away to 8
	//				7.4 rounds to 7
	//				-7.4 rounds to -7
	//				-7.5 rounds away to -8
	//				-7.6 rounds away to -8
	//
	//		HalfTowardsZero
	//
	//			Round Half Towards Zero. 'HalfTowardsZero' rounds
	//			0.5	closer to zero. It provides clear and
	//			consistent behavior	when dealing with negative
	//			numbers.
	//
	//				Examples of HalfTowardsZero
	//
	//				7.6 rounds away to 8
	//				7.5 rounds to 7
	//				7.4 rounds to 7
	//				-7.4 rounds to -7
	//				-7.5 rounds to -7
	//				-7.6 rounds away to -8
	//
	//		HalfToEven
	//
	//			Round Half To Even Numbers. 'HalfToEven' is
	//			also called	Banker's Rounding. This method
	//			rounds 0.5 to the nearest even digit.
	//
	//				Examples of HalfToEven
	//
	//				7.5 rounds up to 8 (because 8 is an even
	//				number)	but 6.5 rounds down to 6 (because
	//				6 is an even number)
	//
	//				HalfToEven only applies to 0.5. Other
	//				numbers (not ending	in 0.5) round to
	//				nearest as usual, so:
	//
	//				7.6 rounds up to 8
	//				7.5 rounds up to 8 (because 8 is an even number)
	//				7.4 rounds down to 7
	//				6.6 rounds up to 7
	//				6.5 rounds down to 6 (because 6 is an even number)
	//				6.4 rounds down to 6
	//
	//		HalfToOdd
	//
	//			Round Half to Odd Numbers. Similar to 'HalfToEven',
	//			but in this case 'HalfToOdd' rounds 0.5 towards odd
	//			numbers.
	//
	//				Examples of HalfToOdd
	//
	//				HalfToOdd only applies to 0.5. Other numbers
	//				(not ending	in 0.5) round to nearest as usual.
	//
	//				7.5 rounds down to 7 (because 7 is an odd number)
	//
	//				6.5 rounds up to 7 (because 7 is an odd number)
	//
	//				7.6 rounds up to 8
	//				7.5 rounds down to 7 (because 7 is an odd number)
	//				7.4 rounds down to 7
	//				6.6 rounds up to 7
	//				6.5 rounds up to 7 (because 7 is an odd number)
	//				6.4 rounds down to 6
	//
	//		Randomly
	//
	//			Round Half Randomly. Uses a Random Number Generator
	//			to choose between rounding 0.5 up or down.
	//
	//			All numbers other than 0.5 round to the nearest as
	//			usual.
	//
	//		Floor
	//
	//			Yields the nearest integer down. Floor does not apply
	//			any	special treatment to 0.5.
	//
	//			Floor Function: The greatest integer that is less than
	//			or equal to x
	//
	//			Source:
	//				https://www.mathsisfun.com/sets/function-floor-ceiling.html
	//
	//			In mathematics and computer science, the floor function
	//			is the function that takes as input a real number x,
	//			and gives as output the greatest integer less than or
	//			equal to x,	denoted floor(x) or ⌊x⌋.
	//
	//			Source:
	//				https://en.wikipedia.org/wiki/Floor_and_ceiling_functions
	//
	//			Examples of Floor
	//
	//				Number     Floor
	//				 2           2
	//				 2.4         2
	//				 2.9         2
	//				-2.5        -3
	//				-2.7        -3
	//				-2          -2
	//
	//		Ceiling
	//
	//			Yields the nearest integer up. Ceiling does not
	//			apply any special treatment to 0.5.
	//
	//			Ceiling Function: The least integer that is
	//			greater than or	equal to x.
	//			Source:
	//				https://www.mathsisfun.com/sets/function-floor-ceiling.html
	//
	//			The ceiling function maps x to the least integer
	//			greater than or equal to x, denoted ceil(x) or
	//			⌈x⌉.[1]
	//
	//			Source:
	//				https://en.wikipedia.org/wiki/Floor_and_ceiling_functions
	//
	//				Examples of Ceiling
	//
	//					Number    Ceiling
	//					 2           2
	//					 2.4         3
	//					 2.9         3
	//					-2.5        -2
	//					-2.7        -2
	//					-2          -2
	//
	//		Truncate
	//
	//			Apply NO Rounding whatsoever. The Round From Digit
	//			is dropped or deleted. The Round To Digit is NEVER
	//			changed.
	//
	//			Examples of Truncate
	//
	//				Example-1
	//				Number: 23.14567
	//				Objective: Round to two decimal places to
	//				the right of the decimal point.
	//				Rounding Method: Truncate
	//				Round To Digit:   4
	//				Round From Digit: 5
	//				Rounded Number:   23.14 - The Round From Digit
	//				is dropped.
	//
	//				Example-2
	//				Number: -23.14567
	//				Objective: Round to two decimal places to
	//				the right of the decimal point.
	//				Rounding Method: Truncate
	//				Round To Digit:   4
	//				Round From Digit: 5
	//				Rounded Number:  -23.14 - The Round From Digit
	//				is dropped.

	NumOfFractionalDigits int
	// The number of digits to the right of the radix
	// point (a.k.a. decimal point) which will be
	// displayed in the formatted text string for the
	// Float64 floating point number, 'Float64Num'.
	//
	// If this value is set to minus one (-1), all
	// available fractional digits to the right of the
	// decimal point will be displayed

	DefaultNumStrFmt NumStrFormatSpec
	// The default Number String Format Specification
	// applied by this instance of
	// TextFieldFormatDtoFloat64.
	//
	// The member variables contained in this structure
	// provide the detail specifications required to
	// support number string multinational and
	// multicultural formatting requirements.
	//
	// If this 'DefaultNumStrFmt' is invalid or
	// uninitialized, it will be set to the standard
	// US (United States) Signed Number String Format
	// Specification.
	//
	// Users can set the 'DefaultNumStrFmt' parameter
	// by calling method:
	//
	//	TextFieldFormatDtoFloat64.SetDefaultNumStrFmt()
	//
	// The NumStrFormatSpec data structure is defined
	// as follows:
	//
	//		type NumStrFormatSpec struct {
	//
	//			decSeparator			DecimalSeparatorSpec
	//
	//				Contains the radix point or decimal
	//				separator character(s) which will
	//				separate integer and fractional
	//				numeric digits in a floating point
	//				number.
	//
	//			intSeparatorSpec 		IntegerSeparatorSpec
	//
	//				Integer Separator Specification. This
	//				parameter specifies the type of integer
	//				specifies the type of integer grouping and
	//				integer separator characters which will be
	//				applied to the number string formatting
	//				operations.
	//
	//			positiveNumberSign		NumStrNumberSymbolSpec
	//
	//				Positive number signs are commonly implied
	//				and not specified. However, the user as the
	//				option to specify a positive number sign
	//				character or characters for positive numeric
	//				values using a Number String Positive Number
	//				Sign Specification.
	//
	//				This specification can also be used to
	//				configure currency symbols.
	//
	//			negativeNumberSign		NumStrNumberSymbolSpec
	//
	//				The Number String Negative Number Sign
	//				Specification is used to configure negative
	//				number sign symbols for negative numeric values
	//				formatted and displayed in number stings.
	//
	//				This specification can also be used to
	//				configured currency symbols.
	//
	//			numberFieldSpec			NumStrNumberFieldSpec
	//
	//				This Number String Number Field Specification
	//				contains the field length and text
	//				justification parameter necessary to display
	//				a numeric value within a text number field
	//				for display as a number string.
	//		}

	FieldLength int
	//	The length of the text field in which the
	//	'Float64Num' string will be displayed. If
	//	'FieldLength' is less than the length of the
	//	'Float64Num' string, it will be automatically
	//	set equal to the 'Float64Num' string length.
	//
	//	To automatically set the value of 'FieldLength'
	//	to the length of the 'Float64Num' string, set
	//	this parameter to a value of minus one (-1).
	//
	//	If this parameter is submitted with a value less
	//	than minus one (-1) or greater than 1-million
	//	(1,000,000), an error will be returned.
	//
	//	Field Length Examples
	//
	//		Example-1
	//          Float64Num String = "5672.1234567"
	//			Float64Num String Length = 12
	//			FieldLength = 18
	//			FieldJustify = TxtJustify.Center()
	//			Text Field String =
	//				"   5672.1234567   "
	//
	//		Example-2
	//          Float64Num String = "5672.1234567"
	//			Float64Num String Length = 12
	//			FieldLength = 18
	//			FieldJustify = TxtJustify.Right()
	//			Text Field String =
	//				"      5672.1234567"
	//
	//		Example-3
	//          Float64Num String = "5672.1234567"
	//			Float64Num String Length = 12
	//			FieldLength = -1
	//			FieldJustify = TxtJustify.Center()
	//				// Text Justification Ignored. Field
	//				// Length Equals Title Line String Length
	//			Text Field String =
	//				"5672.1234567"
	//
	//		Example-4
	//          Float64Num String = "5672.1234567"
	//			Float64Num String Length = 12
	//			FieldLength = 2
	//			FieldJustify = TxtJustify.Center()
	//				// Justification Ignored because Field
	//				// Length Less Than Title Line String Length.
	//			Text Field String =
	//				"5672.1234567"

	FieldJustify TextJustify
	//	An enumeration which specifies the justification
	//	of the 'FieldDateTime' string within the text
	//	field length specified by 'FieldLength'.
	//
	//	Text justification can only be evaluated in the
	//	context of a text label ('FieldDateTime'), field
	//	length ('FieldLength') and a Text Justification
	//	object of type TextJustify. This is because text
	//	labels with a field length equal to or less than
	//	the length of the text label string will never
	//	use text justification. In these cases, text
	//	justification is completely ignored.
	//
	//	If the field length is greater than the length of
	//	the text label string, text justification must be
	//	equal to one of these three valid values:
	//
	//	    TextJustify(0).Left()
	//	    TextJustify(0).Right()
	//	    TextJustify(0).Center()
	//
	//	Users can also specify the abbreviated text
	//	justification enumeration syntax as follows:
	//
	//	    TxtJustify.Left()
	//	    TxtJustify.Right()
	//	    TxtJustify.Center()
	//
	//	Text Justification Examples
	//
	//		Example-1
	//          Float64Num String = "5672.1234567"
	//			Float64Num String Length = 12
	//			FieldLength = 18
	//			FieldJustify = TxtJustify.Center()
	//			Text Field String =
	//				"   5672.1234567   "
	//
	//		Example-2
	//          Float64Num String = "5672.1234567"
	//			Float64Num String Length = 12
	//			FieldLength = 18
	//			FieldJustify = TxtJustify.Right()
	//			Text Field String =
	//				"      5672.1234567"
	//
	//		Example-3
	//          Float64Num String = "5672.1234567"
	//			Float64Num String Length = 12
	//			FieldLength = -1
	//			FieldJustify = TxtJustify.Center()
	//				// Text Justification Ignored. Field
	//				// Length Equals Title Line String Length
	//			Text Field String =
	//				"5672.1234567"
	//
	//		Example-4
	//          Float64Num String = "5672.1234567"
	//			Float64Num String Length = 12
	//			FieldLength = 2
	//			FieldJustify = TxtJustify.Center()
	//				// Justification Ignored because Field
	//				// Length Less Than Title Line String Length.
	//			Text Field String =
	//				"5672.1234567"

	RightMarginStr string
	//	One or more characters used to create a right
	//	margin for this 'FieldDateTime' Text Field.
	//
	//	If this parameter is set to an empty string, no
	//	right margin will be configured for this
	//	'FieldDateTime' Text Field.

	lock *sync.Mutex
}

// CopyIn
//
// Copies all the data fields from an incoming instance
// of TextFieldFormatDtoFloat64
// ('incomingTxtFloat64FmtDto') to the corresponding data
// fields of the current TextFieldFormatDtoFloat64
// instance ('txtFieldFmtDtoFloat64').
//
// ----------------------------------------------------------------
//
// # IMPORTANT
//
//	This method will delete and overwrite all
//	pre-existing data values contained within the
//	current instance of TextFieldFormatDtoFloat64
//	('txtFieldFmtDtoFloat64').
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	incomingTxtFloat64FmtDto		*TextFieldFormatDtoFloat64
//
//		A pointer to an instance of
//		TextFieldFormatDtoFloat64.
//
//		All the internal data field values in this
//		instance will be copied to corresponding data
//		fields of the current TextFieldFormatDtoFloat64
//		instance.
//
//		The data fields contained in
//		'incomingTxtFloat64FmtDto' will NOT be changed or
//		modified.
//
//		If 'incomingTxtFloat64FmtDto' contains invalid
//		data values, an error will be returned.
//
//	errorPrefix						interface{}
//
//		This object encapsulates error prefix text which
//		is included in all returned error messages.
//		Usually, it contains the name of the calling
//		method or methods listed as a method or function
//		chain of execution.
//
//		If no error prefix information is needed, set this
//		parameter to 'nil'.
//
//		This empty interface must be convertible to one of
//		the following types:
//
//		1.	nil
//				A nil value is valid and generates an
//				empty collection of error prefix and
//				error context information.
//
//		2.	string
//				A string containing error prefix
//				information.
//
//		3.	[]string
//				A one-dimensional slice of strings
//				containing error prefix information.
//
//		4.	[][2]string
//				A two-dimensional slice of strings
//		   		containing error prefix and error
//		   		context information.
//
//		5.	ErrPrefixDto
//				An instance of ErrPrefixDto.
//				Information from this object will
//				be copied for use in error and
//				informational messages.
//
//		6.	*ErrPrefixDto
//				A pointer to an instance of
//				ErrPrefixDto. Information from
//				this object will be copied for use
//				in error and informational messages.
//
//		7.	IBasicErrorPrefix
//				An interface to a method
//				generating a two-dimensional slice
//				of strings containing error prefix
//				and error context information.
//
//		If parameter 'errorPrefix' is NOT convertible
//		to one of the valid types listed above, it will
//		be considered invalid and trigger the return of
//		an error.
//
//		Types ErrPrefixDto and IBasicErrorPrefix are
//		included in the 'errpref' software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'.
//
//		If errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message. This returned error message will
//		incorporate the method chain and text passed by
//		input parameter, 'errorPrefix'. The 'errorPrefix'
//		text will be attached to the beginning of the
//		error message.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) CopyIn(
	incomingTxtFloat64FmtDto *TextFieldFormatDtoFloat64,
	errorPrefix interface{}) error {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldFormatDtoFloat64."+
			"CopyIn()",
		"")

	if err != nil {
		return err
	}

	return new(textFieldFormatDtoFloat64Nanobot).copy(
		txtFieldFmtDtoFloat64,
		incomingTxtFloat64FmtDto,
		ePrefix.XCpy(
			"txtFieldFmtDtoFloat64<-incomingTxtFloat64FmtDto"))
}

// CopyOut
//
// Returns a deep copy of the current
// TextFieldFormatDtoFloat64 instance.
//
// If the current TextFieldFormatDtoFloat64 instance
// contains invalid member variable data values, this
// method will return an error.
//
// ----------------------------------------------------------------
//
// # BE ADVISED
//
//	The original member variable data values encapsulated
//	within the current TextFieldFormatDtoFloat64
//	instance will NOT BE changed or modified.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	errorPrefix					interface{}
//
//		This object encapsulates error prefix text which
//		is included in all returned error messages.
//		Usually, it contains the name of the calling
//		method or methods listed as a method or function
//		chain of execution.
//
//		If no error prefix information is needed, set this
//		parameter to 'nil'.
//
//		This empty interface must be convertible to one of
//		the following types:
//
//		1.	nil
//				A nil value is valid and generates an
//				empty collection of error prefix and
//				error context information.
//
//		2.	string
//				A string containing error prefix
//				information.
//
//		3.	[]string
//				A one-dimensional slice of strings
//				containing error prefix information.
//
//		4.	[][2]string
//				A two-dimensional slice of strings
//		   		containing error prefix and error
//		   		context information.
//
//		5.	ErrPrefixDto
//				An instance of ErrPrefixDto.
//				Information from this object will
//				be copied for use in error and
//				informational messages.
//
//		6.	*ErrPrefixDto
//				A pointer to an instance of
//				ErrPrefixDto. Information from
//				this object will be copied for use
//				in error and informational messages.
//
//		7.	IBasicErrorPrefix
//				An interface to a method
//				generating a two-dimensional slice
//				of strings containing error prefix
//				and error context information.
//
//		If parameter 'errorPrefix' is NOT convertible
//		to one of the valid types listed above, it will
//		be considered invalid and trigger the return of
//		an error.
//
//		Types ErrPrefixDto and IBasicErrorPrefix are
//		included in the 'errpref' software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	TextFieldFormatDtoFloat64
//
//		If this method completes successfully and no
//		errors are encountered, this parameter will
//		return a deep copy of the current
//		TextFieldFormatDtoFloat64 instance.
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'.
//
//		If errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message. This returned error message will
//		incorporate the method chain and text passed by
//		input parameter, 'errorPrefix'. The 'errorPrefix'
//		text will be attached to the beginning of the
//		error message.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) CopyOut(
	errorPrefix interface{}) (
	TextFieldFormatDtoFloat64,
	error) {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	newTxtFloat64FmtDto :=
		TextFieldFormatDtoFloat64{}

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldFormatDtoFloat64."+
			"CopyOut()",
		"")

	if err != nil {
		return newTxtFloat64FmtDto, err
	}

	err = new(textFieldFormatDtoFloat64Nanobot).copy(
		&newTxtFloat64FmtDto,
		txtFieldFmtDtoFloat64,
		ePrefix.XCpy(
			"newTxtFloat64FmtDto<-txtFieldFmtDtoFloat64"))

	return newTxtFloat64FmtDto, err
}

// CopyOutITextFieldFormat
//
// Returns a deep copy of the current
// TextFieldFormatDtoFloat64 instance cast as an
// ITextFieldFormatDto interface object.
//
// If the current TextFieldFormatDtoFloat64 instance
// contains invalid member variable data values, this
// method will return an error.
//
// This method is required in order to implement the
// ITextFieldFormatDto interface.
//
// ----------------------------------------------------------------
//
// # BE ADVISED
//
//	The original member variable data values encapsulated
//	within the current TextFieldFormatDtoFloat64
//	instance will NOT BE changed or modified.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	errorPrefix					interface{}
//
//		This object encapsulates error prefix text which
//		is included in all returned error messages.
//		Usually, it contains the name of the calling
//		method or methods listed as a method or function
//		chain of execution.
//
//		If no error prefix information is needed, set this
//		parameter to 'nil'.
//
//		This empty interface must be convertible to one of
//		the following types:
//
//		1.	nil
//				A nil value is valid and generates an
//				empty collection of error prefix and
//				error context information.
//
//		2.	string
//				A string containing error prefix
//				information.
//
//		3.	[]string
//				A one-dimensional slice of strings
//				containing error prefix information.
//
//		4.	[][2]string
//				A two-dimensional slice of strings
//		   		containing error prefix and error
//		   		context information.
//
//		5.	ErrPrefixDto
//				An instance of ErrPrefixDto.
//				Information from this object will
//				be copied for use in error and
//				informational messages.
//
//		6.	*ErrPrefixDto
//				A pointer to an instance of
//				ErrPrefixDto. Information from
//				this object will be copied for use
//				in error and informational messages.
//
//		7.	IBasicErrorPrefix
//				An interface to a method
//				generating a two-dimensional slice
//				of strings containing error prefix
//				and error context information.
//
//		If parameter 'errorPrefix' is NOT convertible
//		to one of the valid types listed above, it will
//		be considered invalid and trigger the return of
//		an error.
//
//		Types ErrPrefixDto and IBasicErrorPrefix are
//		included in the 'errpref' software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	ITextFieldFormatDto
//
//		If this method completes successfully and no
//		errors are encountered, this parameter will
//		return a deep copy of the current
//		TextFieldFormatDtoFloat64 instance cast as an
//		ITextFieldFormatDto interface object.
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'.
//
//		If errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message. This returned error message will
//		incorporate the method chain and text passed by
//		input parameter, 'errorPrefix'. The 'errorPrefix'
//		text will be attached to the beginning of the
//		error message.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) CopyOutITextFieldFormat(
	errorPrefix interface{}) (
	ITextFieldFormatDto,
	error) {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	var newTxtFloat64FmtDto TextFieldFormatDtoFloat64

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldFormatDtoFloat64."+
			"CopyIn()",
		"")

	if err != nil {
		return ITextFieldFormatDto(&newTxtFloat64FmtDto),
			err
	}

	err = new(textFieldFormatDtoFloat64Nanobot).copy(
		&newTxtFloat64FmtDto,
		txtFieldFmtDtoFloat64,
		ePrefix.XCpy(
			"newTxtFloat64FmtDto<-txtFieldFmtDtoFloat64"))

	return ITextFieldFormatDto(&newTxtFloat64FmtDto),
		err
}

// Empty
//
// Resets all internal member variables for the current
// instance of TextFieldFormatDtoFloat64 to their zero
// or uninitialized states. This method will leave the
// current instance of TextFieldFormatDtoFloat64 in an
// invalid state and unavailable for immediate reuse.
//
// This method is required in order to implement the
// ITextFieldFormatDto interface.
//
// ----------------------------------------------------------------
//
// # IMPORTANT
//
// This method will delete all member variable data
// values in the current instance of
// TextFieldFormatDtoFloat64. All member variable data
// values will be reset to their zero or uninitialized
// states.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	NONE
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	NONE
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) Empty() {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	new(textFieldFormatDtoFloat64Atom).empty(
		txtFieldFmtDtoFloat64)

	txtFieldFmtDtoFloat64.lock.Unlock()

	txtFieldFmtDtoFloat64.lock = nil
}

// Equal
//
// Receives a pointer to another instance of
// TextFieldFormatDtoFloat64 and proceeds to compare the
// member variables to those contained in the current
// TextFieldFormatDtoFloat64 instance in order to
// determine if they are equivalent.
//
// A boolean flag showing the result of this comparison
// is returned. If the member variables of both instances
// are equal in all respects, this flag is set to 'true'.
// Otherwise, this method returns 'false'.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	incomingTxtFloat64FmtDto 	*TextFieldFormatDtoFloat64
//
//		A pointer to an incoming instance of
//		TextFieldFormatDtoFloat64. This method will
//		compare all member variable data values in this
//		instance against those contained in the current
//		instance of TextFieldFormatDtoFloat64. If the
//		data values in both instances are found to be
//		equal in all respects, this method will return a
//		boolean value of 'true'.
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	bool
//
//		If the member variable data values contained in
//		input parameter 'incomingTxtFloat64FmtDto' are
//		equal in all respects to those contained in the
//		current instance of TextFieldFormatDtoFloat64,
//		this method will return a boolean value of
//		'true'. Otherwise, a value of 'false' will be
//		returned to the calling function.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) Equal(
	incomingTxtFloat64FmtDto *TextFieldFormatDtoFloat64) bool {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	return new(textFieldFormatDtoFloat64Atom).equal(
		txtFieldFmtDtoFloat64,
		incomingTxtFloat64FmtDto)
}

// FmtNativeNumberStr
//
// Returns a native number string containing the numeric
// value specified by the current instance of
// TextFieldFormatDtoFloat64.
//
// A native number string is generated using the native
// "number to string" conversion provided by the Golang
// 'strconv' package. All rounding is controlled
// internally by the 'strconv' package and is therefore
// NOT SUBJECT to user control.
//
// The number of fractional digits presented in the
// native number string is specified by the member
// variable, 'NumOfFractionalDigits' contained in the
// current instance of TextFieldFormatDtoFloat64.
//
// If the TextFieldFormatDtoFloat64 member variable
// 'NumOfFractionalDigits' is set to minus one (-1), the
// maximum number of available fractional digits will be
// formatted and returned in the number string.
//
// If additional customization is required in formatting
// a pure number string, see method:
//
//	TextFieldFormatDtoFloat64.FmtPureNumberStr()
//
// The floating point native number string returned
// by this method will:
//
//  1. Consist entirely of numeric digit characters.
//
//  2. Separate integer and fractional digits with a
//     decimal point ('.').
//
//  3. Designate negative values with a leading minus
//     sign ('-'). Trailing Minus Signs are NOT
//     supported.
//
//     Leading Minus Sign:		-1000000
//
//  4. NOT include integer separators such as commas
//     (',') to separate integer digits by thousands.
//
//     NOT THIS: 1,000,000
//     Native Number String: 1000000
//
// ----------------------------------------------------------------
//
// # BE ADVISED
//
//	Native number strings Do NOT include integer
//	separators (i.e. commas ',') to separate integer
//	number strings into thousands.
//
//						NOT THIS: 1,000,000
//			Native Number String: 1000000
//
//	All negative numeric values processed by this method
//	will return native number strings containing leading
//	minus signs ('-'). Trailing minus signs are NOT
//	supported.
//
//		Leading Minus Sign:		-1000000
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	errorPrefix					interface{}
//
//		This object encapsulates error prefix text which
//		is included in all returned error messages.
//		Usually, it contains the name of the calling
//		method or methods listed as a method or function
//		chain of execution.
//
//		If no error prefix information is needed, set this
//		parameter to 'nil'.
//
//		This empty interface must be convertible to one of
//		the following types:
//
//		1.	nil
//				A nil value is valid and generates an
//				empty collection of error prefix and
//				error context information.
//
//		2.	string
//				A string containing error prefix
//				information.
//
//		3.	[]string
//				A one-dimensional slice of strings
//				containing error prefix information.
//
//		4.	[][2]string
//				A two-dimensional slice of strings
//		   		containing error prefix and error
//		   		context information.
//
//		5.	ErrPrefixDto
//				An instance of ErrPrefixDto.
//				Information from this object will
//				be copied for use in error and
//				informational messages.
//
//		6.	*ErrPrefixDto
//				A pointer to an instance of
//				ErrPrefixDto. Information from
//				this object will be copied for use
//				in error and informational messages.
//
//		7.	IBasicErrorPrefix
//				An interface to a method
//				generating a two-dimensional slice
//				of strings containing error prefix
//				and error context information.
//
//		If parameter 'errorPrefix' is NOT convertible
//		to one of the valid types listed above, it will
//		be considered invalid and trigger the return of
//		an error.
//
//		Types ErrPrefixDto and IBasicErrorPrefix are
//		included in the 'errpref' software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	string
//
//		If this method completes successfully, this
//		string parameter will return a floating point
//		native number string representation of the
//		float64 value specified by the current instance
//		of TextFieldFormatDtoFloat64.
//
//		The returned floating point native number string
//		will:
//
//		1.	Consist entirely of numeric digit characters.
//
//		2.	Separate integer and fractional digits with a
//			decimal point ('.').
//
//		3.	Designate negative values with a leading minus
//			sign ('-').
//
//		4.	NOT include integer separators such as commas
//			(',') to separate integer digits by thousands.
//
//						  NOT THIS: 1,000,000
//				Pure Number String: 1000000
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'.
//
//		If errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message. This returned error message will
//		incorporate the method chain and text passed by
//		input parameter, 'errorPrefix'. The 'errorPrefix'
//		text will be attached to the beginning of the
//		error message.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) FmtNativeNumberStr(
	errorPrefix interface{}) (
	string,
	error) {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldFormatDtoFloat64."+
			"FmtNativeNumberStr()",
		"")

	if err != nil {
		return "", err
	}

	return new(textFieldFormatDtoFloat64Electron).
		getFloat64NativeNumStr(
			txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"txtFieldFmtDtoFloat64"))
}

//	FmtNumStr
//
//	Returns a formatted number string using the
//	numeric value provided by the current instance
//	of TextFieldFormatDtoFloat64.
//
//	Input parameter 'numStrFmtSpec' provides options
//	for customizing number string currency symbols,
//	integer separation, number sign management and radix
//	point symbols.
//
//	If required, users also have the option of
//	implementing the India or Chinese Numbering Systems
//	for integer separation.
//
//	The numeric value used to generate the returned
//	NumberStrKernel will be taken from the
//	TextFieldFormatDtoFloat64 member variable,
//	'Float64Num'. This floating point numeric value will
//	be rounded according to the specifications contained
//	in member variables:
//
//		TextFieldFormatDtoFloat64.RoundingType
//						AND
//		TextFieldFormatDtoFloat64.NumOfFractionalDigits
//
//	If either of these rounding specifications are
//	invalid, an error will be returned.
//
//	The Number String Formatting Specifications supplied
//	by input parameter 'numStrFmtSpec' includes field
//	length and field justification specifications. These
//	values will override those configured in the current
//	instance of TextFieldFormatDtoFloat64. This means that
//	the following member variables will be ignored:
//
//		TextFieldFormatDtoFloat64.FieldLength
//						AND
//		TextFieldFormatDtoFloat64.FieldJustify
//
//	Be sure to configure input parameter 'numStrFmtSpec'
//	accordingly.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	numStrFmtSpec				NumStrFormatSpec
//
//		This structure contains all the parameters
//		necessary for number string formatting. The
//		customization options contained in
//		'numStrFmtSpec' provide maximum granularity in
//		controlling the formatting of the returned Number
//		String.
//
//		The NumStrFormatSpec data structure is defined as
//		follows:
//
//		type NumStrFormatSpec struct {
//
//			decSeparator			DecimalSeparatorSpec
//
//				Contains the radix point or decimal
//				separator character(s) which will
//				separate integer and fractional
//				numeric digits in a floating point
//				number.
//
//			intSeparatorSpec 		IntegerSeparatorSpec
//
//				Integer Separator Specification. This
//				parameter specifies the type of integer
//				specifies the type of integer grouping and
//				integer separator characters which will be
//				applied to the number string formatting
//				operations.
//
//			positiveNumberSign		NumStrNumberSymbolSpec
//
//				Positive number signs are commonly implied
//				and not specified. However, the user as the
//				option to specify a positive number sign
//				character or characters for positive numeric
//				values using a Number String Positive Number
//				Sign Specification.
//
//				This specification can also be used to
//				configure currency symbols.
//
//			negativeNumberSign		NumStrNumberSymbolSpec
//
//				The Number String Negative Number Sign
//				Specification is used to configure negative
//				number sign symbols for negative numeric values
//				formatted and displayed in number stings.
//
//				This specification can also be used to
//				configured currency symbols.
//
//			numberFieldSpec			NumStrNumberFieldSpec
//
//				This Number String Number Field Specification
//				contains the field length and text
//				justification parameter necessary to display
//				a numeric value within a text number field
//				for display as a number string.
//		}
//
//	 errorPrefix                interface{}
//
//		This object encapsulates error prefix text which
//		is included in all returned error messages.
//		Usually, it	contains the name of the calling
//		method or methods listed as a method or function
//		chain of execution.
//
//		If no error prefix information is needed, set this
//		parameter to 'nil'.
//
//		This empty interface must be convertible to one of
//		the following types:
//
//		1.	nil
//				A nil value is valid and generates an
//				empty collection of error prefix and
//				error context information.
//
//		2.	string
//				A string containing error prefix
//				information.
//
//		3.	[]string
//				A one-dimensional slice of strings
//				containing error prefix information.
//
//		4.	[][2]string
//				A two-dimensional slice of strings
//		   		containing error prefix and error
//		   		context information.
//
//		5.	ErrPrefixDto
//				An instance of ErrPrefixDto.
//				Information from this object will
//				be copied for use in error and
//				informational messages.
//
//		6.	*ErrPrefixDto
//				A pointer to an instance of
//				ErrPrefixDto. Information from
//				this object will be copied for use
//				in error and informational messages.
//
//		7.	IBasicErrorPrefix
//				An interface to a method
//				generating a two-dimensional slice
//				of strings containing error prefix
//				and error context information.
//
//		If parameter 'errorPrefix' is NOT convertible
//		to one of the valid types listed above, it will
//		be considered invalid and trigger the return of
//		an error.
//
//		Types ErrPrefixDto and IBasicErrorPrefix are
//		included in the 'errpref' software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	string
//
//		If this method completes successfully, a formatted
//		Number String will be returned.
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'.
//
//		If errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message. This returned error message will
//		incorporate the method chain and text passed by
//		input parameter, 'errorPrefix'. The 'errorPrefix'
//		text will be attached to the beginning of the
//		error message.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) FmtNumStr(
	numStrFmtSpec NumStrFormatSpec,
	errorPrefix interface{}) (
	string,
	error) {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	var numStr string

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldFormatDtoFloat64."+
			"FmtNumStr()",
		"")

	if err != nil {
		return numStr, err
	}

	numStr,
		err = new(textFieldFormatDtoFloat64Molecule).
		fmtNumStrWithFormatSpec(
			txtFieldFmtDtoFloat64,
			numStrFmtSpec,
			ePrefix.XCpy(
				"txtFieldFmtDtoFloat64<-numStrFmtSpec"))

	return numStr, err
}

//	FmtPureNumberStr
//
//	Extracts the specifications necessary to format and
//	return a rounded floating point pure number string
//	generated from a conversion performed by type
//	'NumberStrKernel'.
//
//	A rounded pure number string differs from a
//	'native' number string in that rounded pure number
//	string uses the following TextFieldFormatDtoFloat64
//	member variables to generate a number string using
//	the conversion algorithms provided by type
//	'NumberStrKernel':
//
//		TextFieldFormatDtoFloat64.LeadingMinusSign
//		TextFieldFormatDtoFloat64.RoundingType
//		TextFieldFormatDtoFloat64.NumOfFractionalDigits
//
//	Users will note that the rounded pure number strings
//	offers more flexibility than native strings when
//	attempting to conform to multinational and
//	multicultural pure number string formatting
//	conventions.
//
//	The rounded floating point pure number string returned
//	by this method will:
//
//	1.	Consist entirely of numeric digit characters.
//
//	2.	Separate integer and fractional digits with a
//	  	decimal point ('.').
//
//	3.	Designate negative values with a leading or
//	  	trailing minus sign ('-'). Minus sign
//	  	placement is controlled by member variable
//	  	TextFieldFormatDtoFloat64.LeadingMinusSign.
//
//	  	Leading Minus Sign:		-1000000
//	  			OR
//	  	Trailing Minus Sign:	1000000-
//
//	4.	NOT include integer separators such as commas
//	  	(',') to separate integer digits by thousands.
//
//	  	NOT THIS: 1,000,000
//	  	Pure Number String: 1000000
//
// ----------------------------------------------------------------
//
// # BE ADVISED
//
//  1. Pure number strings Do NOT include integer separators
//     (i.e. commas ',') to separate integer number strings
//     into thousands.
//
//     NOT THIS: 1,000,000
//     Pure Number String: 1000000
//
//  2. All negative numeric values processed by this method
//     will return number strings containing either a
//     leading minus sign ('-') or a trailing minus sign,
//     depending on the value of member variable:
//
//     TextFieldFormatDtoFloat64.LeadingMinusSign
//
//     Leading Minus Sign:		-1000000
//     OR
//     Trailing Minus Sign:	1000000-
//
//  3. Field Length and Field Justification are NOT used
//     when formatting rounded pure number strings.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	errPrefDto					*ePref.ErrPrefixDto
//
//		This object encapsulates an error prefix string
//		which is included in all returned error
//		messages. Usually, it contains the name of the
//		calling method or methods listed as a function
//		chain.
//
//		If no error prefix information is needed, set
//		this parameter to 'nil'.
//
//		Type ErrPrefixDto is included in the 'errpref'
//		software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	string
//
//		If this method completes successfully, this
//		string parameter will return a floating point
//		pure number string representation of the
//		float64 value contained in the current instance
//		of TextFieldFormatDtoFloat64.
//
//		The returned floating point pure number string
//		will:
//
//		1.	Consist entirely of numeric digit characters.
//
//		2.	Separate integer and fractional digits with a
//			decimal point ('.').
//
//		3.	Designate negative values with a leading or
//			trailing minus sign ('-'). Minus sign
//			placement is controlled by member variable
//			TextFieldFormatDtoFloat64.LeadingMinusSign.
//
//				Leading Minus Sign:		-1000000
//						OR
//				Trailing Minus Sign:	1000000-
//
//		4.	NOT include integer separators such as commas
//			(',') to separate integer digits by thousands.
//
//						  NOT THIS: 1,000,000
//				Pure Number String: 1000000
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'. If
//		errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message.
//
//		If an error message is returned, the text value
//		for input parameter 'errPrefDto' (error prefix)
//		will be prefixed or attached at the beginning of
//		the error message.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) FmtPureNumberStr(
	errorPrefix interface{}) (
	string,
	error) {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldFormatDtoFloat64."+
			"FmtPureNumberStr()",
		"")

	if err != nil {
		return "", err
	}

	return new(textFieldFormatDtoFloat64Electron).
		getFloat64RoundedPureNumStr(
			txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"<-txtFieldFmtDtoFloat64"))
}

// GetFieldContentTextLabel
//
// Converts the current TextFieldFormatDtoFloat64
// instance member variable, 'Float64Num', to an
// instance of TextFieldSpecLabel.
//
// The returned TextFieldSpecLabel will only contain
// the member variable 'Float64Num'. It will NOT
// contain the left and right margins. The returned
// TextFieldSpecLabel will format the 'Float64Num'
// numeric value as a rounded pure number string
// generated from a conversion performed by type
// 'NumberStrKernel'.
//
// This method is required in order to implement the
// ITextFieldFormatDto interface.
//
// ----------------------------------------------------------------
//
// # BE ADVISED
//
// The returned TextFieldSpecLabel will only contain
// the member variable 'Float64Num'. It will NOT
// contain the left and right margins.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	errorPrefix					interface{}
//
//		This object encapsulates error prefix text which
//		is included in all returned error messages.
//		Usually, it	contains the name of the calling
//		method or methods listed as a method or function
//		chain of execution.
//
//		If no error prefix information is needed, set this
//		parameter to 'nil'.
//
//		This empty interface must be convertible to one of
//		the following types:
//
//		1.	nil
//				A nil value is valid and generates an
//				empty collection of error prefix and
//				error context information.
//
//		2.	string
//				A string containing error prefix
//				information.
//
//		3.	[]string
//				A one-dimensional slice of strings
//				containing error prefix information.
//
//		4.	[][2]string
//				A two-dimensional slice of strings
//		   		containing error prefix and error
//		   		context information.
//
//		5.	ErrPrefixDto
//				An instance of ErrPrefixDto.
//				Information from this object will
//				be copied for use in error and
//				informational messages.
//
//		6.	*ErrPrefixDto
//				A pointer to an instance of
//				ErrPrefixDto. Information from
//				this object will be copied for use
//				in error and informational messages.
//
//		7.	IBasicErrorPrefix
//				An interface to a method
//				generating a two-dimensional slice
//				of strings containing error prefix
//				and error context information.
//
//		If parameter 'errorPrefix' is NOT convertible
//		to one of the valid types listed above, it will
//		be considered invalid and trigger the return of
//		an error.
//
//		Types ErrPrefixDto and IBasicErrorPrefix are
//		included in the 'errpref' software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	TextFieldSpecLabel
//
//		If this method completes successfully, the Text
//		Field Contents extracted from the current
//		instance of TextFieldFormatDtoFloat64, will be
//		returned as text label of type
//		TextFieldSpecLabel.
//
//		This returned text label will ONLY contain the
//		Text Field Contents numeric value ('Float64Num').
//		It will NOT contain the left and right margin
//		strings.
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'. If
//		errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message.
//
//		If an error message is returned, the text value
//		for input parameter 'errPrefDto' (error prefix)
//		will be prefixed or attached at the beginning of
//		the error message.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) GetFieldContentTextLabel(
	errorPrefix interface{}) (
	TextFieldSpecLabel,
	error) {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldFormatDtoFloat64."+
			"GetFieldContentTextLabel()",
		"")

	if err != nil {
		return TextFieldSpecLabel{}, err
	}

	return new(textFieldFormatDtoFloat64Molecule).
		getFieldContentTextLabel(
			txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"<-txtFieldFmtDtoFloat64"))
}

// GetFieldFormatDtoType
//
// Returns a string containing the name of this type
// ('TextFieldFormatDtoFloat64').
//
// This method is required in order to implement the
// ITextFieldFormatDto interface.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) GetFieldFormatDtoType() string {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	return "TextFieldFormatDtoFloat64"
}

// GetFormattedTextFieldStr
//
// Converts an instance of TextFieldFormatDtoFloat64 to a
// formatted text field string.
//
// This formatted text field string contains the left
// margin, field contents and right margin.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	errPrefDto					*ePref.ErrPrefixDto
//
//		This object encapsulates an error prefix string
//		which is included in all returned error
//		messages. Usually, it contains the name of the
//		calling method or methods listed as a function
//		chain.
//
//		If no error prefix information is needed, set
//		this parameter to 'nil'.
//
//		Type ErrPrefixDto is included in the 'errpref'
//		software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	string
//
//		If this method completes successfully, the text
//		field specifications contained in the current
//		instance of TextFieldFormatDtoFloat64 will be
//		converted to, and returned as, a formatted text
//		field string.
//
//		The returned text field string will contain the
//		left margin, text field contents and right margin
//		as those elements are defined in the current
//		instance of TextFieldFormatDtoFloat64.
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'. If
//		errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message.
//
//		If an error message is returned, the text value
//		for input parameter 'errPrefDto' (error prefix)
//		will be prefixed or attached at the beginning of
//		the error message.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) GetFormattedTextFieldStr(
	errorPrefix interface{}) (
	string,
	error) {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldFormatDtoFloat64."+
			"GetFormattedTextFieldStr()",
		"")

	if err != nil {
		return "", err
	}

	return new(textFieldFormatDtoFloat64Nanobot).
		getFormattedTextFieldStr(
			txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"<-txtFieldFmtDtoFloat64"))
}

// GetLeftMarginLength
//
// Returns the length of the Left Margin String as an
// integer value.
//
// This method is required in order to implement the
// ITextFieldFormatDto interface.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) GetLeftMarginLength() int {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	return len(txtFieldFmtDtoFloat64.LeftMarginStr)
}

// GetLeftMarginStr
//
// Returns the Left Margin String.
//
// This method is required in order to implement the
// ITextFieldFormatDto interface.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) GetLeftMarginStr() string {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	return txtFieldFmtDtoFloat64.LeftMarginStr
}

//	GetNumberStats
//
//	Returns an instance of NumberStrStatsDto profiling
//	the pure rounded number string generated by the
//	float64 value encapsulated by the current instance
//	of TextFieldFormatDtoFloat64.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	errorPrefix					interface{}
//
//		This object encapsulates error prefix text which
//		is included in all returned error messages.
//		Usually, it contains the name of the calling
//		method or methods listed as a method or function
//		chain of execution.
//
//		If no error prefix information is needed, set this
//		parameter to 'nil'.
//
//		This empty interface must be convertible to one of
//		the following types:
//
//		1.	nil
//				A nil value is valid and generates an
//				empty collection of error prefix and
//				error context information.
//
//		2.	string
//				A string containing error prefix
//				information.
//
//		3.	[]string
//				A one-dimensional slice of strings
//				containing error prefix information.
//
//		4.	[][2]string
//				A two-dimensional slice of strings
//		   		containing error prefix and error
//		   		context information.
//
//		5.	ErrPrefixDto
//				An instance of ErrPrefixDto.
//				Information from this object will
//				be copied for use in error and
//				informational messages.
//
//		6.	*ErrPrefixDto
//				A pointer to an instance of
//				ErrPrefixDto. Information from
//				this object will be copied for use
//				in error and informational messages.
//
//		7.	IBasicErrorPrefix
//				An interface to a method
//				generating a two-dimensional slice
//				of strings containing error prefix
//				and error context information.
//
//		If parameter 'errorPrefix' is NOT convertible
//		to one of the valid types listed above, it will
//		be considered invalid and trigger the return of
//		an error.
//
//		Types ErrPrefixDto and IBasicErrorPrefix are
//		included in the 'errpref' software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	NumberStrStatsDto
//
//		This data transfer object will return critical
//		statistics and profiling on the numeric value
//		represented	by the float64 value encapsulated
//		by the current instance of
//		TextFieldFormatDtoFloat64.
//
//		Remember that these statistics and profiling data
//		describe the rounded pure number string generated
//		from the float64 numeric value encapsulated by
//		the current instance of
//		TextFieldFormatDtoFloat64.
//
//		The NumberStrStatsDto data structure is defined
//		as follows:
//
//		type NumberStrStatsDto struct {
//
//		NumOfIntegerDigits					uint64
//
//			The total number of integer digits to the
//			left of the radix point or, decimal point, in
//			the subject numeric value.
//
//		NumOfSignificantIntegerDigits		uint64
//
//			The number of nonzero integer digits to the
//			left of the radix point or, decimal point, in
//			the subject numeric value.
//
//		NumOfFractionalDigits				uint64
//
//			The total number of fractional digits to the
//			right of the radix point or, decimal point,
//			in the subject numeric value.
//
//		NumOfSignificantFractionalDigits	uint64
//
//			The number of nonzero fractional digits to
//			the right of the radix point or, decimal
//			point, in the subject numeric value.
//
//		NumberValueType 					NumericValueType
//
//			This enumeration value specifies whether the
//			subject numeric value is classified either as
//			an integer or a floating point number.
//
//			Possible enumeration values are listed as
//			follows:
//				NumValType.None()
//				NumValType.FloatingPoint()
//				NumValType.Integer()
//
//		NumberSign							NumericSignValueType
//
//			An enumeration specifying the number sign
//			associated with the numeric value. Possible
//			values are listed as follows:
//				NumSignVal.None()		= Invalid Value
//				NumSignVal.Negative()	= -1
//				NumSignVal.Zero()		=  0
//				NumSignVal.Positive()	=  1
//
//		IsZeroValue							bool
//
//			If 'true', the subject numeric value is equal
//			to zero ('0').
//
//			If 'false', the subject numeric value is
//			greater than or less than zero ('0').
//		}
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'.
//
//		If errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message. This returned error message will
//		incorporate the method chain and text passed by
//		input parameter, 'errorPrefix'. The 'errorPrefix'
//		text will be attached to the beginning of the
//		error message.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) GetNumberStats(
	errorPrefix interface{}) (
	NumberStrStatsDto,
	error) {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	var numStatsDto NumberStrStatsDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldFormatDtoFloat64."+
			"GetNumberStats()",
		"")

	if err != nil {
		return numStatsDto, err
	}

	var err2 error
	_,
		err2 = new(textFieldFormatDtoFloat64Atom).
		testValidityOfTxtFieldFmtDtoFloat64(
			txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"txtFieldFmtDtoFloat64"))

	if err2 != nil {

		err = fmt.Errorf("%v\n"+
			"ERROR: The current instance of TextFieldFormatDtoFloat64\n"+
			"is improperly configured and Invalid!\n"+
			"Error=\n%v\n",
			ePrefix.String(),
			err2.Error())

		return numStatsDto, err
	}

	var numStrKernel NumberStrKernel

	numStrKernel,
		err = new(textFieldFormatDtoFloat64Electron).
		getNumberStrKernel(
			txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"txtFieldFmtDtoFloat64"))

	if err != nil {
		return numStatsDto, err
	}

	numStatsDto,
		err = numStrKernel.GetNumericValueStats(
		ePrefix.XCpy(
			"numStrKernel<-" +
				"txtFieldFmtDtoFloat64"))

	return numStatsDto, err
}

//	GetNumberStrKernel
//
//	Returns an instance of NumberStrKernel configured
//	with the float64 numeric value contained in the
//	current instance of TextFieldFormatDtoFloat64.
//
//	Type NumberStrKernel contains all the specifications
//	necessary to construct an integer or floating point
//	number string.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	errorPrefix					interface{}
//
//		This object encapsulates error prefix text which
//		is included in all returned error messages.
//		Usually, it contains the name of the calling
//		method or methods listed as a method or function
//		chain of execution.
//
//		If no error prefix information is needed, set this
//		parameter to 'nil'.
//
//		This empty interface must be convertible to one of
//		the following types:
//
//		1.	nil
//				A nil value is valid and generates an
//				empty collection of error prefix and
//				error context information.
//
//		2.	string
//				A string containing error prefix
//				information.
//
//		3.	[]string
//				A one-dimensional slice of strings
//				containing error prefix information.
//
//		4.	[][2]string
//				A two-dimensional slice of strings
//		   		containing error prefix and error
//		   		context information.
//
//		5.	ErrPrefixDto
//				An instance of ErrPrefixDto.
//				Information from this object will
//				be copied for use in error and
//				informational messages.
//
//		6.	*ErrPrefixDto
//				A pointer to an instance of
//				ErrPrefixDto. Information from
//				this object will be copied for use
//				in error and informational messages.
//
//		7.	IBasicErrorPrefix
//				An interface to a method
//				generating a two-dimensional slice
//				of strings containing error prefix
//				and error context information.
//
//		If parameter 'errorPrefix' is NOT convertible
//		to one of the valid types listed above, it will
//		be considered invalid and trigger the return of
//		an error.
//
//		Types ErrPrefixDto and IBasicErrorPrefix are
//		included in the 'errpref' software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	NumberStrKernel
//
//		If this method completes successfully, a fully
//		populated instance of NumberStrKernel will be
//		returned. This instance will encapsulate number
//		string specifications configured for the float64
//		numeric value contained in the current instance
//		of TextFieldFormatDtoFloat64.
//
//
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'.
//
//		If errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message. This returned error message will
//		incorporate the method chain and text passed by
//		input parameter, 'errorPrefix'. The 'errorPrefix'
//		text will be attached to the beginning of the
//		error message.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) GetNumberStrKernel(
	errorPrefix interface{}) (
	NumberStrKernel,
	error) {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldFormatDtoFloat64."+
			"GetNumberStrKernel()",
		"")

	if err != nil {
		return NumberStrKernel{}, err
	}

	var err2 error
	_,
		err2 = new(textFieldFormatDtoFloat64Atom).
		testValidityOfTxtFieldFmtDtoFloat64(
			txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"txtFieldFmtDtoFloat64"))

	if err2 != nil {

		err = fmt.Errorf("%v\n"+
			"ERROR: The current instance of TextFieldFormatDtoFloat64\n"+
			"is improperly configured and Invalid!\n"+
			"Error=\n%v\n",
			ePrefix.String(),
			err2.Error())

		return NumberStrKernel{}, err
	}

	return new(textFieldFormatDtoFloat64Electron).
		getNumberStrKernel(
			txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"txtFieldFmtDtoFloat64"))
}

// GetRightMarginLength
//
// Returns the length of the Right Margin String as an
// integer value.
//
// This method is required in order to implement the
// ITextFieldFormatDto interface.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) GetRightMarginLength() int {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	return len(txtFieldFmtDtoFloat64.RightMarginStr)
}

// GetRightMarginStr
//
// Returns the Right Margin String.
//
// This method is required in order to implement the
// ITextFieldFormatDto interface.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) GetRightMarginStr() string {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	return txtFieldFmtDtoFloat64.RightMarginStr
}

// IsValidInstance
//
// Performs a diagnostic review of the data values
// encapsulated in the current TextFieldFormatDtoFloat64
// instance to determine if they are valid.
//
// If all data elements evaluate as valid, this method
// returns 'true'. If any data element is invalid, this
// method returns 'false'.
//
// This method is required in order to implement the
// ITextFieldFormatDto interface.
//
// ----------------------------------------------------------------
//
// # BE ADVISED
//
// If TextFieldFormatDtoFloat64.DefaultNumStrFmt is
// invalid, it will be automatically reset to the
// standard US (United States) Signed Number String
// Formatting Specification.
//
// All other data values in the current instance of
// TextFieldFormatDtoFloat64 will remain unchanged.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	--- NONE ---
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	isValid						bool
//
//		If all data elements encapsulated by the current
//		instance of TextFieldFormatDtoFloat64 are valid,
//		this returned boolean value is set to 'true'. If
//		any data values are invalid, this return
//		parameter is set to 'false'.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) IsValidInstance() (
	isValid bool) {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	isValid,
		_ = new(textFieldFormatDtoFloat64Atom).
		testValidityOfTxtFieldFmtDtoFloat64(
			txtFieldFmtDtoFloat64,
			nil)

	return isValid
}

// IsValidInstanceError
//
// Performs a diagnostic review of the data values
// encapsulated in the current TextFieldFormatDtoFloat64
// instance to determine if they are valid.
//
// If any data element evaluates as invalid, this method
// will return an error.
//
// This method is required in order to implement the
// ITextFieldFormatDto interface.
//
// ----------------------------------------------------------------
//
// # BE ADVISED
//
// If TextFieldFormatDtoFloat64.DefaultNumStrFmt is
// invalid, it will be automatically reset to the
// standard US (United States) Signed Number String
// Formatting Specification.
//
// All other data values in the current instance of
// TextFieldFormatDtoFloat64 will remain unchanged.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	errorPrefix					interface{}
//
//		This object encapsulates error prefix text which
//		is included in all returned error messages.
//		Usually, it	contains the name of the calling
//		method or methods listed as a method or function
//		chain of execution.
//
//		If no error prefix information is needed, set this
//		parameter to 'nil'.
//
//		This empty interface must be convertible to one of
//		the following types:
//
//		1.	nil
//				A nil value is valid and generates an
//				empty collection of error prefix and
//				error context information.
//
//		2.	string
//				A string containing error prefix
//				information.
//
//		3.	[]string
//				A one-dimensional slice of strings
//				containing error prefix information.
//
//		4.	[][2]string
//				A two-dimensional slice of strings
//		   		containing error prefix and error
//		   		context information.
//
//		5.	ErrPrefixDto
//				An instance of ErrPrefixDto.
//				Information from this object will
//				be copied for use in error and
//				informational messages.
//
//		6.	*ErrPrefixDto
//				A pointer to an instance of
//				ErrPrefixDto. Information from
//				this object will be copied for use
//				in error and informational messages.
//
//		7.	IBasicErrorPrefix
//				An interface to a method
//				generating a two-dimensional slice
//				of strings containing error prefix
//				and error context information.
//
//		If parameter 'errorPrefix' is NOT convertible
//		to one of the valid types listed above, it will
//		be considered invalid and trigger the return of
//		an error.
//
//		Types ErrPrefixDto and IBasicErrorPrefix are
//		included in the 'errpref' software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	error
//
//		If any of the internal member data variables
//		contained in the current instance of
//		TextFieldFormatDtoFloat64 are found to be
//		invalid, this method will return an error
//		containing an appropriate error message.
//
//		If an error message is returned, the returned
//		error message will incorporate the method chain
//		and text passed by input parameter, 'errorPrefix'.
//		The 'errorPrefix' text will be attached to the
//		beginning of the error message.
func (txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) IsValidInstanceError(
	errorPrefix interface{}) error {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldFormatDtoFloat64."+
			"IsValidInstanceError()",
		"")

	if err != nil {
		return err
	}

	_,
		err = new(textFieldFormatDtoFloat64Atom).
		testValidityOfTxtFieldFmtDtoFloat64(
			txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"txtFieldFmtDtoFloat64"))

	return err
}

//	SetDefaultNumStrFmt
//
//	Receives an instance of NumStrFormatSpec and proceeds
//	to copy that Number String Format Specification to
//	the internal default Number String Format
//	Specification contained in the current instance of
//	TextFieldFormatDtoFloat64.
//
//		TextFieldFormatDtoFloat64.DefaultNumStrFmt
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	numStrFmtSpec				NumStrFormatSpec
//
//		An instance of Number String Format Specification
//		('NumStrFormatSpec').
//
//		A deep copy of this instance will be copied to,
//		and stored in, the default Number String Format
//		Specification maintained by the current instance
//		of TextFieldFormatDtoFloat64:
//
//			TextFieldFormatDtoFloat64.DefaultNumStrFmt
//
//		Input parameter 'numStrFmtSpec' provides options
//		for customizing number string currency symbols,
//		integer separation, number sign management and
//		radix point symbols.
//
//		The 'numStrFmtSpec' format specification will be
//		used to format the TextFieldFormatDtoFloat64
//		float64 value in a number string for screen
//		displays, file output and printing.
//
//		If 'numStrFmtSpec' is found to be invalid, an
//		error will be returned.
//
//	errorPrefix					interface{}
//
//		This object encapsulates error prefix text which
//		is included in all returned error messages.
//		Usually, it contains the name of the calling
//		method or methods listed as a method or function
//		chain of execution.
//
//		If no error prefix information is needed, set this
//		parameter to 'nil'.
//
//		This empty interface must be convertible to one of
//		the following types:
//
//		1.	nil
//				A nil value is valid and generates an
//				empty collection of error prefix and
//				error context information.
//
//		2.	string
//				A string containing error prefix
//				information.
//
//		3.	[]string
//				A one-dimensional slice of strings
//				containing error prefix information.
//
//		4.	[][2]string
//				A two-dimensional slice of strings
//		   		containing error prefix and error
//		   		context information.
//
//		5.	ErrPrefixDto
//				An instance of ErrPrefixDto.
//				Information from this object will
//				be copied for use in error and
//				informational messages.
//
//		6.	*ErrPrefixDto
//				A pointer to an instance of
//				ErrPrefixDto. Information from
//				this object will be copied for use
//				in error and informational messages.
//
//		7.	IBasicErrorPrefix
//				An interface to a method
//				generating a two-dimensional slice
//				of strings containing error prefix
//				and error context information.
//
//		If parameter 'errorPrefix' is NOT convertible
//		to one of the valid types listed above, it will
//		be considered invalid and trigger the return of
//		an error.
//
//		Types ErrPrefixDto and IBasicErrorPrefix are
//		included in the 'errpref' software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'.
//
//		If errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message. This returned error message will
//		incorporate the method chain and text passed by
//		input parameter, 'errorPrefix'. The 'errorPrefix'
//		text will be attached to the beginning of the
//		error message.
func (txtFieldFmtDtoFloat64 TextFieldFormatDtoFloat64) SetDefaultNumStrFmt(
	numStrFmtSpec NumStrFormatSpec,
	errorPrefix interface{}) error {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldFormatDtoFloat64."+
			"SetDefaultNumStrFmt()",
		"")

	if err != nil {
		return err
	}

	var err2 error

	_,
		err2 = new(numStrFmtSpecAtom).
		testValidityNumStrFormatSpec(
			&numStrFmtSpec,
			ePrefix.XCpy(
				"numStrFmtSpec"))

	if err2 != nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'numStrFmtSpec' is invalid!\n"+
			"Error = \n%v\n",
			ePrefix.String(),
			err2.Error())

		return err
	}

	err = txtFieldFmtDtoFloat64.
		DefaultNumStrFmt.CopyIn(
		&numStrFmtSpec,
		ePrefix.XCpy(
			"txtFieldFmtDtoFloat64.DefaultNumStrFmt<-"+
				"numStrFmtSpec"))

	return err
}

//	SetPureNumStr
//
//	Receives and converts pure number string to a
//	float64 floating point numeric value which is then
//	assigned to the float64 value encapsulated in the
//	current instance of TextFieldFormatDtoFloat64.
//
//	The parsed float64 value extracted from the pure
//	number string will be stored in the member variable:
//
//		TextFieldFormatDtoFloat64.Float64Num
//
//	The input parameter 'pureNumStr' must be formatted as
//	a pure number string in accordance with the following
//	criteria:
//
//		1.	The pure number string must consist entirely
//			of numeric digit characters (0-9), with the
//			following exceptions.
//
//		2.	For floating point values, the pure number
//			string must separate integer and fractional
//			digits with a decimal point ('.').
//
//		3.	The pure number string must designate
//			negative values with a leading minus sign
//			('-'). Trailing minus signs are NOT
//			supported.
//
//		4.	The pure number string must NOT include integer
//			separators such as commas (',') to separate
//			integer digits by thousands.
//
//						  NOT THIS: 1,000,000
//				Pure Number String: 1000000
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	pureNumStr					string
//
//		This string contains the pure number string which
//		will be parsed to produce and store a float64
//		value in the current instance of
//		TextFieldFormatDtoFloat64.
//
//		The parsed float64 value will be stored in the
//		member variable:
//
//			TextFieldFormatDtoFloat64.Float64Num
//
//		The input parameter 'pureNumStr' must be formatted
//		as a pure number in accordance with the following
//		criteria:
//
//			1.	The pure number string must consist entirely
//				of numeric digit characters (0-9), with
//				following exceptions.
//
//			2.	For floating point values, the pure number
//				string must separate integer and fractional
//				digits with a decimal point ('.').
//
//			3.	The pure number string must designate
//				negative values with a leading minus sign
//				('-'). Trailing minus signs are NOT
//				supported.
//
//			4.	The pure number string must NOT include integer
//				separators such as commas (',') to separate
//				integer digits by thousands.
//
//							  NOT THIS: 1,000,000
//					Pure Number String: 1000000
//
//		If the input parameter 'pureNumStr' does NOT meet these
//		criteria, an error will be returned.
//
//	errorPrefix					interface{}
//
//		This object encapsulates error prefix text which
//		is included in all returned error messages.
//		Usually, it contains the name of the calling
//		method or methods listed as a method or function
//		chain of execution.
//
//		If no error prefix information is needed, set this
//		parameter to 'nil'.
//
//		This empty interface must be convertible to one of
//		the following types:
//
//		1.	nil
//				A nil value is valid and generates an
//				empty collection of error prefix and
//				error context information.
//
//		2.	string
//				A string containing error prefix
//				information.
//
//		3.	[]string
//				A one-dimensional slice of strings
//				containing error prefix information.
//
//		4.	[][2]string
//				A two-dimensional slice of strings
//		   		containing error prefix and error
//		   		context information.
//
//		5.	ErrPrefixDto
//				An instance of ErrPrefixDto.
//				Information from this object will
//				be copied for use in error and
//				informational messages.
//
//		6.	*ErrPrefixDto
//				A pointer to an instance of
//				ErrPrefixDto. Information from
//				this object will be copied for use
//				in error and informational messages.
//
//		7.	IBasicErrorPrefix
//				An interface to a method
//				generating a two-dimensional slice
//				of strings containing error prefix
//				and error context information.
//
//		If parameter 'errorPrefix' is NOT convertible
//		to one of the valid types listed above, it will
//		be considered invalid and trigger the return of
//		an error.
//
//		Types ErrPrefixDto and IBasicErrorPrefix are
//		included in the 'errpref' software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'.
//
//		If errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message. This returned error message will
//		incorporate the method chain and text passed by
//		input parameter, 'errorPrefix'. The 'errorPrefix'
//		text will be attached to the beginning of the
//		error message.
func (txtFieldFmtDtoFloat64 TextFieldFormatDtoFloat64) SetPureNumStr(
	pureNumStr string,
	errorPrefix interface{}) error {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextFieldFormatDtoFloat64."+
			"SetPureNumStr()",
		"")

	if err != nil {
		return err
	}

	var floatNum64 float64

	floatNum64,
		err = new(MathFloatHelper).PureNumStrToFloat64(
		pureNumStr,
		ePrefix.XCpy(
			"pureNumStr"))

	if err != nil {
		return err
	}

	txtFieldFmtDtoFloat64.Float64Num = floatNum64

	return err
}

//	String
//
//	Returns a number string comprised of the float64
//	floating point numeric value contained in the current
//	instance of TextFieldFormatDtoFloat64.
//
//	The returned number string will be formatted using
//	the default Number String Formatting Specification
//	contained in the current instance of
//	TextFieldFormatDtoFloat64.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	NONE
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	string
//
//		If this method completes successfully, a
//		formatted Number String will be returned. If
//		errors are encountered, this string will contain
//		an appropriate error message.
func (txtFieldFmtDtoFloat64 TextFieldFormatDtoFloat64) String() string {

	if txtFieldFmtDtoFloat64.lock == nil {
		txtFieldFmtDtoFloat64.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64.lock.Lock()

	defer txtFieldFmtDtoFloat64.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error
	var errOut string

	funcName := "TextFieldFormatDtoFloat64.String()"

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		nil,
		funcName,
		"")

	if err != nil {
		errOut = fmt.Sprintf("%v\n"+
			"Error Message:\n"+
			"%v",
			funcName,
			err.Error())

		return errOut
	}

	var numStr string

	numStr,
		err = new(textFieldFormatDtoFloat64Nanobot).
		fmtDefaultNumStr(
			&txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"txtFieldFmtDtoFloat64"))

	if err != nil {

		errOut = fmt.Sprintf("%v\n"+
			"Error Message:\n"+
			"%v",
			funcName,
			err.Error())

		return errOut
	}

	return numStr
}

// textFieldFormatDtoFloat64Nanobot
//
// Provides helper methods for TextFieldFormatDtoFloat64.
type textFieldFormatDtoFloat64Nanobot struct {
	lock *sync.Mutex
}

// copy
//
// Copies all data from a source instance of
// TextFieldFormatDtoFloat64 to a destination instance of
// TextFieldFormatDtoFloat64.
//
// ----------------------------------------------------------------
//
// # IMPORTANT
//
//	This method will delete and overwrite all
//	pre-existing data values contained within the
//	TextFieldFormatDtoFloat64 instance passed as input
//	parameter 'destinationTxtFloat64FmtDto'.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	destinationTxtFloat64FmtDto		*TextFieldFormatDtoFloat64
//
//		A pointer to an instance of
//		TextFieldFormatDtoFloat64.
//
//		Data extracted from input parameter
//		'sourceTxtFloat64FmtDto' will be copied to this
//		input parameter, 'destinationTxtFloat64FmtDto'.
//
//		'destinationTxtFloat64FmtDto' is the destination
//		for this copy operation.
//
//		If this method completes successfully, all member
//		data variables encapsulated in
//		'destinationTxtFloat64FmtDto' will be identical to
//		those contained in input parameter,
//		'sourceTxtFloat64FmtDto'.
//
//		Be advised that the pre-existing data fields
//		contained within input parameter
//		'destinationTxtFloat64FmtDto' will be overwritten
//		and deleted.
//
//	sourceTxtBigFloatFieldFmtDto		*TextFieldFormatDtoBigFloat
//
//		A pointer to an instance of TextFieldFormatDtoBigFloat.
//
//		All data values in this TextFieldFormatDtoBigFloat
//		instance will be copied to input parameter
//		'destinationTxtBigFloatFieldFmtDto'.
//
//		'sourceTxtBigFloatFieldFmtDto' is the source of
//		the copy operation.
//
//		If 'sourceTxtBigFloatFieldFmtDto' contains
//		invalid member data variables, an error will be
//		returned.
//
//	errPrefDto					*ePref.ErrPrefixDto
//
//		This object encapsulates an error prefix string
//		which is included in all returned error
//		messages. Usually, it contains the name of the
//		calling method or methods listed as a function
//		chain.
//
//		If no error prefix information is needed, set
//		this parameter to 'nil'.
//
//		Type ErrPrefixDto is included in the 'errpref'
//		software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'.
//
//		If errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message. This returned error message will
//		incorporate the method chain and text passed by
//		input parameter, 'errorPrefix'. The 'errorPrefix'
//		text will be attached to the beginning of the
//		error message.
func (txtFloat64FmtDtoNanobot *textFieldFormatDtoFloat64Nanobot) copy(
	destinationTxtFloat64FmtDto *TextFieldFormatDtoFloat64,
	sourceTxtFloat64FmtDto *TextFieldFormatDtoFloat64,
	errPrefDto *ePref.ErrPrefixDto) error {

	if txtFloat64FmtDtoNanobot.lock == nil {
		txtFloat64FmtDtoNanobot.lock = new(sync.Mutex)
	}

	txtFloat64FmtDtoNanobot.lock.Lock()

	defer txtFloat64FmtDtoNanobot.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewFromErrPrefDto(
		errPrefDto,
		"textFieldFormatDtoFloat64Nanobot."+
			"copy()",
		"")

	if err != nil {

		return err

	}

	if destinationTxtFloat64FmtDto == nil {

		err = fmt.Errorf("%v\n"+
			"ERROR: Input parameter 'destinationTxtFloat64FmtDto' is a nil pointer!\n",
			ePrefix.String())

		return err
	}

	if sourceTxtFloat64FmtDto == nil {

		err = fmt.Errorf("%v\n"+
			"ERROR: Input parameter 'sourceTxtFloat64FmtDto' is a nil pointer!\n",
			ePrefix.String())

		return err
	}

	_,
		err = new(textFieldFormatDtoFloat64Atom).
		testValidityOfTxtFieldFmtDtoFloat64(
			sourceTxtFloat64FmtDto,
			ePrefix.XCpy(
				"sourceTxtFloat64FmtDto Invalid"))

	if err != nil {

		return err

	}

	new(textFieldFormatDtoFloat64Atom).
		empty(
			destinationTxtFloat64FmtDto)

	destinationTxtFloat64FmtDto.LeftMarginStr =
		sourceTxtFloat64FmtDto.LeftMarginStr

	sourceNumStr := strconv.FormatFloat(
		sourceTxtFloat64FmtDto.Float64Num,
		'f',
		-1,
		64)

	var err2 error

	destinationTxtFloat64FmtDto.Float64Num,
		err2 =
		strconv.ParseFloat(
			sourceNumStr,
			64)

	if err2 != nil {
		err = fmt.Errorf("%v\n"+
			"Error returned by strconv.ParseFloat(sourceNumStr)\n"+
			"sourceNumStr = '%v'\n"+
			"Error = \n%v\n",
			ePrefix.String(),
			sourceNumStr,
			err2.Error())

		return err
	}

	destinationTxtFloat64FmtDto.LeadingMinusSign =
		sourceTxtFloat64FmtDto.LeadingMinusSign

	destinationTxtFloat64FmtDto.RoundingType =
		sourceTxtFloat64FmtDto.RoundingType

	destinationTxtFloat64FmtDto.NumOfFractionalDigits =
		sourceTxtFloat64FmtDto.NumOfFractionalDigits

	err = destinationTxtFloat64FmtDto.DefaultNumStrFmt.CopyIn(
		&sourceTxtFloat64FmtDto.DefaultNumStrFmt,
		ePrefix.XCpy(
			"destinationTxtFloat64FmtDto.DefaultNumStrFmt<-"+
				"sourceTxtFloat64FmtDto"))

	if err != nil {
		return err
	}

	destinationTxtFloat64FmtDto.FieldJustify =
		sourceTxtFloat64FmtDto.FieldJustify

	destinationTxtFloat64FmtDto.RightMarginStr =
		sourceTxtFloat64FmtDto.RightMarginStr

	return err
}

// fmtDefaultNumStr
//
//	Receives a pointer to an instance of
//	TextFieldFormatDtoFloat64 ('txtFloat64FmtDto').
//
//	Using the default Number String Formatting
//	Specification contained in this instance, this method
//	will configure and return a fully formatted number
//	string.
//
//	If the default Number String Formatting Specification
//	contained in input parameter 'txtFloat64FmtDto' is
//	invalid, it will be defaulted and automatically reset
//	to the US (United States) Signed Number String
//	Formatting Specification.
//
//	Note that Field Length and Field Justification
//	specifications will be taken from the internal
//	'txtFloat64FmtDto' member variables:
//
//		txtFloat64FmtDto.FieldLength
//		txtFloat64FmtDto.FieldJustify
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	txtFieldFmtDtoFloat64		*TextFieldFormatDtoFloat64
//
//		A pointer to an instance of
//		TextFieldFormatDtoFloat64.
//
//		The numeric value extracted from the instance
//		member variable 'Float64Num' will supply the
//		floating point value included in the returned
//		number string.
//
//		The instance member variable 'DefaultNumStrFmt'
//		will be used to generate the formatted number
//		string. If 'DefaultNumStrFmt' is invalid it will
//		be defaulted and automatically reset to the US
//		(United States) Signed Number String Formatting
//		Specification.
//
//		None of the other data values in this instance
//		will be changed or modified.
//
//		If this instance of TextFieldFormatDtoFloat64
//		contains invalid data elements, an error will be
//		returned.
//
//	errPrefDto					*ePref.ErrPrefixDto
//
//		This object encapsulates an error prefix string
//		which is included in all returned error
//		messages. Usually, it contains the name of the
//		calling method or methods listed as a function
//		chain.
//
//		If no error prefix information is needed, set
//		this parameter to 'nil'.
//
//		Type ErrPrefixDto is included in the 'errpref'
//		software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	string
//
//		If this method completes successfully, a
//		formatted Number String will be returned.
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'. If
//		errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message.
//
//		If an error message is returned, the text value
//		for input parameter 'errPrefDto' (error prefix)
//		will be prefixed or attached at the beginning of
//		the error message.
func (txtFloat64FmtDtoNanobot *textFieldFormatDtoFloat64Nanobot) fmtDefaultNumStr(
	txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64,
	errPrefDto *ePref.ErrPrefixDto) (
	string,
	error) {

	if txtFloat64FmtDtoNanobot.lock == nil {
		txtFloat64FmtDtoNanobot.lock = new(sync.Mutex)
	}

	txtFloat64FmtDtoNanobot.lock.Lock()

	defer txtFloat64FmtDtoNanobot.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewFromErrPrefDto(
		errPrefDto,
		"textFieldFormatDtoFloat64Nanobot."+
			"fmtDefaultNumStr()",
		"")

	if err != nil {

		return "", err

	}

	if txtFieldFmtDtoFloat64 == nil {

		err = fmt.Errorf("%v\n"+
			"ERROR: Input parameter 'txtFieldFmtDtoFloat64' is a nil pointer!\n",
			ePrefix.String())

		return "", err
	}

	_,
		err = new(textFieldFormatDtoFloat64Atom).
		testValidityOfTxtFieldFmtDtoFloat64(
			txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"txtFieldFmtDtoFloat64"))

	if err != nil {

		return "", err

	}

	var numStrFmtSpec NumStrFormatSpec

	numStrFmtSpec,
		err = txtFieldFmtDtoFloat64.DefaultNumStrFmt.
		CopyOut(
			ePrefix.XCpy(
				"numStrFmtSpec<-" +
					"txtFieldFmtDtoFloat64.DefaultNumStrFmt"))

	if err != nil {

		return "", err

	}

	return new(textFieldFormatDtoFloat64Molecule).
		fmtNumStrWithFormatSpec(
			txtFieldFmtDtoFloat64,
			numStrFmtSpec,
			ePrefix.XCpy(
				"txtFieldFmtDtoFloat64.DefaultNumStrFmt"))
}

// getFormattedTextFieldStr
//
// Converts an instance of TextFieldFormatDtoFloat64 to a
// formatted text field string.
//
// This formatted text field string contains the left
// margin, field contents and right margin.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	txtFloat64FmtDto			*TextFieldFormatDtoFloat64
//
//		A pointer to an instance of
//		TextFieldFormatDtoFloat64.
//
//		The left and right margins as well as the member
//		variable 'Float64Num' will be processed and
//		converted to a formatted text field for use in
//		screen displays, file output and printing.
//
//		If input parameter 'txtFloat64FmtDto' is found to
//		contain invalid data values, an error will be
//		returned.
//
//		None of the data values in this instance will be
//		changed or modified.
//
//	errPrefDto					*ePref.ErrPrefixDto
//
//		This object encapsulates an error prefix string
//		which is included in all returned error
//		messages. Usually, it contains the name of the
//		calling method or methods listed as a function
//		chain.
//
//		If no error prefix information is needed, set
//		this parameter to 'nil'.
//
//		Type ErrPrefixDto is included in the 'errpref'
//		software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	string
//
//		If this method completes successfully, the input
//		parameter, 'txtFloat64FmtDto', will be converted
//		to, and returned as, a formatted string	of text.
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'. If
//		errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message.
//
//		If an error message is returned, the text value
//		for input parameter 'errPrefDto' (error prefix)
//		will be prefixed or attached at the beginning of
//		the error message.
func (txtFloat64FmtDtoNanobot *textFieldFormatDtoFloat64Nanobot) getFormattedTextFieldStr(
	txtFloat64FmtDto *TextFieldFormatDtoFloat64,
	errPrefDto *ePref.ErrPrefixDto) (
	string,
	error) {

	if txtFloat64FmtDtoNanobot.lock == nil {
		txtFloat64FmtDtoNanobot.lock = new(sync.Mutex)
	}

	txtFloat64FmtDtoNanobot.lock.Lock()

	defer txtFloat64FmtDtoNanobot.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewFromErrPrefDto(
		errPrefDto,
		"textFieldFormatDtoFloat64Nanobot."+
			"getFormattedTextFieldStr()",
		"")

	if err != nil {

		return "", err

	}

	if txtFloat64FmtDto == nil {

		err = fmt.Errorf("%v\n"+
			"ERROR: Input parameter 'txtFloat64FmtDto' is a nil pointer!\n",
			ePrefix.String())

		return "", err
	}

	strBuilder := new(strings.Builder)

	if len(txtFloat64FmtDto.LeftMarginStr) > 0 {

		strBuilder.WriteString(txtFloat64FmtDto.LeftMarginStr)

	}

	var textLabel TextFieldSpecLabel

	textLabel,
		err = new(textFieldFormatDtoFloat64Molecule).
		getFieldContentTextLabel(
			txtFloat64FmtDto,
			ePrefix.XCpy(
				"txtFloat64FmtDto"))

	if err != nil {

		return "", err
	}

	strBuilder.WriteString(textLabel.GetTextLabel())

	if len(txtFloat64FmtDto.RightMarginStr) > 0 {

		strBuilder.WriteString(txtFloat64FmtDto.RightMarginStr)

	}

	return strBuilder.String(), err
}

// textFieldFormatDtoFloat64Molecule
//
// Provides helper methods for TextFieldFormatDtoFloat64.
type textFieldFormatDtoFloat64Molecule struct {
	lock *sync.Mutex
}

// getFieldContentTextLabel
//
// Converts a TextFieldFormatDtoFloat64 instance member
// variable, 'Float64Num', to an instance of
// TextFieldSpecLabel.
//
// The TextFieldFormatDtoFloat64 instance is passed as
// input parameter, 'txtFieldFmtDtoFloat64'.
//
// The returned TextFieldSpecLabel will only contain
// the member variable 'Float64Num'. It will NOT
// contain the left and right margins. The returned
// TextFieldSpecLabel will format the 'Float64Num'
// numeric value as a rounded pure number string
// generated from a conversion performed by type
// 'NumberStrKernel'.
//
// ----------------------------------------------------------------
//
// # BE ADVISED
//
//	If input parameter 'txtFieldFmtDtoFloat64', an
//	instance of TextFieldFormatDtoFloat64, is found to
//	be invalid, an error will be returned.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	txtFieldFmtDtoFloat64		*TextFieldFormatDtoFloat64
//
//		A pointer to an instance of
//		TextFieldFormatDtoFloat64.
//
//		The member variable 'Float64Num' will be
//		converted to a text label of type
//		TextFieldSpecLabel and returned to the calling
//		function.
//
//		None of the data values in this instance will be
//		changed or modified.
//
//		If this instance of TextFieldFormatDtoFloat64
//		contains invalid data elements, an error will be
//		returned.
//
//	errPrefDto					*ePref.ErrPrefixDto
//
//		This object encapsulates an error prefix string
//		which is included in all returned error
//		messages. Usually, it contains the name of the
//		calling method or methods listed as a function
//		chain.
//
//		If no error prefix information is needed, set
//		this parameter to 'nil'.
//
//		Type ErrPrefixDto is included in the 'errpref'
//		software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	TextFieldSpecLabel
//
//		If this method completes successfully, the Text
//		Field Contents extracted from the input
//		parameter, 'txtFieldFmtDtoFloat64', will be
//		returned as an instance of TextFieldSpecLabel.
//
//		This returned text label will ONLY contain the
//		float64 numeric value ('Float64Num'). It will
//		NOT contain the left or right margin strings.
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'. If
//		errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message.
//
//		If an error message is returned, the text value
//		for input parameter 'errPrefDto' (error prefix)
//		will be prefixed or attached at the beginning of
//		the error message.
func (txtFloat64FmtDtoMolecule *textFieldFormatDtoFloat64Molecule) getFieldContentTextLabel(
	txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64,
	errPrefDto *ePref.ErrPrefixDto) (
	TextFieldSpecLabel,
	error) {

	if txtFloat64FmtDtoMolecule.lock == nil {
		txtFloat64FmtDtoMolecule.lock = new(sync.Mutex)
	}

	txtFloat64FmtDtoMolecule.lock.Lock()

	defer txtFloat64FmtDtoMolecule.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	fieldContentsLabel := TextFieldSpecLabel{}

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewFromErrPrefDto(
		errPrefDto,
		"textFieldFormatDtoFloat64Molecule."+
			"getFieldContentTextLabel()",
		"")

	if err != nil {

		return fieldContentsLabel, err

	}

	if txtFieldFmtDtoFloat64 == nil {

		err = fmt.Errorf("%v\n"+
			"ERROR: Input parameter 'txtFieldFmtDtoFloat64' is a nil pointer!\n",
			ePrefix.String())

		return fieldContentsLabel, err
	}

	var pureNumStr string

	pureNumStr,
		err = new(textFieldFormatDtoFloat64Electron).
		getFloat64RoundedPureNumStr(
			txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"pureNumStr"+
					"<-txtFieldFmtDtoFloat64"))

	if err != nil {

		return fieldContentsLabel, err

	}

	fieldContentsLabel,
		err = TextFieldSpecLabel{}.NewTextLabel(
		pureNumStr,
		txtFieldFmtDtoFloat64.FieldLength,
		txtFieldFmtDtoFloat64.FieldJustify,
		ePrefix.XCpy(
			"fieldContentsLabel<-txtBigFloatFieldFmtDto"))

	return fieldContentsLabel, err
}

// fmtNumStrWithFormatSpec
//
//	Receives a pointer to an instance of
//	TextFieldFormatDtoFloat64.
//
//	The numeric value contained in this instance is
//	converted to a number string using the specifications
//	contained in input parameter 'numStrFmtSpec', an
//	instance  of 'NumStrFormatSpec'.
//
//	Input parameter 'numStrFmtSpec' provides options
//	for customizing for currency symbols, integer
//	separation, number sign management, radix point
//	symbol.
//
//	If required, users also have the option of
//	implementing the India or Chinese Numbering Systems
//	for integer separation.
//
//	The numeric value used to generate the returned
//	NumberStrKernel will be taken from the
//	TextFieldFormatDtoFloat64 member variable,
//	'Float64Num'. This floating point numeric value will
//	be rounded according to the specifications contained
//	in member variables:
//
//		TextFieldFormatDtoFloat64.RoundingType
//						AND
//		TextFieldFormatDtoFloat64.NumOfFractionalDigits
//
//	If either of these rounding specifications are
//	invalid, an error will be returned.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	txtFieldFmtDtoFloat64		*TextFieldFormatDtoFloat64
//
//		A pointer to an instance of
//		TextFieldFormatDtoFloat64.
//
//		The floating point numeric value contained in
//		this instance will be converted to a number
//		string using the Number String Formatting
//		Specifications supplied by input paramter
//		'numStrFmtSpec'.
//
//	numStrFmtSpec				NumStrFormatSpec
//
//		This structure includes all parameters
//		necessary for formatting a number string.
//		These customization options provide maximum
//		granularity in controlling the formatting
//		of the returned Number String.
//
//		type NumStrFormatSpec struct {
//
//			decSeparator			DecimalSeparatorSpec
//
//				Contains the radix point or decimal
//				separator character(s) which will
//				separate integer and fractional
//				numeric digits in a floating point
//				number.
//
//			intSeparatorSpec 		IntegerSeparatorSpec
//
//				Integer Separator Specification. This
//				parameter specifies the type of integer
//				specifies the type of integer grouping and
//				integer separator characters which will be
//				applied to the number string formatting
//				operations.
//
//			positiveNumberSign		NumStrNumberSymbolSpec
//
//				Positive number signs are commonly implied
//				and not specified. However, the user as the
//				option to specify a positive number sign
//				character or characters for positive numeric
//				values using a Number String Positive Number
//				Sign Specification.
//
//				This specification can also be used to
//				configure currency symbols.
//
//			negativeNumberSign		NumStrNumberSymbolSpec
//
//				The Number String Negative Number Sign
//				Specification is used to configure negative
//				number sign symbols for negative numeric values
//				formatted and displayed in number stings.
//
//				This specification can also be used to
//				configured currency symbols.
//
//			numberFieldSpec			NumStrNumberFieldSpec
//
//				This Number String Number Field Specification
//				contains the field length and text
//				justification parameter necessary to display
//				a numeric value within a text number field
//				for display as a number string.
//		}
//
//	errPrefDto					*ePref.ErrPrefixDto
//
//		This object encapsulates an error prefix string
//		which is included in all returned error
//		messages. Usually, it contains the name of the
//		calling method or methods listed as a function
//		chain.
//
//		If no error prefix information is needed, set
//		this parameter to 'nil'.
//
//		Type ErrPrefixDto is included in the 'errpref'
//		software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	string
//
//		If this method completes successfully, a formatted
//		Number String will be returned.
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'.
//
//		If errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message. This returned error message will
//		incorporate the method chain and text passed by
//		input parameter, 'errorPrefix'. The 'errorPrefix'
//		text will be attached to the beginning of the
//		error message.
func (txtFloat64FmtDtoMolecule *textFieldFormatDtoFloat64Molecule) fmtNumStrWithFormatSpec(
	txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64,
	numStrFmtSpec NumStrFormatSpec,
	errPrefDto *ePref.ErrPrefixDto) (
	string,
	error) {

	if txtFloat64FmtDtoMolecule.lock == nil {
		txtFloat64FmtDtoMolecule.lock = new(sync.Mutex)
	}

	txtFloat64FmtDtoMolecule.lock.Lock()

	defer txtFloat64FmtDtoMolecule.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	var numStr string

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewFromErrPrefDto(
		errPrefDto,
		"textFieldFormatDtoFloat64Molecule."+
			"fmtNumStrWithFormatSpec()",
		"")

	if err != nil {

		return numStr, err

	}

	if txtFieldFmtDtoFloat64 == nil {

		err = fmt.Errorf("%v\n"+
			"ERROR: Input parameter 'txtFieldFmtDtoFloat64' is a nil pointer!\n",
			ePrefix.String())

		return numStr, err
	}

	err = numStrFmtSpec.IsValidInstanceError(
		ePrefix.XCpy(
			"Input parameter numStrFmtSpec is invalid."))

	if err != nil {

		return numStr, err

	}

	var err2 error
	_,
		err2 = new(textFieldFormatDtoFloat64Atom).
		testValidityOfTxtFieldFmtDtoFloat64(
			txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"txtFieldFmtDtoFloat64"))

	if err2 != nil {

		err = fmt.Errorf("%v\n"+
			"ERROR: The current instance of TextFieldFormatDtoFloat64\n"+
			"is improperly configured and Invalid!\n"+
			"Error=\n%v\n",
			ePrefix.String(),
			err2.Error())

		return numStr, err
	}

	var roundingSpec NumStrRoundingSpec

	roundingSpec.roundToFractionalDigits =
		txtFieldFmtDtoFloat64.NumOfFractionalDigits

	roundingSpec.roundingType =
		txtFieldFmtDtoFloat64.RoundingType

	err2 = roundingSpec.IsValidInstanceError(
		ePrefix.XCpy(
			"numStrFmtSpec"))

	if err2 != nil {

		err = fmt.Errorf("%v\n"+
			"ERROR: TextFieldFormatDtoFloat64 Rounding Specifications\n"+
			"are improperly configured and Invalid!\n"+
			"Error:\n%v\n",
			ePrefix.String(),
			err2.Error())

		return numStr, err
	}

	var numStrKernel NumberStrKernel

	numStrKernel,
		err = new(textFieldFormatDtoFloat64Electron).
		getNumberStrKernel(
			txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"txtFieldFmtDtoFloat64"))

	if err != nil {
		return numStr, err
	}

	numStr,
		err = numStrKernel.FmtNumStr(
		numStrFmtSpec,
		roundingSpec,
		ePrefix.XCpy(
			"numStrKernel"))

	return numStr, err
}

// textFieldFormatDtoFloat64Atom
//
// Provides helper methods for TextFieldFormatDtoFloat64.
type textFieldFormatDtoFloat64Atom struct {
	lock *sync.Mutex
}

// empty
//
// Receives a pointer to an instance of
// TextFieldFormatDtoFloat64 and proceeds to set all the
// member variables to their zero or uninitialized
// states.
//
// ----------------------------------------------------------------
//
// # IMPORTANT
//
//	This method will delete and reset all pre-existing
//	data values contained within the
//	TextFieldFormatDtoFloat64 instance passed as input
//	parameter 'txtBigFloatFieldFmtDto' to their zero or
//	uninitialized states.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	txtFieldFmtDtoFloat64		*TextFieldFormatDtoFloat64
//
//		A pointer to an instance of
//		TextFieldFormatDtoFloat64. All data values
//		contained within this instance will be deleted
//		and reset to their zero or uninitialized states.
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	NONE
func (txtFieldFmtDtoFloat64Atom *textFieldFormatDtoFloat64Atom) empty(
	txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64) {

	if txtFieldFmtDtoFloat64Atom.lock == nil {
		txtFieldFmtDtoFloat64Atom.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64Atom.lock.Lock()

	defer txtFieldFmtDtoFloat64Atom.lock.Unlock()

	if txtFieldFmtDtoFloat64 == nil {

		return
	}

	txtFieldFmtDtoFloat64.LeftMarginStr = ""

	txtFieldFmtDtoFloat64.Float64Num = 0.0

	txtFieldFmtDtoFloat64.LeadingMinusSign = false

	txtFieldFmtDtoFloat64.RoundingType =
		NumRoundType.None()

	txtFieldFmtDtoFloat64.NumOfFractionalDigits = 0

	txtFieldFmtDtoFloat64.DefaultNumStrFmt.Empty()

	txtFieldFmtDtoFloat64.FieldLength = 0

	txtFieldFmtDtoFloat64.FieldJustify = TxtJustify.None()

	txtFieldFmtDtoFloat64.RightMarginStr = ""

	return
}

// equal
//
// Compares two instances of TextFieldFormatDtoFloat64
// and returns a boolean value signaling whether the two
// instances are equivalent in all respects.
//
// If the two instances of TextFieldFormatDtoFloat64 are
// equal, this method returns 'true'.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	txtFloat64FieldFmtDtoOne		*TextFieldFormatDtoFloat64
//
//		A pointer to an instance of
//		TextFieldFormatDtoFloat64.
//
//		The data values contained within this instance
//		will be compared to corresponding data values
//		contained within a second
//		TextFieldFormatDtoFloat64 instance
//		('txtFloat64FieldFmtDtoTwo') in order to
//		determine if they are equivalent.
//
//	txtFloat64FieldFmtDtoTwo		*TextFieldFormatDtoFloat64
//
//		A pointer to the second of two instances of
//		TextFieldFormatDtoFloat64. The data values
//		contained within this instance will be compared
//		to corresponding data values contained within the
//		first TextFieldFormatDtoFloat64 instance
//		('txtFloat64FieldFmtDtoOne') in order to
//		determine if they are equivalent.
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	bool
//
//		If all the data values within input parameters
//		'txtFloat64FieldFmtDtoOne' and
//		'txtFloat64FieldFmtDtoTwo' are found to be
//		equivalent in all respects, this return parameter
//		will be set to 'true'.
//
//		If the compared data values are NOT equivalent,
//		this method returns 'false'.
func (txtFieldFmtDtoFloat64Atom *textFieldFormatDtoFloat64Atom) equal(
	txtFloat64FieldFmtDtoOne *TextFieldFormatDtoFloat64,
	txtFloat64FieldFmtDtoTwo *TextFieldFormatDtoFloat64) bool {

	if txtFieldFmtDtoFloat64Atom.lock == nil {
		txtFieldFmtDtoFloat64Atom.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64Atom.lock.Lock()

	defer txtFieldFmtDtoFloat64Atom.lock.Unlock()

	if txtFloat64FieldFmtDtoOne == nil ||
		txtFloat64FieldFmtDtoTwo == nil {

		return false
	}

	if txtFloat64FieldFmtDtoOne.LeftMarginStr !=
		txtFloat64FieldFmtDtoTwo.LeftMarginStr {

		return false
	}

	if txtFloat64FieldFmtDtoOne.RoundingType !=
		txtFloat64FieldFmtDtoTwo.RoundingType {

		return false
	}

	if txtFloat64FieldFmtDtoOne.NumOfFractionalDigits !=
		txtFloat64FieldFmtDtoTwo.NumOfFractionalDigits {

		return false
	}

	if !txtFloat64FieldFmtDtoOne.DefaultNumStrFmt.Equal(
		&txtFloat64FieldFmtDtoTwo.DefaultNumStrFmt) {

		return false
	}

	if txtFloat64FieldFmtDtoOne.LeadingMinusSign !=
		txtFloat64FieldFmtDtoTwo.LeadingMinusSign {

		return false
	}

	if txtFloat64FieldFmtDtoOne.FieldLength !=
		txtFloat64FieldFmtDtoTwo.FieldLength {

		return false
	}

	if txtFloat64FieldFmtDtoOne.FieldJustify !=
		txtFloat64FieldFmtDtoTwo.FieldJustify {

		return false
	}

	if txtFloat64FieldFmtDtoOne.RightMarginStr !=
		txtFloat64FieldFmtDtoTwo.RightMarginStr {

		return false
	}

	var float64NumStrOne, float64NumStrTwo string

	var err error

	txtFieldFmtDtoFloat64Electron := textFieldFormatDtoFloat64Electron{}

	float64NumStrOne,
		err = txtFieldFmtDtoFloat64Electron.
		getFloat64RoundedPureNumStr(
			txtFloat64FieldFmtDtoOne,
			nil)

	if err != nil {
		return false
	}

	float64NumStrTwo,
		err = txtFieldFmtDtoFloat64Electron.
		getFloat64RoundedPureNumStr(
			txtFloat64FieldFmtDtoTwo,
			nil)

	if err != nil {
		return false
	}

	if float64NumStrOne != float64NumStrTwo {
		return false
	}

	return true
}

// testValidityOfTxtFieldFmtDtoFloat64
//
// Receives a pointer to an instance of
// TextFieldFormatDtoFloat64 and performs a diagnostic
// analysis to determine if the data values contained in
// that instance are valid in all respects.
//
// If the input parameter 'txtFieldFmtDtoFloat64' is
// determined to be invalid, this method will return a
// boolean flag ('isValid') of 'false'. In addition, an
// instance of type error ('err') will be returned
// configured with an appropriate error message.
//
// If the input parameter 'txtFieldFmtDtoFloat64' is
// valid, this method will return a boolean flag
// ('isValid') of 'true' and the returned error type
// ('err') will be set to 'nil'.
//
// If txtFieldFmtDtoFloat64.DefaultNumStrFmt is invalid,
// it will be automatically reset to the standard US
// (United States) Signed Number String Formatting
// Specification.
//
// All other data values in this instance will remain
// unchanged.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	txtFieldFmtDtoFloat64		*TextFieldFormatDtoFloat64
//
//		A pointer to an instance of
//		TextFieldFormatDtoFloat64.
//
//		The data values contained in this instance will
//		be reviewed and analyzed to determine if they
//		are valid in all respects.
//
//		If txtFieldFmtDtoFloat64.DefaultNumStrFmt is
//		invalid, it will be reset to the standard US
//		(United States) Signed Number String Formatting
//		Specification.
//
//		All other data values in this instance will
//		remain unchanged.
//
//	errPrefDto					*ePref.ErrPrefixDto
//
//		This object encapsulates an error prefix string
//		which is included in all returned error
//		messages. Usually, it contains the name of the
//		calling method or methods listed as a function
//		chain.
//
//		If no error prefix information is needed, set
//		this parameter to 'nil'.
//
//		Type ErrPrefixDto is included in the 'errpref'
//		software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	isValid						bool
//
//		If all data elements contained within input
//		parameter 'txtFieldFmtDtoFloat64' are judged to
//		be valid, this returned boolean value will be set
//		to 'true'. If any data values are invalid, this
//		return parameter will be set to 'false'.
//
//	error
//
//		If this method completes successfully and all the
//		data values contained in input parameter
//		'txtFieldFmtDtoFloat64' are judged to be valid,
//		the returned error Type will be set equal to
//		'nil'.
//
//		If the data values contained in input parameter
//		'txtFieldFmtDtoFloat64' are invalid, the
//		returned 'error' will be non-nil and configured
//		with an appropriate error message.
//
//		If an error message is returned, the text value
//		for input parameter 'errPrefDto' (error prefix)
//		will be prefixed or attached at the beginning of
//		the error message.
func (txtFieldFmtDtoFloat64Atom *textFieldFormatDtoFloat64Atom) testValidityOfTxtFieldFmtDtoFloat64(
	txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64,
	errPrefDto *ePref.ErrPrefixDto) (
	isValid bool,
	err error) {

	if txtFieldFmtDtoFloat64Atom.lock == nil {
		txtFieldFmtDtoFloat64Atom.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64Atom.lock.Lock()

	defer txtFieldFmtDtoFloat64Atom.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	isValid = false

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewFromErrPrefDto(
		errPrefDto,
		"textFieldFormatDtoFloat64Atom."+
			"testValidityOfTxtFieldFmtDtoFloat64()",
		"")

	if err != nil {

		return isValid, err

	}

	if txtFieldFmtDtoFloat64 == nil {

		err = fmt.Errorf("%v\n"+
			"ERROR: Input parameter 'txtFieldFmtDtoFloat64' is a nil pointer!\n",
			ePrefix.String())

		return isValid, err
	}

	if txtFieldFmtDtoFloat64.FieldLength < -1 {

		err = fmt.Errorf("%v\n"+
			"ERROR: TextFieldFormatDtoFloat64 parameter 'FieldLength' is INVALID!\n"+
			"txtFieldFmtDtoFloat64.FieldLength has a value less than minus one (-1)\n"+
			"txtFieldFmtDtoFloat64.FieldLength = %v\n",
			ePrefix.String(),
			txtFieldFmtDtoFloat64.FieldLength)

		return isValid, err
	}

	if txtFieldFmtDtoFloat64.FieldLength > 1000000 {

		err = fmt.Errorf("%v\n"+
			"ERROR: TextFieldFormatDtoFloat64 parameter 'FieldLength' is INVALID!\n"+
			"txtFieldFmtDtoFloat64.FieldLength has a value greater than one-million (1,000,000)\n"+
			"txtFieldFmtDtoFloat64.FieldLength = %v\n",
			ePrefix.String(),
			txtFieldFmtDtoFloat64.FieldLength)

		return isValid, err
	}

	if txtFieldFmtDtoFloat64.NumOfFractionalDigits < -1 {

		err = fmt.Errorf("%v\n"+
			"ERROR: TextFieldFormatDtoFloat64 parameter 'NumOfFractionalDigits' is INVALID!\n"+
			"txtFieldFmtDtoFloat64.NumOfFractionalDigits has a value less than minus one (-1)\n"+
			"txtFieldFmtDtoFloat64.NumOfFractionalDigits = %v\n",
			ePrefix.String(),
			txtFieldFmtDtoFloat64.NumOfFractionalDigits)

		return isValid, err
	}

	var numberFieldSpec NumStrNumberFieldSpec

	numberFieldSpec.fieldLength =
		txtFieldFmtDtoFloat64.FieldLength

	numberFieldSpec.fieldJustification =
		txtFieldFmtDtoFloat64.FieldJustify

	err = new(numStrFmtSpecMechanics).
		setUSDefaultSignedNumStrFmtIfNeeded(
			&txtFieldFmtDtoFloat64.DefaultNumStrFmt,
			numberFieldSpec,
			ePrefix.XCpy(
				"txtFieldFmtDtoFloat64.DefaultNumStrFmt"))

	if err != nil {

		return isValid, err

	}

	if !txtFieldFmtDtoFloat64.RoundingType.XIsValid() {

		err = fmt.Errorf("%v\n"+
			"ERROR: TextFieldFormatDtoFloat64 parameter 'RoundingType' is INVALID!\n"+
			"txtFieldFmtDtoFloat64.RoundingType must be set to a valid value as follows:\n"+
			" NumRoundType.NoRounding()\n"+
			" NumRoundType.HalfUpWithNegNums()\n"+
			" NumRoundType.HalfDownWithNegNums()\n"+
			" NumRoundType.HalfAwayFromZero()\n"+
			" NumRoundType.HalfTowardsZero()\n"+
			" NumRoundType.HalfToEven()\n"+
			" NumRoundType.HalfToOdd()\n"+
			" NumRoundType.Randomly()\n"+
			" NumRoundType.Floor()\n"+
			" NumRoundType.Ceiling()\n"+
			" NumRoundType.Truncate()\n"+
			" txtFieldFmtDtoFloat64.RoundingType String Value = %v\n"+
			"txtFieldFmtDtoFloat64.RoundingType Integer Value = %v\n",
			ePrefix.String(),
			txtFieldFmtDtoFloat64.RoundingType.String(),
			txtFieldFmtDtoFloat64.RoundingType.XValueInt())

		return isValid, err
	}

	isValid = true

	return isValid, err
}

// textFieldFormatDtoBigFloatElectron - Provides helper
// methods for TextFieldFormatDtoFloat64.
type textFieldFormatDtoFloat64Electron struct {
	lock *sync.Mutex
}

//	getFloat64RoundedPureNumStr
//
//	Receives a pointer to an instance of
//	TextFieldFormatDtoFloat64 and extracts the
//	specifications necessary to format and return a
//	rounded floating point pure number string
//	generated from a conversion performed by type
//	'NumberStrKernel'.
//
//	A rounded pure number string differs from a
//	'native' number string in that rounded pure number
//	string uses the following TextFieldFormatDtoBigFloat
//	member variables to generate a number string using
//	the conversion algorithms provided by type
//	'NumberStrKernel':
//
//		txtFieldFmtDtoFloat64.LeadingMinusSign
//		txtFieldFmtDtoFloat64.RoundingType
//		txtFieldFmtDtoFloat64.NumOfFractionalDigits
//
//	Users will note that the rounded pure number strings
//	offers more flexibility than native strings when
//	attempting to conform to multinational and
//	multicultural number string formatting conventions.
//
//	The rounded floating point pure number string
//	returned by this method will:
//
//	1.	Consist entirely of numeric digit characters.
//
//	2.	Separate integer and fractional digits with a
//		decimal point ('.').
//
//	3.	Designate negative values with a leading or
//		trailing minus sign ('-'). Minus sign
//		placement is controlled by member variable
//		TextFieldFormatDtoFloat64.LeadingMinusSign.
//
//		Leading Minus Sign:		-1000000
//				OR
//		Trailing Minus Sign:	1000000-
//
//	 4.	NOT include integer separators such as commas
//	   	(',') to separate integer digits by thousands.
//
//	   	NOT THIS: 1,000,000
//	   	Pure Number String: 1000000
//
// ----------------------------------------------------------------
//
// # BE ADVISED
//
//	Pure number strings Do NOT include integer separators
//	(i.e. commas ',') to separate integer number strings
//	into thousands.
//
//					  NOT THIS: 1,000,000
//			Pure Number String: 1000000
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	txtFieldFmtDtoFloat64		*TextFieldFormatDtoFloat64
//
//		A pointer to an instance of
//		TextFieldFormatDtoFloat64.
//
//		This instance of TextFieldFormatDtoFloat64 will
//		be converted, formatted and returned as a
//		floating point pure number string.
//
//		If this instance of TextFieldFormatDtoFloat64
//		contains invalid data elements, an error will
//		be returned.
//
//	errPrefDto					*ePref.ErrPrefixDto
//
//		This object encapsulates an error prefix string
//		which is included in all returned error
//		messages. Usually, it contains the name of the
//		calling method or methods listed as a function
//		chain.
//
//		If no error prefix information is needed, set
//		this parameter to 'nil'.
//
//		Type ErrPrefixDto is included in the 'errpref'
//		software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	string
//
//		If this method completes successfully, this
//		string parameter will return a floating point
//		pure number string representation of the
//		float64 value passed by input paramter,
//		'txtFieldFmtDtoFloat64'.
//
//		The returned floating point pure number string
//		will:
//
//		1.	Consist entirely of numeric digit characters.
//
//		2.	Separate integer and fractional digits with a
//			decimal point ('.').
//
//
//		3.	Designate negative values with a leading or
//			trailing minus sign ('-'). Minus sign
//			placement is controlled by member variable
//			TextFieldFormatDtoFloat64.LeadingMinusSign.
//
//			Leading Minus Sign:		-1000000
//					OR
//			Trailing Minus Sign:	1000000-
//
//		4.	NOT include integer separators such as commas
//			(',') to separate integer digits by thousands.
//
//						  NOT THIS: 1,000,000
//				Pure Number String: 1000000
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'. If
//		errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message.
//
//		If an error message is returned, the text value
//		for input parameter 'errPrefDto' (error prefix)
//		will be prefixed or attached at the beginning of
//		the error message.
func (txtFieldFmtDtoFloat64Electron *textFieldFormatDtoFloat64Electron) getFloat64RoundedPureNumStr(
	txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64,
	errPrefDto *ePref.ErrPrefixDto) (
	string,
	error) {

	if txtFieldFmtDtoFloat64Electron.lock == nil {
		txtFieldFmtDtoFloat64Electron.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64Electron.lock.Lock()

	defer txtFieldFmtDtoFloat64Electron.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewFromErrPrefDto(
		errPrefDto,
		"textFieldFormatDtoFloat64Electron."+
			"getFloat64RoundedPureNumStr()",
		"")

	if err != nil {

		return "", err

	}

	if txtFieldFmtDtoFloat64 == nil {

		err = fmt.Errorf("%v\n"+
			"ERROR: Input parameter 'txtFieldFmtDtoFloat64' is a nil pointer!\n",
			ePrefix.String())

		return "", err
	}

	_,
		err = new(textFieldFormatDtoFloat64Atom).
		testValidityOfTxtFieldFmtDtoFloat64(
			txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"txtFieldFmtDtoFloat64 Invalid"))

	if err != nil {

		return "", err

	}

	var float64NumStr string

	var float64NumberStrKernel NumberStrKernel

	float64NumberStrKernel,
		err = new(NumberStrKernel).NewFromFloatValue(
		txtFieldFmtDtoFloat64.Float64Num,
		ePrefix.XCpy(
			"txtFieldFmtDtoFloat64.Float64Num"))

	if err != nil {

		return "", err

	}

	roundingSpecOne := NumStrRoundingSpec{
		roundingType:            txtFieldFmtDtoFloat64.RoundingType,
		roundToFractionalDigits: txtFieldFmtDtoFloat64.NumOfFractionalDigits,
	}

	float64NumStr,
		err = float64NumberStrKernel.FmtSignedPureNumberStr(
		".",
		txtFieldFmtDtoFloat64.LeadingMinusSign,
		-1,
		TxtJustify.Right(),
		roundingSpecOne,
		ePrefix.XCpy(
			"float64NumStr<-float64NumberStrKernel"))

	return float64NumStr, err
}

// getFloat64NativeNumStr
//
// Returns a native number string containing the numeric
// value specified by input parameter
// 'txtFieldFmtDtoFloat64'.
//
// A native number string is generated using the native
// number to string conversion provided by the Golang
// 'strconv' package. All rounding is controlled
// internally by the 'strconv' package and is therefore
// NOT SUBJECT to user control.
//
// The number of fractional digits presented in the
// native number string is specified by the member
// variable, 'NumOfFractionalDigits' contained in the
// TextFieldFormatDtoFloat64 instance passed as input
// parameter 'txtFieldFmtDtoFloat64'.
//
// If the txtFieldFmtDtoFloat64 member variable
// 'NumOfFractionalDigits' is set to minus one (-1), the
// maximum number of available fractional digits will be
// formatted and returned in the number string.
//
// If additional customization is required in formatting
// a pure number string, see method:
//
//	textFieldFormatDtoFloat64Electron.getFloat64RoundedPureNumStr()
//
// ----------------------------------------------------------------
//
// # BE ADVISED
//
//  1. Native Number Strings DO NOT include integer
//     separators (i.e. commas ',') to separate integer
//     number strings into thousands.
//
//     NOT THIS: 1,000,000 or -1,000,000
//     Native Number String: 1000000 or -1000000
//
//  2. Note that the placement of the leading minus sign
//     is fixed and completely controlled by the Golang
//     'strconv' package. Trailing minus signs are therefore
//     NOT supported. Only Leading minus signs will be
//     presented for negative numeric values.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	txtFieldFmtDtoFloat64		*TextFieldFormatDtoFloat64
//
//		A pointer to an instance of
//		TextFieldFormatDtoFloat64.
//
//		This instance of TextFieldFormatDtoFloat64 will
//		be converted, formatted and returned as a
//		floating point native pure number string.
//
//		Native number strings are generated using
//		functions from the Golang 'strings' package.
//
//		If this instance of TextFieldFormatDtoFloat64
//		contains invalid data elements, an error will
//		be returned.
//
//	errPrefDto					*ePref.ErrPrefixDto
//
//		This object encapsulates an error prefix string
//		which is included in all returned error
//		messages. Usually, it contains the name of the
//		calling method or methods listed as a function
//		chain.
//
//		If no error prefix information is needed, set
//		this parameter to 'nil'.
//
//		Type ErrPrefixDto is included in the 'errpref'
//		software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	string
//
//		If this method completes successfully, this
//		string parameter will return a floating point
//		native number string representation of the
//		float64 value passed by input paramter,
//		'txtFieldFmtDtoFloat64'.
//
//		The returned floating point native number string
//		will:
//
//		1.	Consist entirely of numeric digit characters
//			with the following exceptions.
//
//		2.	Separate integer and fractional digits with a
//			decimal point ('.').
//
//		3.	Designate negative values with a leading minus
//			sign ('-').
//
//		4.	NOT include integer separators such as commas
//			(',') to separate integer digits by thousands.
//
//							NOT THIS: 1,000,000
//				Native Number String: 1000000
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'. If
//		errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message.
//
//		If an error message is returned, the text value
//		for input parameter 'errPrefDto' (error prefix)
//		will be prefixed or attached at the beginning of
//		the error message.
func (txtFieldFmtDtoFloat64Electron *textFieldFormatDtoFloat64Electron) getFloat64NativeNumStr(
	txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64,
	errPrefDto *ePref.ErrPrefixDto) (
	string,
	error) {

	if txtFieldFmtDtoFloat64Electron.lock == nil {
		txtFieldFmtDtoFloat64Electron.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64Electron.lock.Lock()

	defer txtFieldFmtDtoFloat64Electron.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewFromErrPrefDto(
		errPrefDto,
		"textFieldFormatDtoFloat64Electron."+
			"getFloat64NativeNumStr()",
		"")

	if err != nil {

		return "", err

	}

	if txtFieldFmtDtoFloat64 == nil {

		err = fmt.Errorf("%v\n"+
			"ERROR: Input parameter 'txtFieldFmtDtoFloat64' is a nil pointer!\n",
			ePrefix.String())

		return "", err
	}

	_,
		err = new(textFieldFormatDtoFloat64Atom).
		testValidityOfTxtFieldFmtDtoFloat64(
			txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"txtFieldFmtDtoFloat64 Invalid"))

	if err != nil {

		return "", err

	}

	var float64NumStr string

	float64NumStr = strconv.FormatFloat(
		txtFieldFmtDtoFloat64.Float64Num,
		'f',
		txtFieldFmtDtoFloat64.NumOfFractionalDigits,
		64)

	return float64NumStr, err
}

//	getNumberStrKernel
//
//	Returns an instance of NumberStrKernel configured with
//	the float64 numeric value contained in the current
//	instance of TextFieldFormatDtoFloat64.
//
// ----------------------------------------------------------------
//
// # Input Parameters
//
//	txtFieldFmtDtoFloat64		*TextFieldFormatDtoFloat64
//
//		A pointer to an instance of
//		TextFieldFormatDtoFloat64.
//
//		The float64 numeric value contained in this
//		instance of TextFieldFormatDtoFloat64 will
//		be used to populate the returned instance
//		of NumberStrKernel.
//
//		If this instance of TextFieldFormatDtoFloat64
//		contains invalid data elements, an error will
//		be returned.
//
//	errPrefDto					*ePref.ErrPrefixDto
//
//		This object encapsulates an error prefix string
//		which is included in all returned error
//		messages. Usually, it contains the name of the
//		calling method or methods listed as a function
//		chain.
//
//		If no error prefix information is needed, set
//		this parameter to 'nil'.
//
//		Type ErrPrefixDto is included in the 'errpref'
//		software package:
//			"github.com/MikeAustin71/errpref".
//
// ----------------------------------------------------------------
//
// # Return Values
//
//	NumberStrKernel
//
//		If this method completes successfully, an
//		instance of NumberStrKernel will be returned
//		configured with the numeric value contained
//		within the TextFieldFormatDtoFloat64 input
//		parameter, 'txtFieldFmtDtoFloat64'.
//
//	error
//
//		If this method completes successfully, the
//		returned error Type is set equal to 'nil'. If
//		errors are encountered during processing, the
//		returned error Type will encapsulate an error
//		message.
//
//		If an error message is returned, the text value
//		for input parameter 'errPrefDto' (error prefix)
//		will be prefixed or attached at the beginning of
//		the error message.
func (txtFieldFmtDtoFloat64Electron *textFieldFormatDtoFloat64Electron) getNumberStrKernel(
	txtFieldFmtDtoFloat64 *TextFieldFormatDtoFloat64,
	errPrefDto *ePref.ErrPrefixDto) (
	NumberStrKernel,
	error) {

	if txtFieldFmtDtoFloat64Electron.lock == nil {
		txtFieldFmtDtoFloat64Electron.lock = new(sync.Mutex)
	}

	txtFieldFmtDtoFloat64Electron.lock.Lock()

	defer txtFieldFmtDtoFloat64Electron.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	newNumberStrKernel := NumberStrKernel{}

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewFromErrPrefDto(
		errPrefDto,
		"textFieldFormatDtoFloat64Electron."+
			"getNumberStrKernel()",
		"")

	if err != nil {

		return newNumberStrKernel, err

	}

	if txtFieldFmtDtoFloat64 == nil {

		err = fmt.Errorf("%v\n"+
			"ERROR: Input parameter 'txtFieldFmtDtoFloat64' is a nil pointer!\n",
			ePrefix.String())

		return newNumberStrKernel, err
	}

	_,
		err = new(textFieldFormatDtoFloat64Atom).
		testValidityOfTxtFieldFmtDtoFloat64(
			txtFieldFmtDtoFloat64,
			ePrefix.XCpy(
				"txtFieldFmtDtoFloat64 Invalid"))

	newNumberStrKernel,
		err = new(NumberStrKernel).NewFromFloatValue(
		txtFieldFmtDtoFloat64.Float64Num,
		ePrefix.XCpy(
			"txtFieldFmtDtoFloat64.Float64Num"))

	if err != nil {

		return newNumberStrKernel, err

	}

	err = newNumberStrKernel.Round(
		txtFieldFmtDtoFloat64.RoundingType,
		txtFieldFmtDtoFloat64.NumOfFractionalDigits,
		ePrefix.XCpy(
			"newNumberStrKernel<-"+
				"txtFieldFmtDtoFloat64"))

	return newNumberStrKernel, err
}
