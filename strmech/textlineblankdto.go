package strmech

import (
	"fmt"
	ePref "github.com/MikeAustin71/errpref"
	"sync"
)

// TextLineBlankDto - This type is used to transmit data
// parameters and specifications required to create Text
// Blank Lines.
//
// Blank Lines typically consist of one or more new line
// characters ('\n') and nothing more. However, users have
// the option to provide alternate or custom line termination
// characters which will be applied instead.
//
//  Example-1 :
//   NumOfBlankLines = 3
//   LineTerminator = ""
//   Final Blank Line Text = "\n\n\n" // 3-new line characters
//
//  Example-2 :
//   NumOfBlankLines = 2
//   LineTerminator = "\n x \n"
//   Final Blank Line Text = "\n x \n\n x \n"
//
type TextLineBlankDto struct {
	FormatType TextFieldType
	// Required. This enumeration value specifies the type of
	// Text Format Operation to be performed.
	//
	// For the TextLineBlankDto Format Type, this value
	// should always be set to:
	//   TxtFieldType.BlankLine()       - Valid

	NumOfBlankLines int
	// The number of blank lines which will be generated by this
	// method.
	//
	// If this value is less than one (+1) or greater than
	// one-million, an error will be returned.

	LineTerminator string
	// If this parameter is submitted as an empty string,
	// the default new line terminator ('\n') will be applied.
	// If this parameter is populated, this character sequence
	// will be used as the Line Terminator for this text blank
	// line.

	lock *sync.Mutex
}

// CopyIn - Copies the data fields from an incoming instance of
// TextLineBlankDto ('incomingTxtBlankLineDto') to the data fields
// of the current TextLineBlankDto instance
// ('txtLineBlankDto').
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// All the data fields in current TextLineBlankDto instance
// ('txtLineBlankDto') will be deleted and overwritten.
//
// NO DATA VALIDATION IS performed on input parameter,
// 'incomingTxtBlankLineDto'.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  incomingTxtBlankLineDto        TextLineBlankDto
//     - An instance of TextLineBlankDto. This method will NOT
//       change the data values of member variables contained in
//       this instance.
//
//       All data values in this TextLineBlankDto instance
//       ('incomingTxtBlankLineDto') will be copied to the current
//       TextLineBlankDto instance ('txtLineBlankDto').
//
//       No data validation is performed on input parameter,
//       'incomingTxtBlankLineDto'.
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  NONE
//
func (txtLineBlankDto *TextLineBlankDto) CopyIn(
	incomingTxtBlankLineDto TextLineBlankDto) {

	if txtLineBlankDto.lock == nil {
		txtLineBlankDto.lock = new(sync.Mutex)
	}

	txtLineBlankDto.lock.Lock()

	defer txtLineBlankDto.lock.Unlock()

	_ = new(textLineBlankDtoNanobot).copy(
		txtLineBlankDto,
		&incomingTxtBlankLineDto,
		nil)

	return
}

// CopyOut - Returns a deep copy of the current TextLineBlankDto
// instance.
//
// NO DATA VALIDATION is performed on the current instance of
// TextLineBlankDto.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  NONE
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  deepCopyTxtBlankLineDto        TextLineBlankDto
//     - This parameter will return a deep copy of the current
//       TextLineBlankDto instance.
//
func (txtLineBlankDto *TextLineBlankDto) CopyOut() (
	deepCopyTxtBlankLineDto TextLineBlankDto) {

	if txtLineBlankDto.lock == nil {
		txtLineBlankDto.lock = new(sync.Mutex)
	}

	txtLineBlankDto.lock.Lock()

	defer txtLineBlankDto.lock.Unlock()

	_ = new(textLineBlankDtoNanobot).copy(
		&deepCopyTxtBlankLineDto,
		txtLineBlankDto,
		nil)

	return deepCopyTxtBlankLineDto
}

// Empty - Resets all internal member variables for the current
// instance of TextLineBlankDto to their zero or uninitialized
// states. This method will leave the current instance of
// TextLineBlankDto in an invalid state and unavailable for
// immediate reuse.
//
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// This method will delete all member variable data values in this
// current instance of TextLineBlankDto. All member variable data
// values will be reset to their zero or uninitialized states.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  NONE
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  NONE
//
func (txtLineBlankDto *TextLineBlankDto) Empty() {

	if txtLineBlankDto.lock == nil {
		txtLineBlankDto.lock = new(sync.Mutex)
	}

	txtLineBlankDto.lock.Lock()

	txtLineBlankDto.FormatType = TxtFieldType.None()

	txtLineBlankDto.NumOfBlankLines = -1

	txtLineBlankDto.LineTerminator = ""

	txtLineBlankDto.lock.Unlock()

	txtLineBlankDto.lock = nil

}

// Equal - Receives another instance of TextLineBlankDto and
// proceeds to compare the member variables to those of the current
// TextLineBlankDto instance in order to determine if they are
// equivalent.
//
// A boolean flag showing the result of this comparison is
// returned. If the member variables of both instances are equal in
// all respects, this flag is set to 'true'. Otherwise, this method
// returns 'false'.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  incomingTxtBlankLineDto       TextLineBlankDto
//     - An incoming instance of TextLineBlankDto. This method
//       will compare all member variable data values in this
//       instance against those contained in the current instance
//       of TextLineBlankDto. If the data values in both
//       instances are found to be equal in all respects, this
//       method will return a boolean value of 'true'.
//
//
// ----------------------------------------------------------------
//
// Return Values
//
//  bool
//     - If the member variable data values contained in input
//       parameter 'incomingTxtBlankLineDto' are equal in all
//       respects to those contained in the current instance of
//       TextLineBlankDto, this method will return a boolean
//       value of 'true'. Otherwise a value of 'false' will be
//       returned to the calling function.
//
func (txtLineBlankDto *TextLineBlankDto) Equal(
	incomingTxtBlankLineDto TextLineBlankDto) bool {

	if txtLineBlankDto.lock == nil {
		txtLineBlankDto.lock = new(sync.Mutex)
	}

	txtLineBlankDto.lock.Lock()

	defer txtLineBlankDto.lock.Unlock()

	if txtLineBlankDto.FormatType !=
		incomingTxtBlankLineDto.FormatType {

		return false
	}

	if txtLineBlankDto.NumOfBlankLines !=
		incomingTxtBlankLineDto.NumOfBlankLines {

		return false
	}

	if txtLineBlankDto.LineTerminator !=
		incomingTxtBlankLineDto.LineTerminator {

		return false
	}

	return true
}

// textLineBlankDtoNanobot - Provides helper methods for
// TextLineBlankDto.
type textLineBlankDtoNanobot struct {
	lock *sync.Mutex
}

// copy - Copies all data from a source instance of
// TextLineBlankDto to a destination instance of
// TextLineBlankDto.
func (txtBlankLineNanobot *textLineBlankDtoNanobot) copy(
	destinationBlankLineDto *TextLineBlankDto,
	sourceBlankLineDto *TextLineBlankDto,
	errPrefDto *ePref.ErrPrefixDto) error {

	if txtBlankLineNanobot.lock == nil {
		txtBlankLineNanobot.lock = new(sync.Mutex)
	}

	txtBlankLineNanobot.lock.Lock()

	defer txtBlankLineNanobot.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewFromErrPrefDto(
		errPrefDto,
		"textFieldFillerDtoNanobot."+
			"copy()",
		"")

	if err != nil {

		return err

	}

	if sourceBlankLineDto == nil {

		err = fmt.Errorf("%v\n"+
			"ERROR: Input parameter 'sourceBlankLineDto' is a nil pointer!\n",
			ePrefix.String())

		return err
	}

	if destinationBlankLineDto == nil {

		err = fmt.Errorf("%v\n"+
			"ERROR: Input parameter 'destinationBlankLineDto' is a nil pointer!\n",
			ePrefix.String())

		return err
	}

	destinationBlankLineDto.FormatType =
		sourceBlankLineDto.FormatType

	destinationBlankLineDto.NumOfBlankLines =
		sourceBlankLineDto.NumOfBlankLines

	destinationBlankLineDto.LineTerminator =
		sourceBlankLineDto.LineTerminator

	return err
}
