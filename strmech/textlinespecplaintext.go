package strmech

import (
	"fmt"
	ePref "github.com/MikeAustin71/errpref"
	"io"
	"strings"
	"sync"
)

// TextLineSpecPlainText - Used to create a line of text from a
// simple text string.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Left and right margins consist of zero or more characters
// customized and provided by the calling function.
//
// IMPORTANT
//
// ----------------------------------------------------------------
//
// By default, the TextLineSpecPlainText type will generate a
// line of text with a "new line" ('\n') line termination
// character. The application of this "new line" ('\n') character
// is automatic and by default.
//
// However, users may customize and override the application of
// line termination characters through the following methods:
//
//  TextLineSpecPlainText.SetLineTerminationChars()
//  TextLineSpecPlainText.TurnAutoLineTerminationOff()
//  TextLineSpecPlainText.TurnAutoLineTerminationOn()
//
//
// The TextLineSpecPlainText type implements the interfaces
// ITextLineSpecification and io.Reader.
//
//
// Member Variables
//
// ----------------------------------------------------------------
//
//  leftMarginChars            []rune
//     - An array of runes containing the text characters which
//       will be used as the left margin of the formatted text
//       string. The number of left margin characters is restricted
//       to a range from zero (0) to one-million (1,000,000),
//       inclusive.
//
//
//  rightMarginChars           []rune
//     - An array of runes containing the text characters which
//       will be used as the right margin of the formatted text
//       string. The number of right margin characters is
//       restricted to a range from zero (0) to one-million
//       (1,000,000), inclusive.
//
//
//  textString                 string
//     - A string of text characters supplied by the user which
//       will be positioned between the left and right margins when
//       constructing the formatted line of text generated for text
//       display, file output or printing.
//
//
//  newLineChars               []rune
//     - By default, each line of text generated by
//       TextLineSpecPlainText will be terminated with a new line
//       character ('\n'). However, users have the option to
//       override and modify this behavior by supplying an
//       alternative character or characters to be used as a line
//       termination sequence for each line of text produced by the
//       current TextLineSpecPlainText instance.
//
//       To override, change or control the behavior of
//       'newLineChars', see the following methods:
//
//         TextLineSpecPlainText.GetLineTerminationChars()
//         TextLineSpecPlainText.GetLineTerminationRunes()
//         TextLineSpecPlainText.SetLineTerminationChars()
//         TextLineSpecPlainText.SetLineTerminationChars()
//         TextLineSpecPlainText.SetLineTerminationRunes()
//         TextLineSpecPlainText.TurnAutoLineTerminationOff()
//         TextLineSpecPlainText.TurnAutoLineTerminationOn()
//
//
type TextLineSpecPlainText struct {
	leftMarginChars       []rune
	rightMarginChars      []rune
	textString            string
	turnLineTerminatorOff bool
	newLineChars          []rune
	textLineReader        *strings.Reader
	lock                  *sync.Mutex
}

// CopyIn - Copies the data fields from an incoming instance of
// TextLineSpecPlainText ('incomingPlainTxtLine') to the data
// fields of the current TextLineSpecPlainText instance
// ('plainTextLine').
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// All the data fields in current TextLineSpecPlainText instance
// ('plainTextLine') will be deleted and overwritten.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  incomingPlainTxtLine       *TextLineSpecPlainText
//     - A pointer to an instance of TextLineSpecPlainText. This
//       method will NOT change the data values of member variables
//       contained in this instance.
//
//       All data values in this TextLineSpecPlainText instance
//       will be copied to the current TextLineSpecPlainText
//       instance ('plainTextLine').
//
//       If 'incomingPlainTextLine' contains invalid member
//       variable data values, this method will return an error.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//                      containing error prefix and error context
//                      information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) CopyIn(
	incomingPlainTxtLine *TextLineSpecPlainText,
	errorPrefix interface{}) error {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText.CopyIn()",
		"")

	if err != nil {
		return err
	}

	err = textLineSpecPlainTextNanobot{}.ptr().
		copyIn(
			plainTextLine,
			incomingPlainTxtLine,
			ePrefix)

	return err
}

// CopyOut - Returns a deep copy of the current
// TextLineSpecPlainText instance.
//
// If the current TextLineSpecPlainText instance contains invalid
// member variables, this method will return an error.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  TextLineSpecPlainText
//     - If this method completes successfully and no errors are
//       encountered, this parameter will return a deep copy of the
//       current TextLineSpecPlainText instance.
//
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) CopyOut(
	errorPrefix interface{}) (
	TextLineSpecPlainText,
	error) {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText.CopyOut()",
		"")

	if err != nil {
		return TextLineSpecPlainText{}, err
	}

	var newPlainTxtLine TextLineSpecPlainText

	newPlainTxtLine,
		err = textLineSpecPlainTextNanobot{}.ptr().
		copyOut(
			plainTextLine,
			ePrefix.XCtx(
				"plainTextLine"))

	return newPlainTxtLine, err
}

// CopyOutITextLine - Returns a deep copy of the current
// TextLineSpecPlainText instance cast as a type
// ITextLineSpecification.
//
// This method fulfills requirements of ITextLineSpecification
// interface.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  ITextLineSpecification
//     - If this method completes successfully and no errors are
//       encountered, this parameter will return a deep copy of the
//       current TextLineSpecPlainText instance cast as an
//       ITextLineSpecification object.
//
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) CopyOutITextLine(
	errorPrefix interface{}) (
	ITextLineSpecification,
	error) {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText.CopyOutITextLine()",
		"")

	if err != nil {
		return ITextLineSpecification(&TextLineSpecPlainText{}), err
	}

	var newPlainTxtLine TextLineSpecPlainText

	newPlainTxtLine,
		err = textLineSpecPlainTextNanobot{}.ptr().
		copyOut(
			plainTextLine,
			ePrefix.XCtx(
				"plainTextLine"))

	return ITextLineSpecification(&newPlainTxtLine), err
}

// CopyOutPtr - Returns a pointer to a deep copy of the current
// TextLineSpecPlainText instance.
//
// If the current TextLineSpecPlainText instance contains invalid
// member variables, this method will return an error.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  *TextLineSpecPlainText
//     - If this method completes successfully and no errors are
//       encountered, this parameter will return a pointer to a
//       deep copy of the current TextLineSpecPlainText
//       instance.
//
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) CopyOutPtr(
	errorPrefix interface{}) (
	*TextLineSpecPlainText,
	error) {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText.CopyOutPtr()",
		"")

	if err != nil {
		return &TextLineSpecPlainText{}, err
	}

	var newPlainTxtLine TextLineSpecPlainText

	newPlainTxtLine,
		err = textLineSpecPlainTextNanobot{}.ptr().
		copyOut(
			plainTextLine,
			ePrefix.XCtx(
				"plainTextLine"))

	return &newPlainTxtLine, err
}

// Empty - Deletes and resets all the member variable data values
// contained in the current TextLineSpecPlainText instance to their
// initial or zero values.
//
// After calling 'Empty', the caller CAN NOT reuse this instance of
// TextLineSpecStandardLine. All the internal member variables
// will have to be re-initialized.
//
// This method fulfills requirements of the ITextLineSpecification
// interface.
//
func (plainTextLine *TextLineSpecPlainText) Empty() {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	textLineSpecPlainTextElectron{}.ptr().
		empty(plainTextLine)

	plainTextLine.lock.Unlock()

	plainTextLine.lock = nil
}

// Equal - Receives a pointer to another instance of
// TextLineSpecPlainText and proceeds to compare the member
// variables to those of the current TextLineSpecPlainText
// instance in order to determine if they are equivalent.
//
// A boolean flag showing the result of this comparison is
// returned. If the member variables of both instances are equal in
// all respects, this flag is set to 'true'. Otherwise, this method
// returns 'false'.
//
func (plainTextLine *TextLineSpecPlainText) Equal(
	incomingPlainTxtLine *TextLineSpecPlainText) bool {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	return textLineSpecPlainTextElectron{}.ptr().
		equal(
			plainTextLine,
			incomingPlainTxtLine)
}

// EqualITextLine - Receives an object implementing the
// ITextLineSpecification interface and proceeds to compare
// the member variables to those of the current
// TextLineSpecPlainText instance in order to determine if
// they are equivalent.
//
// A boolean flag showing the result of this comparison is
// returned. If the member variables from both instances are equal
// in all respects, this flag is set to 'true'. Otherwise, this
// method returns 'false'.
//
// This method is required by interface ITextLineSpecification.
//
func (plainTextLine *TextLineSpecPlainText) EqualITextLine(
	iTextLine ITextLineSpecification) bool {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	plainTxtLineTwo, ok :=
		iTextLine.(*TextLineSpecPlainText)

	if !ok {
		return false
	}

	return textLineSpecPlainTextElectron{}.ptr().
		equal(
			plainTextLine,
			plainTxtLineTwo)
}

// GetFormattedText - Returns the formatted text generated by this
// Text Line Specification for text display, file output and
// printing.
//
// This method is similar to TextLineSpecPlainText.String() with
// the sole difference being that this method returns an error.
//
// This method fulfills requirements of the ITextLineSpecification
// interface.
//
// Methods which return formatted text are listed as follows:
//  TextLineSpecPlainText.String()
//  TextLineSpecPlainText.TextBuilder()
//  TextLineSpecPlainText.GetFormattedText()
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//                      containing error prefix and error context
//                      information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  string
//     - The formatted text line generated by the current instance
//       of TextLineSpecPlainText.
//
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) GetFormattedText(
	errorPrefix interface{}) (
	string,
	error) {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText.GetFormattedText()",
		"")

	if err != nil {
		return "", err
	}

	return textLineSpecPlainTextNanobot{}.ptr().
		getFormattedText(
			plainTextLine,
			ePrefix.XCtx("plainTextLine"))
}

// GetLeftMarginStr - Returns a string containing the characters
// currently configured as the left margin of the Plain Text
// String.
//
// This method is similar to
// TextLineSpecPlainText.GetLeftMarginRunes(). The sole difference
// is that this method returns the left margin characters as a
// string.
//
func (plainTextLine *TextLineSpecPlainText) GetLeftMarginStr() string {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	if len(plainTextLine.leftMarginChars) == 0 {
		return ""
	}

	return string(plainTextLine.leftMarginChars)
}

// GetLeftMarginRunes - Returns a string containing the characters
// currently configured as the left margin of the Plain Text
// String.
//
// This method is similar to
// TextLineSpecPlainText.GetLeftMarginStr(). The sole difference
// is that this method returns the left margin characters as an
// array of runes.
//
func (plainTextLine *TextLineSpecPlainText) GetLeftMarginRunes() []rune {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	if len(plainTextLine.leftMarginChars) == 0 {
		return nil
	}

	var newLeftMarginChars []rune

	err :=
		strMechPreon{}.ptr().copyRuneArrays(
			&newLeftMarginChars,
			&plainTextLine.leftMarginChars,
			true,
			nil)

	if err != nil {
		return nil
	}

	return newLeftMarginChars
}

// GetLineTerminationChars - Returns a string representing
// the value of member variable, 'newLineChars'.
//
// By default, each line of text generated by
// TextLineSpecPlainText will be terminated with a new line
// character ('\n'). However, users have the option to override and
// modify this behavior by supplying an alternative character or
// characters to be used as a line termination sequence for the
// plain text line produced by the current TextLineSpecPlainText
// instance.
//
// This method returns the current value of 'newLineChars',
// otherwise known as the line termination sequence.
//
// To override, monitor or control the behavior of 'newLineChars',
// see the following methods:
//   TextLineSpecPlainText.GetLineTerminationRunes()
//   TextLineSpecPlainText.SetLineTerminationChars()
//   TextLineSpecPlainText.SetLineTerminationRunes()
//   TextLineSpecPlainText.TurnAutoLineTerminationOff()
//   TextLineSpecPlainText.TurnAutoLineTerminationOn()
//
func (plainTextLine *TextLineSpecPlainText) GetLineTerminationChars() string {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	if len(plainTextLine.newLineChars) == 0 {
		return ""
	}

	return string(plainTextLine.newLineChars)
}

// GetLineTerminationRunes - Returns an array runes representing
// the value of member variable, 'newLineChars'.
//
// By default, each line of text generated by
// TextLineSpecPlainText will be terminated with a new line
// character ('\n'). However, users have the option to override and
// modify this behavior by supplying an alternative character or
// characters to be used as a line termination sequence for the
// plain text line produced by the current TextLineSpecPlainText
// instance.
//
// This method returns the current value of 'newLineChars',
// otherwise known as the line termination sequence.
//
// To override, change or control the behavior of 'newLineChars',
// see the following methods:
//   TextLineSpecPlainText.GetLineTerminationChars()
//   TextLineSpecPlainText.SetLineTerminationChars()
//   TextLineSpecPlainText.SetLineTerminationRunes()
//   TextLineSpecPlainText.TurnAutoLineTerminationOff()
//   TextLineSpecPlainText.TurnAutoLineTerminationOn()
//
func (plainTextLine *TextLineSpecPlainText) GetLineTerminationRunes() []rune {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var newLineChars []rune

	err := strMechPreon{}.ptr().
		copyRuneArrays(
			&newLineChars,
			&plainTextLine.newLineChars,
			true,
			nil)

	if err != nil {
		return nil
	}

	return newLineChars
}

// GetRightMarginStr - Returns a string containing the characters
// currently configured as the right margin of the Plain Text
// String.
//
// This method is similar to
// TextLineSpecPlainText.GetRightMarginRunes(). The sole difference
// is that this method returns the right margin characters as a
// string.
//
func (plainTextLine *TextLineSpecPlainText) GetRightMarginStr() string {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	if len(plainTextLine.rightMarginChars) == 0 {
		return ""
	}

	return string(plainTextLine.rightMarginChars)
}

// GetRightMarginRunes - Returns a string containing the characters
// currently configured as the right margin of the Plain Text
// String.
//
// This method is similar to
// TextLineSpecPlainText.GetRightMarginStr(). The sole difference
// is that this method returns the right margin characters as an
// array of runes.
//
func (plainTextLine *TextLineSpecPlainText) GetRightMarginRunes() []rune {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	if len(plainTextLine.rightMarginChars) == 0 {
		return nil
	}

	var newRightMarginChars []rune

	err :=
		strMechPreon{}.ptr().copyRuneArrays(
			&newRightMarginChars,
			&plainTextLine.rightMarginChars,
			true,
			nil)

	if err != nil {
		return nil
	}

	return newRightMarginChars
}

// GetTextString - Returns string representing the core text
// characters for the plain text line.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// This method returns the text string element of the plain text
// line.
//
func (plainTextLine *TextLineSpecPlainText) GetTextString() string {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	return plainTextLine.textString
}

// GetTurnLineTerminatorOff - Returns the internal member variable
// 'turnLineTerminatorOff' as a boolean value.
//
// The 'turnLineTerminatorOff' flag controls whether a line
// termination character or characters will be automatically
// appended to each line of text produced by
// TextLineSpecPlainText.
//
// When the boolean flag 'turnLineTerminatorOff' is set to 'false',
// line terminators as defined by member variable 'newLineChars'
// WILL BE applied as a line termination sequence for the line of
// text produced by TextLineSpecPlainText. The default value for
// 'turnLineTerminatorOff' is 'false'.
//
// When this boolean value is set to 'true', it turns off or
// cancels the automatic generation of line terminators for each
// line of text produced by TextLineSpecPlainText.
//
// The default line terminator is the new line character ('\n')
// which is defined by member variable 'newLineChars'. However,
// this value is subject to user control and may be overridden
// by one or more characters.
//
func (plainTextLine *TextLineSpecPlainText) GetTurnLineTerminatorOff() bool {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	return plainTextLine.turnLineTerminatorOff
}

// IsValidInstance - Performs a diagnostic review of the data
// values encapsulated in the current TextLineSpecPlainText
// instance to determine if they are valid.
//
// If any data element evaluates as invalid, this method will
// return a boolean value of 'false'.
//
// If all data elements are determined to be valid, this method
// returns a boolean value of 'true'.
//
// This method is functionally equivalent to
// TextLineSpecPlainText.IsValidInstanceError() with the sole
// exception being that this method takes no input parameters and
// returns a boolean value.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  -- NONE --
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  bool
//     - If any of the internal member data variables contained in
//       the current instance of TextLineSpecPlainText are found
//       to be invalid, this method will return a boolean value of
//       'false'.
//
//       If all internal member data variables contained in the
//       current instance of TextLineSpecPlainText are found to be
//       valid, this method returns a boolean value of 'true'.
//
func (plainTextLine *TextLineSpecPlainText) IsValidInstance() bool {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	isValid,
		_ := textLineSpecPlainTextAtom{}.ptr().
		testValidityOfTextLineSpecPlainText(
			plainTextLine,
			nil)

	return isValid
}

// IsValidInstanceError - Performs a diagnostic review of the data
// values encapsulated in the current TextLineSpecPlainText
// instance to determine if they are valid.
//
// If any data element evaluates as invalid, this method will
// return an error.
//
// This method fulfills requirements of ITextLineSpecification
// interface.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  errorPrefix         interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If any of the internal member data variables contained in
//       the current instance of TextLineSpecPlainText are found
//       to be invalid, this method will return an error.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' (error prefix) will be inserted or
//       prefixed at the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) IsValidInstanceError(
	errorPrefix interface{}) error {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"IsValidInstanceError()",
		"")

	if err != nil {
		return err
	}

	_,
		err = textLineSpecPlainTextAtom{}.ptr().
		testValidityOfTextLineSpecPlainText(
			plainTextLine,
			ePrefix.XCtx(
				"plainTextLine"))

	return err
}

// NewDefault - Creates and returns a new instance of
// TextLineSpecPlainText using a combination of default values and
// the values passed through input parameters.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Within the returned new instance of TextLineSpecPlainText,
// several member variables will be automatically configured with
// default values.
//
// The left margin will be configured with the number of white
// space characters specified in parameter 'leftMarginSpaces'.
//
// Likewise, the right margin will be configured with the number of
// white space characters specified in parameter
// 'rightMarginSpaces'.
//
// Each line of text produced by the returned instance of
// TextLineSpecPlainText will be automatically terminated with a
// new line character ('\n').
//
//
// ------------------------------------------------------------------------
//
// Default Values
//
// This method will automatically set the following default values:
//
//  leftMarginChars
//     - Defaults the left margin to the number of white space
//       characters (' ') specified by the integer value passed
//       through input parameter 'leftMarginSpaces'.
//
//
//  rightMarginChars
//     - Defaults the right margin to the number of white space
//       characters (' ') specified by the integer value passed
//       through input parameter 'rightMarginSpaces'.
//
//
//  newLineChars
//     - Defaults the new line character to '\n'.
//
//
//  turnLineTerminatorOff
//     - Defaults to a value of 'false'. This means that the new
//       line character ('\n') will be applied to each line of text
//       produced by the returned instance of TextLineSpecPlainText.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  leftMarginSpaces           int
//     - Controls the number of white space characters (' ') which
//       will comprise the left margin for the returned instance of
//       TextLineSpecPlainText.
//
//       If the value of 'leftMarginSpaces' is less than zero, an
//       error will be returned.
//
//       If the value of 'leftMarginSpaces' is greater than
//       one-million (1,000,000), an error will be returned.
//
//
//  rightMarginSpaces           int
//     - Controls the number of white space characters (' ') which
//       will comprise the right margin for the returned instance
//       of TextLineSpecPlainText.
//
//       If the value of 'rightMarginSpaces' is less than zero, an
//       error will be returned.
//
//       If the value of 'rightMarginSpaces' is greater than
//       one-million (1,000,000), an error will be returned.
//
//
//  textString                 string
//     - A string of text which will be used to configure the text
//       characters generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, an error will be returned.
//
//       If this string contains more than one-million characters,
//       an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  TextLineSpecPlainText
//     - If this method completes successfully, a new, fully
//       populated instance of TextLineSpecPlainText will be
//       returned.
//
//
//  error
//     - If input parameter 'plainTextLine' is judged to be valid
//       in all respects, this return parameter will be set to
//       'nil'.
//
//       If an error message is returned, the text value for input
//       parameter 'errPrefDto' (error prefix) will be prefixed or
//       attached at the beginning of the error message.
//
func (plainTextLine TextLineSpecPlainText) NewDefault(
	leftMarginSpaces int,
	rightMarginSpaces int,
	textString string,
	errorPrefix interface{}) (
	TextLineSpecPlainText,
	error) {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error
	newPlainTxtLine := TextLineSpecPlainText{}

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"NewDefault()",
		"")

	if err != nil {
		return newPlainTxtLine, err
	}

	err = textLineSpecPlainTextNanobot{}.ptr().
		setDefaultPlainTextSpec(
			&newPlainTxtLine,
			leftMarginSpaces,
			rightMarginSpaces,
			textString,
			ePrefix.XCtx("newPlainTxtLine"))

	return newPlainTxtLine, err
}

// NewPlainTextAllParms - Creates and returns a new instance of
// TextLineSpecPlainText using the values passed through
// input parameters.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Left and right margins consist of zero or more characters
// customized and provided by the calling function.
//
// This method is similar to
// TextLineSpecPlainText.NewPlainTextRunes() with the sole
// exception being that this method receives input parameter
// 'textString' as a string instead of an array of runes.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  leftMarginRunes            []rune
//     - An array of runes containing the text characters which
//       will be used to construct the left margin of the plain
//       text line generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'leftMarginRunes' array exceeds a length of
//       one-million array elements, an error will be returned. If
//       any of the array elements has a rune value of zero ('0'),
//       an error will be returned.
//
//
//  rightMarginRunes           []rune
//     - An array of runes containing the text characters which
//       will be used to construct the right margin of the plain
//       text line generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'rightMarginRunes' array exceeds a length of
//       one-million array elements, an error will be returned. If
//       any of the array elements has a rune value of zero ('0'),
//       an error will be returned.
//
//
//  textString                 string
//     - A string of text which will be used to configure the text
//       characters generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, an error will be returned.
//
//       If this string contains more than one-million characters,
//       an error will be returned.
//
//
//  newLineChars               []rune
//     - An array of runes containing the character or characters
//       used to terminate each line of text generated by the
//       current instance of TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       rune array, it will be reset to the default new line value
//       ('\n').
//
//       If the rune array contains invalid zero rune values, an
//       error will be returned.
//
//
//  turnLineTerminatorOff      bool
//     - The 'turnLineTerminatorOff' flag controls whether a line
//       termination character or characters will be automatically
//       appended to each line of text produced by
//       TextLineSpecPlainText.
//
//       When the boolean flag 'turnLineTerminatorOff' is set to
//       'false', line terminators as defined by parameter
//       'newLineChars' WILL BE applied as a line termination
//       sequence for each line of text produced by
//       TextLineSpecPlainText.
//
//       When this boolean value is set to 'true', it turns off or
//       cancels the automatic generation of line terminators for
//       each line of text produced by TextLineSpecPlainText.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  TextLineSpecPlainText
//     - If this method completes successfully, a new and fully
//       populated instance of TextLineSpecPlainText will be
//       returned.
//
//
//  error
//     - If input parameter 'plainTextLine' is judged to be valid
//       in all respects, this return parameter will be set to
//       'nil'.
//
//       If an error message is returned, the text value for input
//       parameter 'errPrefDto' (error prefix) will be prefixed or
//       attached at the beginning of the error message.
//
func (plainTextLine TextLineSpecPlainText) NewPlainTextAllParms(
	leftMarginChars []rune,
	rightMarginChars []rune,
	textString string,
	newLineChars []rune,
	turnLineTerminatorOff bool,
	errorPrefix interface{}) (
	TextLineSpecPlainText,
	error) {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	newPlainTxtLine := TextLineSpecPlainText{}

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"NewPlainTextAllParms()",
		"")

	if err != nil {
		return newPlainTxtLine, err
	}

	err = textLineSpecPlainTextAtom{}.ptr().
		setPlainTextSpec(
			&newPlainTxtLine,
			leftMarginChars,
			rightMarginChars,
			textString,
			newLineChars,
			turnLineTerminatorOff,
			ePrefix)

	return newPlainTxtLine, err
}

// NewPlainTextRunes - Creates and returns a new instance of
// TextLineSpecPlainText using the values passed through
// input parameters.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Left and right margins consist of zero or more characters
// customized and provided by the calling function.
//
// This method is similar to
// TextLineSpecPlainText.NewPlainTextAllParms() with the sole exception
// being that this method receives input parameter 'textRunes' as
// an array of runes instead of a string.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  leftMarginRunes            []rune
//     - An array of runes containing the text characters which
//       will be used to construct the left margin of the plain
//       text line generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'leftMarginRunes' array exceeds a length of
//       one-million array elements, an error will be returned. If
//       any of the array elements has a rune value of zero ('0'),
//       an error will be returned.
//
//
//  rightMarginRunes           []rune
//     - An array of runes containing the text characters which
//       will be used to construct the right margin of the plain
//       text line generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'rightMarginRunes' array exceeds a length of
//       one-million array elements, an error will be returned. If
//       any of the array elements has a rune value of zero ('0'),
//       an error will be returned.
//
//
//  textRunes                []rune
//     - An array of runes which will be used to configure the text
//       characters generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, an error will be returned.
//
//       If this array contains more than one-million characters,
//       an error will be returned.
//
//
//  newLineChars               []rune
//     - An array of runes containing the character or characters
//       used to terminate each line of text generated by the
//       current instance of TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       rune array, it will be reset to the default new line value
//       ('\n').
//
//       If the rune array contains invalid zero rune values, an
//       error will be returned.
//
//
//  turnLineTerminatorOff      bool
//     - The 'turnLineTerminatorOff' flag controls whether a line
//       termination character or characters will be automatically
//       appended to each line of text produced by
//       TextLineSpecPlainText.
//
//       When the boolean flag 'turnLineTerminatorOff' is set to
//       'false', line terminators as defined by parameter
//       'newLineChars' WILL BE applied as a line termination
//       sequence for each line of text produced by
//       TextLineSpecPlainText.
//
//       When this boolean value is set to 'true', it turns off or
//       cancels the automatic generation of line terminators for
//       each line of text produced by TextLineSpecStandardLine.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  TextLineSpecPlainText
//     - If this method completes successfully, a new and fully
//       populated instance of TextLineSpecPlainText will be
//       returned.
//
//
//  error
//     - If input parameter 'plainTextLine' is judged to be valid
//       in all respects, this return parameter will be set to
//       'nil'.
//
//       If an error message is returned, the text value for input
//       parameter 'errPrefDto' (error prefix) will be prefixed or
//       attached at the beginning of the error message.
//
func (plainTextLine TextLineSpecPlainText) NewPlainTextRunes(
	leftMarginChars []rune,
	rightMarginChars []rune,
	textRunes []rune,
	newLineChars []rune,
	turnLineTerminatorOff bool,
	errorPrefix interface{}) (
	TextLineSpecPlainText,
	error) {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"NewPlainTextRunes()",
		"")

	if err != nil {
		return TextLineSpecPlainText{}, err
	}

	newPlainTxtLine := TextLineSpecPlainText{}

	err = textLineSpecPlainTextNanobot{}.ptr().
		setPlainTextSpecRunes(
			&newPlainTxtLine,
			leftMarginChars,
			rightMarginChars,
			textRunes,
			newLineChars,
			turnLineTerminatorOff,
			ePrefix)

	return newPlainTxtLine, err
}

// NewPlainTextStrings - Creates and returns a new instance of
// TextLineSpecPlainText using the values passed through
// input parameters.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Left and right margins consist of zero or more characters
// customized and provided by the calling function.
//
// This method is similar to
// TextLineSpecPlainText.NewPlainTextRunes() with the sole
// exception being that this method receives input parameters as
// strings instead of rune arrays.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  leftMarginChars            string
//     - A string containing the text characters which will be used
//       to construct the left margin of the plain text line
//       generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'leftMarginChars' string length exceeds one-million
//       characters, an error will be returned.
//
//
//  rightMarginChars           string
//     - A string containing the text characters which will be used
//       to construct the right margin of the plain text line
//       generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, NO error will be generated and the existing right
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'rightMarginChars' string length exceeds one-million
//       characters, an error will be returned.
//
//
//  textString                 string
//     - A string of text which will be used to configure the text
//       characters generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, an error will be returned.
//
//       If this string contains more than one-million characters,
//       an error will be returned.
//
//
//  newLineChars               string
//     - A string containing the one or more characters used to
//       terminate each line of text generated by the current
//       instance of TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, it will be reset to the default new line value
//       ("\n").
//
//
//  turnLineTerminatorOff      bool
//     - The 'turnLineTerminatorOff' flag controls whether a line
//       termination character or characters will be automatically
//       appended to each line of text produced by
//       TextLineSpecPlainText.
//
//       When the boolean flag 'turnLineTerminatorOff' is set to
//       'false', line terminators as defined by parameter
//       'newLineChars' WILL BE applied as a line termination
//       sequence for each line of text produced by
//       TextLineSpecPlainText.
//
//       When this boolean value is set to 'true', it turns off or
//       cancels the automatic generation of line terminators for
//       each line of text produced by TextLineSpecStandardLine.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  TextLineSpecPlainText
//     - If this method completes successfully, a new and fully
//       populated instance of TextLineSpecPlainText will be
//       returned.
//
//
//  error
//     - If input parameter 'plainTextLine' is judged to be valid
//       in all respects, this return parameter will be set to
//       'nil'.
//
//       If an error message is returned, the text value for input
//       parameter 'errPrefDto' (error prefix) will be prefixed or
//       attached at the beginning of the error message.
//
func (plainTextLine TextLineSpecPlainText) NewPlainTextStrings(
	leftMarginChars string,
	rightMarginChars string,
	textString string,
	newLineChars string,
	turnLineTerminatorOff bool,
	errorPrefix interface{}) (
	TextLineSpecPlainText,
	error) {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"NewPlainTextStrings()",
		"")

	if err != nil {
		return TextLineSpecPlainText{}, err
	}

	newPlainTxtLine := TextLineSpecPlainText{}

	err = textLineSpecPlainTextNanobot{}.ptr().
		setPlainTextSpecStrings(
			&newPlainTxtLine,
			leftMarginChars,
			rightMarginChars,
			textString,
			newLineChars,
			turnLineTerminatorOff,
			ePrefix)

	return newPlainTxtLine, err
}

// NewPtrDefault - Creates and returns a pointer to a new instance
// of TextLineSpecPlainText using a combination of default values
// and the values passed through input parameters.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Within the returned new instance of TextLineSpecPlainText,
// several member variables will be automatically configured with
// default values.
//
// The left margin will be configured with the number of white
// space characters specified in parameter 'leftMarginSpaces'.
//
// Likewise, the right margin will be configured with the number of
// white space characters specified in parameter
// 'rightMarginSpaces'.
//
// The line of text produced by the returned instance of
// TextLineSpecPlainText will be automatically terminated with a
// new line character ('\n').
//
//
// ------------------------------------------------------------------------
//
// Default Values
//
// This method will automatically set the following default values:
//
//  leftMarginChars
//     - Defaults the left margin to the number of white space
//       characters (' ') specified by the integer value passed
//       through input parameter 'leftMarginSpaces'.
//
//
//  rightMarginChars
//     - Defaults the right margin to the number of white space
//       characters (' ') specified by the integer value passed
//       through input parameter 'rightMarginSpaces'.
//
//
//  newLineChars
//     - Defaults the new line character to '\n'.
//
//
//  turnLineTerminatorOff
//     - Defaults to a value of 'false'. This means that the new
//       line character ('\n') WILL BE applied to the line of text
//       produced by the returned instance of TextLineSpecPlainText.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  leftMarginSpaces           int
//     - Controls the number of white space characters (' ') which
//       will comprise the left margin for the returned instance of
//       TextLineSpecPlainText.
//
//       If the value of 'leftMarginSpaces' is less than zero, an
//       error will be returned.
//
//       If the value of 'leftMarginSpaces' is greater than
//       one-million (1,000,000), an error will be returned.
//
//
//  rightMarginSpaces           int
//     - Controls the number of white space characters (' ') which
//       will comprise the right margin for the returned instance
//       of TextLineSpecPlainText.
//
//       If the value of 'rightMarginSpaces' is less than zero, an
//       error will be returned.
//
//       If the value of 'rightMarginSpaces' is greater than
//       one-million (1,000,000), an error will be returned.
//
//
//  textString                 string
//     - A string of text which will be used to configure the text
//       characters generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, an error will be returned.
//
//       If this string contains more than one-million characters,
//       an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  *TextLineSpecPlainText
//     - If this method completes successfully, a pointer to a new,
//       fully populated instance of TextLineSpecPlainText will be
//       returned.
//
//
//  error
//     - If input parameter 'plainTextLine' is judged to be valid
//       in all respects, this return parameter will be set to
//       'nil'.
//
//       If an error message is returned, the text value for input
//       parameter 'errPrefDto' (error prefix) will be prefixed or
//       attached at the beginning of the error message.
//
func (plainTextLine TextLineSpecPlainText) NewPtrDefault(
	leftMarginSpaces int,
	rightMarginSpaces int,
	textString string,
	errorPrefix interface{}) (
	*TextLineSpecPlainText,
	error) {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error
	newPlainTxtLine := TextLineSpecPlainText{}

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"NewPtrDefault()",
		"")

	if err != nil {
		return &newPlainTxtLine, err
	}

	err = textLineSpecPlainTextNanobot{}.ptr().
		setDefaultPlainTextSpec(
			&newPlainTxtLine,
			leftMarginSpaces,
			rightMarginSpaces,
			textString,
			ePrefix.XCtx("newPlainTxtLine"))

	return &newPlainTxtLine, err
}

// NewPtrPlainText - Creates and returns a pointer to a new
// instance of TextLineSpecPlainText using the values passed
// through input parameters.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Left and right margins consist of zero or more characters
// customized and provided by the calling function.
//
// This method is similar to
// TextLineSpecPlainText.NewPtrPlainTextRunes() with the sole
// exception being that this method receives input parameter
// 'textString' as a string instead of an array of runes.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  leftMarginRunes            []rune
//     - An array of runes containing the text characters which
//       will be used to construct the left margin of the plain
//       text line generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'leftMarginRunes' array exceeds a length of
//       one-million array elements, an error will be returned. If
//       any of the array elements has a rune value of zero ('0'),
//       an error will be returned.
//
//
//  rightMarginRunes           []rune
//     - An array of runes containing the text characters which
//       will be used to construct the right margin of the plain
//       text line generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'rightMarginRunes' array exceeds a length of
//       one-million array elements, an error will be returned. If
//       any of the array elements has a rune value of zero ('0'),
//       an error will be returned.
//
//
//  textString                 string
//     - A string of text which will be used to configure the text
//       characters generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, an error will be returned.
//
//       If this string contains more than one-million characters,
//       an error will be returned.
//
//
//  newLineChars               []rune
//     - An array of runes containing the character or characters
//       used to terminate each line of text generated by the
//       current instance of TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       rune array, it will be reset to the default new line value
//       ('\n').
//
//       If the rune array contains invalid zero rune values, an
//       error will be returned.
//
//
//  turnLineTerminatorOff      bool
//     - The 'turnLineTerminatorOff' flag controls whether a line
//       termination character or characters will be automatically
//       appended to each line of text produced by
//       TextLineSpecPlainText.
//
//       When the boolean flag 'turnLineTerminatorOff' is set to
//       'false', line terminators as defined by parameter
//       'newLineChars' WILL BE applied as a line termination
//       sequence for each line of text produced by
//       TextLineSpecPlainText.
//
//       When this boolean value is set to 'true', it turns off or
//       cancels the automatic generation of line terminators for
//       each line of text produced by TextLineSpecStandardLine.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  *TextLineSpecPlainText
//     - If this method completes successfully, a pointer to a new,
//       fully populated instance of TextLineSpecPlainText will be
//       returned.
//
//
//  error
//     - If input parameter 'plainTextLine' is judged to be valid
//       in all respects, this return parameter will be set to
//       'nil'.
//
//       If an error message is returned, the text value for input
//       parameter 'errPrefDto' (error prefix) will be prefixed or
//       attached at the beginning of the error message.
//
func (plainTextLine TextLineSpecPlainText) NewPtrPlainText(
	leftMarginChars []rune,
	rightMarginChars []rune,
	textString string,
	newLineChars []rune,
	turnLineTerminatorOff bool,
	errorPrefix interface{}) (
	*TextLineSpecPlainText,
	error) {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	newPlainTxtLine := TextLineSpecPlainText{}

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"NewPtrPlainText()",
		"")

	if err != nil {
		return &newPlainTxtLine, err
	}

	err = textLineSpecPlainTextAtom{}.ptr().
		setPlainTextSpec(
			&newPlainTxtLine,
			leftMarginChars,
			rightMarginChars,
			textString,
			newLineChars,
			turnLineTerminatorOff,
			ePrefix)

	return &newPlainTxtLine, err
}

// NewPtrPlainTextRunes - Creates and returns a new instance of
// TextLineSpecPlainText using the values passed through
// input parameters.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Left and right margins consist of zero or more characters
// customized and provided by the calling function.
//
// This method is similar to
// TextLineSpecPlainText.NewPtrPlainText() with the sole exception
// being that this method receives input parameter 'textRunes' as
// an array of runes instead of a string.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  leftMarginRunes            []rune
//     - An array of runes containing the text characters which
//       will be used to construct the left margin of the plain
//       text line generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'leftMarginRunes' array exceeds a length of
//       one-million array elements, an error will be returned. If
//       any of the array elements has a rune value of zero ('0'),
//       an error will be returned.
//
//
//  rightMarginRunes           []rune
//     - An array of runes containing the text characters which
//       will be used to construct the right margin of the plain
//       text line generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'rightMarginRunes' array exceeds a length of
//       one-million array elements, an error will be returned. If
//       any of the array elements has a rune value of zero ('0'),
//       an error will be returned.
//
//
//  textRunes                []rune
//     - An array of runes which will be used to configure the text
//       characters generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, an error will be returned.
//
//       If this array contains more than one-million characters,
//       an error will be returned.
//
//
//  newLineChars               []rune
//     - An array of runes containing the character or characters
//       used to terminate each line of text generated by the
//       current instance of TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       rune array, it will be reset to the default new line value
//       ('\n').
//
//       If the rune array contains invalid zero rune values, an
//       error will be returned.
//
//
//  turnLineTerminatorOff      bool
//     - The 'turnLineTerminatorOff' flag controls whether a line
//       termination character or characters will be automatically
//       appended to each line of text produced by
//       TextLineSpecPlainText.
//
//       When the boolean flag 'turnLineTerminatorOff' is set to
//       'false', line terminators as defined by parameter
//       'newLineChars' WILL BE applied as a line termination
//       sequence for each line of text produced by
//       TextLineSpecPlainText.
//
//       When this boolean value is set to 'true', it turns off or
//       cancels the automatic generation of line terminators for
//       each line of text produced by TextLineSpecStandardLine.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  *TextLineSpecPlainText
//     - If this method completes successfully, a pointer to a new,
//       fully populated instance of TextLineSpecPlainText will be
//       returned.
//
//
//  error
//     - If input parameter 'plainTextLine' is judged to be valid
//       in all respects, this return parameter will be set to
//       'nil'.
//
//       If an error message is returned, the text value for input
//       parameter 'errPrefDto' (error prefix) will be prefixed or
//       attached at the beginning of the error message.
//
func (plainTextLine TextLineSpecPlainText) NewPtrPlainTextRunes(
	leftMarginChars []rune,
	rightMarginChars []rune,
	textRunes []rune,
	newLineChars []rune,
	turnLineTerminatorOff bool,
	errorPrefix interface{}) (
	*TextLineSpecPlainText,
	error) {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	newPlainTxtLine := TextLineSpecPlainText{}

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"NewPtrPlainTextRunes()",
		"")

	if err != nil {
		return &newPlainTxtLine, err
	}

	err = textLineSpecPlainTextNanobot{}.ptr().
		setPlainTextSpecRunes(
			&newPlainTxtLine,
			leftMarginChars,
			rightMarginChars,
			textRunes,
			newLineChars,
			turnLineTerminatorOff,
			ePrefix)

	return &newPlainTxtLine, err
}

// NewPtrPlainTextStrings - Creates and returns a pointer to a new
// instance of TextLineSpecPlainText using the values passed
// through input parameters.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Left and right margins consist of zero or more characters
// customized and provided by the calling function.
//
// This method is similar to
// TextLineSpecPlainText.NewPlainTextRunes() with the sole
// exception being that this method receives input parameters as
// strings instead of rune arrays.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  leftMarginChars            string
//     - A string containing the text characters which will be used
//       to construct the left margin of the plain text line
//       generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'leftMarginChars' string length exceeds one-million
//       characters, an error will be returned.
//
//
//  rightMarginChars           string
//     - A string containing the text characters which will be used
//       to construct the right margin of the plain text line
//       generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, NO error will be generated and the existing right
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'rightMarginChars' string length exceeds one-million
//       characters, an error will be returned.
//
//
//  textString                 string
//     - A string of text which will be used to configure the text
//       characters generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, an error will be returned.
//
//       If this string contains more than one-million characters,
//       an error will be returned.
//
//
//  newLineChars               string
//     - A string containing the one or more characters used to
//       terminate each line of text generated by the current
//       instance of TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, it will be reset to the default new line value
//       ("\n").
//
//
//  turnLineTerminatorOff      bool
//     - The 'turnLineTerminatorOff' flag controls whether a line
//       termination character or characters will be automatically
//       appended to each line of text produced by
//       TextLineSpecPlainText.
//
//       When the boolean flag 'turnLineTerminatorOff' is set to
//       'false', line terminators as defined by parameter
//       'newLineChars' WILL BE applied as a line termination
//       sequence for each line of text produced by
//       TextLineSpecPlainText.
//
//       When this boolean value is set to 'true', it turns off or
//       cancels the automatic generation of line terminators for
//       each line of text produced by TextLineSpecStandardLine.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  *TextLineSpecPlainText
//     - If this method completes successfully, a pointer to a new,
//       fully populated instance of TextLineSpecPlainText will be
//       returned.
//
//
//  error
//     - If input parameter 'plainTextLine' is judged to be valid
//       in all respects, this return parameter will be set to
//       'nil'.
//
//       If an error message is returned, the text value for input
//       parameter 'errPrefDto' (error prefix) will be prefixed or
//       attached at the beginning of the error message.
//
func (plainTextLine TextLineSpecPlainText) NewPtrPlainTextStrings(
	leftMarginChars string,
	rightMarginChars string,
	textString string,
	newLineChars string,
	turnLineTerminatorOff bool,
	errorPrefix interface{}) (
	*TextLineSpecPlainText,
	error) {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	newPlainTxtLine := TextLineSpecPlainText{}

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"NewPtrPlainTextStrings()",
		"")

	if err != nil {
		return &newPlainTxtLine, err
	}

	err = textLineSpecPlainTextNanobot{}.ptr().
		setPlainTextSpecStrings(
			&newPlainTxtLine,
			leftMarginChars,
			rightMarginChars,
			textString,
			newLineChars,
			turnLineTerminatorOff,
			ePrefix)

	return &newPlainTxtLine, err
}

// Read - Implements the io.Reader interface for type
// TextLineSpecPlainText.
//
// The formatted text line string generated by the current
// instance of TextLineSpecPlainText will be written to the
// byte buffer 'p'. If the length of 'p' is less than the length
// of the formatted text line string, multiple calls to this method
// will write the remaining unread characters to the byte buffer
// 'p'.
//
// Read() supports buffered 'read' operations.
//
// This method reads up to len(p) bytes into p. It returns the
// number of bytes read (0 <= n <= len(p)) and any error
// encountered. Even if read returns n < len(p), it may use all
// of p as scratch space during the call.
//
// If some data is available but not len(p) bytes, readBytes()
// conventionally returns what is available instead of waiting
// for more.
//
// When this method encounters an error or end-of-file condition
// after successfully reading n > 0 bytes, it returns the number
// of bytes read. It may return the (non-nil) error from the same
// call or return the error (and n == 0) from a subsequent call.
// An instance of this general case is that a Reader returning
// a non-zero number of bytes at the end of the input stream may
// return either err == EOF or err == nil. The next read operation
// should return 0, EOF.
//
// Callers should always process the n > 0 bytes returned before
// considering the error err. Doing so correctly handles I/O errors
// that happen after reading some bytes and also both of the
// allowed EOF behaviors.
//
// The last read operation performed on the formatted text string
// will always return n==0 and err==io.EOF.
//
// This method fulfills requirements of the ITextLineSpecification
// interface.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  p                          []byte
//     - The byte buffer into which the formatted text line string
//       generated by the current TextLineSpecPlainText instance
//       will be written.
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  n                          int
//     - The number of bytes written to byte buffer 'p'.
//
//       Read() reads up to len(p) bytes into p. It returns
//       the number of bytes read (0 <= n <= len(p)) and any error
//       encountered. Even if Read() returns n < len(p), it may use
//       all of 'p' as scratch space during the call. If some
//       data is available but not len(p) bytes, Read()
//       conventionally returns what is available instead of
//       waiting for more.
//
//
//  err                        error
//     - If this method completes successfully, this returned error
//       Type is set equal to 'nil'. If errors are encountered
//       during processing, the returned error Type will
//       encapsulate an error message.
//
//       When Read() encounters an error or end-of-file condition
//       after successfully reading n > 0 bytes, it returns the
//       number of bytes read. It may return the (non-nil) error
//       from the same call or return the error (and n == 0) from
//       a subsequent call. An instance of this general case is
//       that a Reader returning a non-zero number of bytes at the
//       end of the input stream may return either err == EOF or
//       err == nil. The next read operation should return 0, EOF.
//
//
// ------------------------------------------------------------------------
//
// Usage Examples:
//
//  Example # 1
//
//  p := make([]byte, 50)
//
//  var n, readBytesCnt int
//  sb := strings.Builder{}
//
//  for {
//
//    n,
//    err = plainTextLine01.Read(p)
//
//    if n == 0 {
//      break
//    }
//
//    sb.Write(p[:n])
//    readBytesCnt += n
//  }
//
//  if err != nil &&
//    err != io.EOF {
//     return fmt.Error(
//      "Error Returned From plainTextLine01.Read(p)\n"+
//      "Error = \n%v\n",
//       err.Error())
//  }
//
//  fmt.Printf("Text Line String: %s\n",
//                sb.String())
//
//  fmt.Printf("Number of bytes Read: %v\n",
//                readBytesCnt)
//
//  Example # 2
//
//  p := make([]byte, 50)
//
//  var n, readBytesCnt int
//  var actualStr string
//
//  for {
//
//    n,
//    err = plainTextLine01.Read(p)
//
//    if n == 0 {
//      break
//    }
//
//    actualStr += string(p[:n])
//    readBytesCnt += n
//  }
//
//  if err != nil &&
//    err != io.EOF {
//     return fmt.Error(
//      "Error Returned From plainTextLine01.Read(p)\n"+
//      "Error = \n%v\n",
//       err.Error())
//  }
//
//  fmt.Printf("Text Line String: %v\n",
//                actualStr)
//
//  fmt.Printf("Number of bytes Read: %v\n",
//                readBytesCnt)
//
func (plainTextLine *TextLineSpecPlainText) Read(
	p []byte) (
	n int,
	err error) {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	ePrefix := ePref.ErrPrefixDto{}.NewEPrefCtx(
		"TextLineSpecPlainText.Read()",
		"")

	if plainTextLine.textLineReader == nil {

		var formattedText string

		formattedText,
			err = textLineSpecPlainTextNanobot{}.ptr().
			getFormattedText(
				plainTextLine,
				ePrefix.XCtx("plainTextLine"))

		if err != nil {
			return n, err
		}

		plainTextLine.textLineReader =
			strings.NewReader(formattedText)

		if plainTextLine.textLineReader == nil {
			err = fmt.Errorf("%v\n"+
				"Error: strings.NewReader(formattedText)\n"+
				"returned a nil pointer.\n"+
				"plainTextLine.textLineReader == nil\n",
				ePrefix.XCtxEmpty().String())

			return n, err
		}
	}

	n,
		err = textSpecificationAtom{}.ptr().
		readBytes(
			plainTextLine.textLineReader,
			p,
			ePrefix.XCtx(
				"p -> plainTextLine.textLineReader"))

	if err == io.EOF {

		plainTextLine.textLineReader = nil

	}

	return n, err
}

// ReaderInitialize - This method will reset the internal member
// variable 'TextLineSpecPlainText.textLineReader' to its initial
// zero state of 'nil'. Effectively, this resets the internal
// strings.Reader object for use in future read operations.
//
// This method is rarely used or needed. It provides a means of
// reinitializing the internal strings.Reader object in case an
// error occurs during a read operation initiated by method
// TextLineSpecPlainText.Read().
//
// Calling this method cleans up the residue from an aborted read
// operation and prepares the strings.Reader object for future read
// operations.
//
// If any errors are returned by method
// TextLineSpecPlainText.Read() which are NOT equal to io.EOF, call
// this method, TextLineSpecPlainText.ReaderInitialize(), to reset
// and prepare the internal reader for future read operations.
//
// This method fulfills requirements of the ITextLineSpecification
// interface.
//
func (plainTextLine *TextLineSpecPlainText) ReaderInitialize() {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	plainTextLine.textLineReader = nil

	return
}

// SetLeftMarginChars - Sets the left margin characters for the
// current TextLineSpecPlainText.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Left and right margins consist of zero or more characters
// customized and provided by the calling function.
//
// This method sets the left margin of the plain text line.
//
// This method is similar to
// TextLineSpecPlainText.SetLeftMarginRunes() with the sole
// exception being that this method receives a string instead of an
// array of runes.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  leftMarginChars            string
//     - A string of text characters which will be used to
//       construct the left margin of the plain text line
//       generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'leftMarginChars' string exceeds one-million
//       characters, an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) SetLeftMarginChars(
	leftMarginChars string,
	errorPrefix interface{}) error {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"SetLeftMarginChars()",
		"")

	if err != nil {
		return err
	}

	lenLeftMargin := len(leftMarginChars)

	if lenLeftMargin > 1000000 {

		err = fmt.Errorf("%v\n"+
			"Error: The 'leftMarginsChars' string exceeds\n"+
			"one-million (1,000,000) characters in length.\n"+
			"Length of 'leftMarginsChars' = '%v'\n",
			ePrefix.String(),
			lenLeftMargin)

		return err
	}

	if lenLeftMargin == 0 {
		plainTextLine.leftMarginChars = nil

		return err
	}

	leftMarginRunes := []rune(leftMarginChars)

	err = strMechPreon{}.ptr().
		copyRuneArrays(
			&plainTextLine.leftMarginChars,
			&leftMarginRunes,
			true,
			ePrefix.XCtx(
				"leftMarginRunes ->"+
					"plainTextLine.leftMarginChars"))

	return err
}

// SetLeftMarginRunes - Sets the left margin characters for the
// current TextLineSpecPlainText.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Left and right margins consist of zero or more characters
// customized and provided by the calling function.
//
// This method sets the left margin of the plain text line using
// an array of runes passed as input parameter.
//
// This method is similar to
// TextLineSpecPlainText.SetLeftMarginChars() with the sole
// exception being that this method receives an array of runes
// instead of a string.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  leftMarginRunes            []rune
//     - An array of runes containing the text characters which
//       will be used to construct the left margin of the plain
//       text line generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'leftMarginRunes' array exceeds a length of
//       one-million array elements, an error will be returned. If
//       any of the array elements has a rune value of zero ('0'),
//       an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) SetLeftMarginRunes(
	leftMarginRunes []rune,
	errorPrefix interface{}) error {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"SetLeftMarginRunes()",
		"")

	if err != nil {
		return err
	}

	lenLeftMargin := len(leftMarginRunes)

	if lenLeftMargin > 1000000 {
		err = fmt.Errorf("%v\n"+
			"Error: The 'leftMarginsRunes' rune array exceeds\n"+
			"one-million (1,000,000) characters in length.\n"+
			"Length of 'leftMarginsRunes' = '%v'\n",
			ePrefix.String(),
			lenLeftMargin)

		return err
	}

	if lenLeftMargin == 0 {
		plainTextLine.leftMarginChars = nil

		return err
	}

	sMechPreon := strMechPreon{}

	_,
		err = sMechPreon.testValidityOfRuneCharArray(
		leftMarginRunes,
		ePrefix.XCtx(
			"leftMarginRunes invalid!"))

	if err != nil {
		return err
	}

	err = sMechPreon.
		copyRuneArrays(
			&plainTextLine.leftMarginChars,
			&leftMarginRunes,
			true,
			ePrefix.XCtx(
				"leftMarginRunes->"+
					"plainTextLine.leftMarginChars"))

	return err
}

// SetLineTerminationChars - By default, the line termination
// character for plain text lines produced and applied by this
// plain text line specification is the new line character, '\n'.
// However, users have the option of substituting a character or
// series of characters for the line termination sequence using
// this method.
//
// This method will receive a string as input and apply the
// characters in that string as the line termination sequence for
// this instance of TextLineSpecPlainText.
//
// If input parameter 'lineTerminationChars' is submitted as an
// empty string, this method will take no action and exit.
//
// By default, the TextLineSpecPlainText type applies the line
// termination characters to the plain text line generated for text
// display, file output or printing. However, users have the option
// of monitoring and controlling the application of text line
// terminators by calling the following methods:
//
//   TextLineSpecPlainText.GetLineTerminationChars()
//   TextLineSpecPlainText.GetLineTerminationRunes()
//   TextLineSpecPlainText.SetLineTerminationChars()
//   TextLineSpecPlainText.SetLineTerminationChars()
//   TextLineSpecPlainText.SetLineTerminationRunes()
//   TextLineSpecPlainText.TurnAutoLineTerminationOff()
//   TextLineSpecPlainText.TurnAutoLineTerminationOn()
//
// This method is similar to
// TextLineSpecPlainText.SetLineTerminationRunes() with sole
// exception being that this method receives a string instead of
// an array of runes.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  lineTerminationChars       string
//     - A string containing a single text character or a series
//       of text characters used to terminate each line of text
//       generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, an error will be returned.
//
//       To eliminate or cancel the Line Termination Sequence,
//       reference method:
//          TextLineSpecPlainText.TurnAutoLineTerminationOff()
//
//       If this string contains more than 1-million (1,000,000)
//       characters, an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) SetLineTerminationChars(
	lineTerminationChars string,
	errorPrefix interface{}) (
	err error) {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"SetLineTerminationChars()",
		"")

	if err != nil {
		return err
	}

	lenLineTerminationChars :=
		len(lineTerminationChars)

	if lenLineTerminationChars == 0 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'lineTerminationChars'\n"+
			"is an empty string!\n",
			ePrefix.String())

		return err
	}

	if lenLineTerminationChars > 1000000 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'lineTerminationChars'\n"+
			"is invalid!\n"+
			"'lineTerminationChars' contains more than 1-million "+
			"(1,000,000) characters\n"+
			"Length of 'lineTerminationChars' = %v\n",
			ePrefix.String(),
			lenLineTerminationChars)

		return err
	}

	plainTextLine.newLineChars = nil

	sMechPreon := strMechPreon{}

	lineTerminationRunes :=
		[]rune(lineTerminationChars)

	_,
		err = sMechPreon.testValidityOfRuneCharArray(
		lineTerminationRunes,
		ePrefix.XCtx(
			"lineTerminationRunes invalid!"))

	if err != nil {
		return err
	}

	return sMechPreon.
		copyRuneArrays(
			&plainTextLine.newLineChars,
			&lineTerminationRunes,
			true,
			ePrefix.XCtx(
				"lineTerminationRunes->"+
					"plainTextLine.newLineChars"))
}

// SetLineTerminationRunes - By default, the line termination
// character for standard lines produced and applied by this text
// line specification is the new line character, '\n'. However,
// users have the option of substituting a character, or series
// of characters, for the line termination sequence using this
// method.
//
// This method will receive an array of runes as input and apply
// the characters in this array as the line termination sequence
// for this instance of TextLineSpecPlainText.
//
// If input parameter 'lineTerminationChars' is submitted as a zero
// length array, or if any of the rune values in this array have a
// zero value, this method will return an error.
//
// By default, the TextLineSpecPlainText type applies the line
// termination characters to each plain text line. However, users
// have the option of monitoring and controlling the application of
// text line terminators by calling the following methods:
//
//   TextLineSpecPlainText.GetLineTerminationChars()
//   TextLineSpecPlainText.GetLineTerminationRunes()
//   TextLineSpecPlainText.SetLineTerminationChars()
//   TextLineSpecPlainText.SetLineTerminationChars()
//   TextLineSpecPlainText.SetLineTerminationRunes()
//   TextLineSpecPlainText.TurnAutoLineTerminationOff()
//   TextLineSpecPlainText.TurnAutoLineTerminationOn()
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  lineTerminationChars       []rune
//     - An array of runes containing the character or characters
//       used to terminate each line of text generated by the
//       current instance of TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       rune array, or if the rune array contains invalid zero
//       rune values, an error will be returned.
//
//       To eliminate or cancel the Line Termination Sequence,
//       reference method:
//          TextLineSpecPlainText.TurnAutoLineTerminationOff()
//
//       If this rune array contains more than 1-million
//       (1,000,000) characters, an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  err                        error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) SetLineTerminationRunes(
	lineTerminationRunes []rune,
	errorPrefix interface{}) (
	err error) {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"SetLineTerminationRunes()",
		"")

	if err != nil {
		return err
	}

	lenLineTerminationRunes :=
		len(lineTerminationRunes)

	if lenLineTerminationRunes == 0 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'lenLineTerminationRunes'\n"+
			"is invalid!\n"+
			"'lenLineTerminationRunes' is a zero length rune array.\n",
			ePrefix.String())

		return err
	}

	if lenLineTerminationRunes > 1000000 {

		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'lineTerminationRunes'\n"+
			"is invalid!\n"+
			"'lineTerminationRunes' contains more than 1-million "+
			"(1,000,000) characters\n"+
			"Length of 'lineTerminationRunes' = %v\n",
			ePrefix.String(),
			lenLineTerminationRunes)

		return err

	}

	sMechPreon := strMechPreon{}

	_,
		err =
		sMechPreon.testValidityOfRuneCharArray(
			lineTerminationRunes,
			ePrefix.XCtx(
				"lineTerminationRunes Error"))

	if err != nil {
		return err
	}

	err =
		sMechPreon.copyRuneArrays(
			&plainTextLine.newLineChars,
			&lineTerminationRunes,
			true,
			ePrefix.XCtx(
				"lineTerminationRunes->"+
					"plainTextLine.newLineChars"))

	return err
}

// SetPlainTextDefault - Deletes and overwrites the member variable
// data values for the current instance of  TextLineSpecPlainText
// using a combination of default values and the values passed
// through input parameters.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Within the returned new instance of TextLineSpecPlainText,
// several member variables will be automatically configured with
// default values.
//
// The left margin will be configured with the number of white
// space characters specified in parameter 'leftMarginSpaces'.
//
// Likewise, the right margin will be configured with the number of
// white space characters specified in parameter
// 'rightMarginSpaces'.
//
// The line of text produced by the returned instance of
// TextLineSpecPlainText will be automatically terminated with a
// new line character ('\n').
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// The pre-existing member variable data fields for the current
// instance of TextLineSpecPlainText will be overwritten and
// deleted.
//
// Member variable plainTxtLine.textLineReader will be set to
// 'nil'.
//
//
// ------------------------------------------------------------------------
//
// Default Values
//
// This method will automatically set the following default values:
//
//  leftMarginChars
//     - Defaults the left margin to the number of white space
//       characters (' ') specified by the integer value passed
//       through input parameter 'leftMarginSpaces'.
//
//
//  rightMarginChars
//     - Defaults the right margin to the number of white space
//       characters (' ') specified by the integer value passed
//       through input parameter 'rightMarginSpaces'.
//
//
//  newLineChars
//     - Defaults the new line character to '\n'.
//
//
//  turnLineTerminatorOff
//     - Defaults to a value of 'false'. This means that the new
//       line character ('\n') WILL BE applied to the line of text
//       produced by the returned instance of TextLineSpecPlainText.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  leftMarginSpaces           int
//     - Controls the number of white space characters (' ') which
//       will comprise the left margin for the current instance of
//       TextLineSpecPlainText.
//
//       If the value of 'leftMarginSpaces' is less than zero, an
//       error will be returned.
//
//       If the value of 'leftMarginSpaces' is greater than
//       one-million (1,000,000), an error will be returned.
//
//
//  rightMarginSpaces           int
//     - Controls the number of white space characters (' ') which
//       will comprise the right margin for the current instance of
//       TextLineSpecPlainText.
//
//       If the value of 'rightMarginSpaces' is less than zero, an
//       error will be returned.
//
//       If the value of 'rightMarginSpaces' is greater than
//       one-million (1,000,000), an error will be returned.
//
//
//  textString                 string
//     - A string of text which will be used to configure the text
//       characters generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, an error will be returned.
//
//       If this string contains more than one-million characters,
//       an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  TextLineSpecPlainText
//     - If this method completes successfully, a new, fully
//       populated instance of TextLineSpecPlainText will be
//       returned.
//
//
//  error
//     - If input parameter 'plainTextLine' is judged to be valid
//       in all respects, this return parameter will be set to
//       'nil'.
//
//       If an error message is returned, the text value for input
//       parameter 'errPrefDto' (error prefix) will be prefixed or
//       attached at the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) SetPlainTextDefault(
	leftMarginSpaces int,
	rightMarginSpaces int,
	textString string,
	errorPrefix interface{}) error {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"SetPlainTextDefault()",
		"")

	if err != nil {
		return err
	}

	return textLineSpecPlainTextNanobot{}.ptr().
		setDefaultPlainTextSpec(
			plainTextLine,
			leftMarginSpaces,
			rightMarginSpaces,
			textString,
			ePrefix.XCtx("plainTextLine"))
}

// SetPlainTextSpec - Resets all the member variable data values
// using the values passed through input parameters.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Left and right margins consist of zero or more characters
// customized and provided by the calling function.
//
// This method is similar to
// TextLineSpecPlainText.SetPlainTextSpecRunes() with the sole
// exception being that this method receives input parameter
// 'textString' as a string instead of an array of runes.
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// The pre-existing data fields for the current instance of
// TextLineSpecPlainText will be overwritten and deleted.
//
//
// ----------------------------------------------------------------
//
//
// Input Parameters
//
//  leftMarginRunes            []rune
//     - An array of runes containing the text characters which
//       will be used to construct the left margin of the plain
//       text line generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'leftMarginRunes' array exceeds a length of
//       one-million array elements, an error will be returned. If
//       any of the array elements has a rune value of zero ('0'),
//       an error will be returned.
//
//
//  rightMarginRunes           []rune
//     - An array of runes containing the text characters which
//       will be used to construct the right margin of the plain
//       text line generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'rightMarginRunes' array exceeds a length of
//       one-million array elements, an error will be returned. If
//       any of the array elements has a rune value of zero ('0'),
//       an error will be returned.
//
//
//  textString                 string
//     - A string of text which will be used to configure the text
//       characters generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, an error will be returned.
//
//       If this string contains more than one-million characters,
//       an error will be returned.
//
//
//  newLineChars               []rune
//     - An array of runes containing the character or characters
//       used to terminate each line of text generated by the
//       current instance of TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       rune array, it will be reset to the default new line value
//       ('\n').
//
//       If the rune array contains invalid zero rune values, an
//       error will be returned.
//
//
//  turnLineTerminatorOff      bool
//     - The 'turnLineTerminatorOff' flag controls whether a line
//       termination character or characters will be automatically
//       appended to each line of text produced by
//       TextLineSpecPlainText.
//
//       When the boolean flag 'turnLineTerminatorOff' is set to
//       'false', line terminators as defined by parameter
//       'newLineChars' WILL BE applied as a line termination
//       sequence for each line of text produced by
//       TextLineSpecPlainText.
//
//       When this boolean value is set to 'true', it turns off or
//       cancels the automatic generation of line terminators for
//       each line of text produced by TextLineSpecStandardLine.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If input parameter 'plainTextLine' is judged to be valid
//       in all respects, this return parameter will be set to
//       'nil'.
//
//       If an error message is returned, the text value for input
//       parameter 'errPrefDto' (error prefix) will be prefixed or
//       attached at the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) SetPlainTextSpec(
	leftMarginChars []rune,
	rightMarginChars []rune,
	textString string,
	newLineChars []rune,
	turnLineTerminatorOff bool,
	errorPrefix interface{}) error {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"SetPlainTextSpec()",
		"")

	if err != nil {
		return err
	}

	return textLineSpecPlainTextAtom{}.ptr().
		setPlainTextSpec(
			plainTextLine,
			leftMarginChars,
			rightMarginChars,
			textString,
			newLineChars,
			turnLineTerminatorOff,
			ePrefix)
}

// SetPlainTextSpecRunes - Resets all the member variable data values
// using the values passed through input parameters.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Left and right margins consist of zero or more characters
// customized and provided by the calling function.
//
// This method is similar to
// TextLineSpecPlainText.SetPlainTextSpec() with the sole exception
// being that this method receives input parameter 'textRunes' as
// an array runes instead of a string.
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// The pre-existing data fields for the current instance of
// TextLineSpecPlainText will be overwritten and deleted.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  leftMarginRunes            []rune
//     - An array of runes containing the text characters which
//       will be used to construct the left margin of the plain
//       text line generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'leftMarginRunes' array exceeds a length of
//       one-million array elements, an error will be returned. If
//       any of the array elements has a rune value of zero ('0'),
//       an error will be returned.
//
//
//  rightMarginRunes           []rune
//     - An array of runes containing the text characters which
//       will be used to construct the right margin of the plain
//       text line generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'rightMarginRunes' array exceeds a length of
//       one-million array elements, an error will be returned. If
//       any of the array elements has a rune value of zero ('0'),
//       an error will be returned.
//
//
//  textRunes                []rune
//     - An array of runes which will be used to configure the text
//       characters generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, an error will be returned.
//
//       If this array contains more than one-million characters,
//       an error will be returned.
//
//
//  newLineChars               []rune
//     - An array of runes containing the character or characters
//       used to terminate each line of text generated by the
//       current instance of TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       rune array, it will be reset to the default new line value
//       ('\n').
//
//       If the rune array contains invalid zero rune values, an
//       error will be returned.
//
//
//  turnLineTerminatorOff      bool
//     - The 'turnLineTerminatorOff' flag controls whether a line
//       termination character or characters will be automatically
//       appended to each line of text produced by
//       TextLineSpecPlainText.
//
//       When the boolean flag 'turnLineTerminatorOff' is set to
//       'false', line terminators as defined by parameter
//       'newLineChars' WILL BE applied as a line termination
//       sequence for each line of text produced by
//       TextLineSpecPlainText.
//
//       When this boolean value is set to 'true', it turns off or
//       cancels the automatic generation of line terminators for
//       each line of text produced by TextLineSpecStandardLine.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If input parameter 'plainTextLine' is judged to be valid
//       in all respects, this return parameter will be set to
//       'nil'.
//
//       If an error message is returned, the text value for input
//       parameter 'errPrefDto' (error prefix) will be prefixed or
//       attached at the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) SetPlainTextSpecRunes(
	leftMarginChars []rune,
	rightMarginChars []rune,
	textRunes []rune,
	newLineChars []rune,
	turnLineTerminatorOff bool,
	errorPrefix interface{}) error {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"SetPlainTextSpecRunes()",
		"")

	if err != nil {
		return err
	}

	return textLineSpecPlainTextNanobot{}.ptr().
		setPlainTextSpecRunes(
			plainTextLine,
			leftMarginChars,
			rightMarginChars,
			textRunes,
			newLineChars,
			turnLineTerminatorOff,
			ePrefix)
}

// SetRightMarginChars - Sets the right margin characters for the
// current TextLineSpecPlainText.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Left and right margins consist of zero or more characters
// customized and provided by the calling function.
//
// This method sets the right margin of the plain text line.
//
// This method is similar to
// TextLineSpecPlainText.SetRightMarginRunes() with the sole
// exception being that this method receives a string instead of an
// array of runes.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  rightMarginChars            string
//     - A string of text characters which will be used to
//       construct the right margin of the plain text line
//       generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, NO error will be generated and the existing right
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'rightMarginChars' string exceeds one-million
//       characters, an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) SetRightMarginChars(
	rightMarginChars string,
	errorPrefix interface{}) error {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"SetRightMarginChars()",
		"")

	if err != nil {
		return err
	}

	lenRightMargin := len(rightMarginChars)

	if lenRightMargin > 1000000 {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'rightMarginsChars' string\n"+
			"exceeds one-million (1,000,000) characters in length.\n"+
			"Length of 'rightMarginsChars' = '%v'\n",
			ePrefix.String(),
			lenRightMargin)

		return err
	}

	if lenRightMargin == 0 {
		plainTextLine.rightMarginChars = nil

		return err
	}

	rightMarginRunes := []rune(rightMarginChars)

	err = strMechPreon{}.ptr().
		copyRuneArrays(
			&plainTextLine.rightMarginChars,
			&rightMarginRunes,
			true,
			ePrefix.XCtx(
				"rightMarginRunes ->"+
					"plainTextLine.rightMarginChars"))

	return err
}

// SetRightMarginRunes - Sets the right margin characters for the
// current TextLineSpecPlainText.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Left and right margins consist of zero or more characters
// customized and provided by the calling function.
//
// This method sets the right margin of the plain text line using
// the array of runes passed an input parameter.
//
// This method is similar to
// TextLineSpecPlainText.SetRightMarginChars() with the sole
// exception being that this method receives an array of runes
// instead of a string.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  rightMarginRunes           []rune
//     - An array of runes containing the text characters which
//       will be used to construct the right margin of the plain
//       text line generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, NO error will be generated and the existing left
//       margin will be effectively eliminated from the plain text
//       line generated by this instance of TextLineSpecPlainText.
//
//       If the 'rightMarginRunes' array exceeds a length of
//       one-million array elements, an error will be returned. If
//       any of the array elements has a rune value of zero ('0'),
//       an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) SetRightMarginRunes(
	rightMarginRunes []rune,
	errorPrefix interface{}) error {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"SetRightMarginRunes()",
		"")

	if err != nil {
		return err
	}

	lenRightMargin := len(rightMarginRunes)

	if lenRightMargin > 1000000 {
		err = fmt.Errorf("%v\n"+
			"Error: The 'rightMarginsRunes' rune array exceeds\n"+
			"one-million (1,000,000) characters in length.\n"+
			"Length of 'rightMarginsRunes' = '%v'\n",
			ePrefix.String(),
			lenRightMargin)

		return err
	}

	if lenRightMargin == 0 {
		plainTextLine.rightMarginChars = nil

		return err
	}

	sMechPreon := strMechPreon{}

	_,
		err = sMechPreon.testValidityOfRuneCharArray(
		rightMarginRunes,
		ePrefix.XCtx(
			"rightMarginRunes invalid!"))

	if err != nil {
		return err
	}

	err = sMechPreon.
		copyRuneArrays(
			&plainTextLine.rightMarginChars,
			&rightMarginRunes,
			true,
			ePrefix.XCtx(
				"rightMarginRunes ->"+
					"plainTextLine.rightMarginChars"))

	return err
}

// SetTextRunes - Sets the text string for the current instance of
// TextLineSpecPlainText.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// This method configures the text string for the current
// TextLineSpecPlainText instance using the array of runes passed
// as an input parameter.
//
// This method is similar to TextLineSpecPlainText.SetTextString()
// with the sole exception being that this method receives an array
// of runes instead of a string.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  textRunes                  []rune
//     - An array of runes which will be used to configure the text
//       characters generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       array, an error will be returned.
//
//       If the 'textRunes' array exceeds a length of
//       one-million array elements, an error will be returned. If
//       any of the array elements has a rune value of zero ('0'),
//       an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
//
func (plainTextLine *TextLineSpecPlainText) SetTextRunes(
	textRunes []rune,
	errorPrefix interface{}) error {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"SetTextRunes()",
		"")

	if err != nil {
		return err
	}

	lenTextRunes := len(textRunes)

	if lenTextRunes > 1000000 {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'textRunes' string exceeds\n"+
			"one-million (1,000,000) characters in length.\n"+
			"Length of 'textRunes' = '%v'\n",
			ePrefix.String(),
			lenTextRunes)

		return err
	}

	if lenTextRunes == 0 {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'textRunes' is empty and\n"+
			"contains zero characters.\n",
			ePrefix.String())

		return err
	}

	_,
		err = strMechPreon{}.ptr().
		testValidityOfRuneCharArray(
			textRunes,
			ePrefix.XCtx(
				"textRunes invalid!"))

	if err != nil {
		return err
	}

	plainTextLine.textString = string(textRunes)

	return err
}

// SetTextString - Sets the text string for the current instance of
// TextLineSpecPlainText.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// This method configures the text string for the current
// TextLineSpecPlainText instance.
//
// This method is similar to TextLineSpecPlainText.SetTextRunes()
// with the sole exception being that this method receives a string
// instead of an array of runes.
//
//
// ------------------------------------------------------------------------
//
// Input Parameters
//
//  textString                 string
//     - A string of text which will be used to configure the text
//       characters generated by the current instance of
//       TextLineSpecPlainText.
//
//       If this parameter is submitted as a zero length or empty
//       string, an error will be returned.
//
//       If this string contains more than one-million characters,
//       an error will be returned.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
//
func (plainTextLine *TextLineSpecPlainText) SetTextString(
	textString string,
	errorPrefix interface{}) error {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText."+
			"SetTextString()",
		"")

	if err != nil {
		return err
	}

	lenTextStr := len(textString)

	if lenTextStr > 1000000 {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'textString' string exceeds\n"+
			"one-million (1,000,000) characters in length.\n"+
			"Length of 'textString' = '%v'\n",
			ePrefix.String(),
			lenTextStr)

		return err
	}

	if lenTextStr == 0 {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'textString' is empty and\n"+
			"contains zero characters.\n",
			ePrefix.String())

		return err
	}

	plainTextLine.textString = textString

	return err
}

// String - Returns the formatted text generated by this Text Line
// Specification for output display and printing.
//
// If an error occurs, the error message will be included in the
// returned string.
//
// This method is similar to
// TextLineSpecPlainText.GetFormattedText() with the sole
// difference being that this method does not return an error.
//
// This method fulfills requirements of the ITextLineSpecification
// interface.
//
// This method also fulfills the requirements of the 'Stringer'
// interface defined in the Golang package 'fmt'. Reference:
//   https://pkg.go.dev/fmt#Stringer
//
// Methods which return formatted text are listed as follows:
//  TextLineSpecPlainText.String()
//  TextLineSpecPlainText.TextBuilder()
//  TextLineSpecPlainText.GetFormattedText()
//
func (plainTextLine TextLineSpecPlainText) String() string {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	ePrefix := ePref.ErrPrefixDto{}.NewEPrefCtx(
		"TextLineSpecPlainText.GetFormattedText()",
		"")

	formattedTxtStr,
		err := textLineSpecPlainTextNanobot{}.ptr().
		getFormattedText(
			&plainTextLine,
			ePrefix.XCtx("plainTextLine"))

	if err != nil {
		formattedTxtStr = fmt.Sprintf("%v\n",
			err.Error())
	}

	return formattedTxtStr
}

// TextBuilder - Configures the line of text produced by this
// instance of TextLineSpecPlainText, and writes it to an instance
// of strings.Builder.
//
// This method fulfills requirements of the ITextLineSpecification
// interface.
//
// Methods which return formatted text are listed as follows:
//  TextLineSpecPlainText.String()
//  TextLineSpecPlainText.TextBuilder()
//  TextLineSpecPlainText.GetFormattedText()
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  sBuilder                   *strings.Builder
//    - A pointer to an instance of strings.Builder. The line of
//      text produced by the current instance of
//      TextLineSpecPlainText and writes that text to 'sBuilder'.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) TextBuilder(
	sBuilder *strings.Builder,
	errorPrefix interface{}) error {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText.TextBuilder()",
		"")

	if err != nil {
		return err
	}

	if sBuilder == nil {
		err = fmt.Errorf("%v\n"+
			"Error: Input parameter 'sBuilder' (strings.Builder)\n"+
			"is invalid! 'sBuilder' is a 'nil' pointer.\n",
			ePrefix.String())

		return err
	}

	var formattedTxtStr string

	formattedTxtStr,
		err = textLineSpecPlainTextNanobot{}.ptr().
		getFormattedText(
			plainTextLine,
			ePrefix.XCtx("plainTextLine"))

	if err != nil {
		return err
	}

	var err2 error

	_,
		err2 = sBuilder.WriteString(formattedTxtStr)

	if err2 != nil {
		err = fmt.Errorf("%v\n"+
			"Error returned by sBuilder.WriteString(formattedTxtStr)\n"+
			"%v\n",
			ePrefix.XCtxEmpty().String(),
			err2.Error())
	}

	return err
}

// TextLineSpecName - returns a string specifying the name
// of this Text Line Specification.
//
// This method fulfills requirements of ITextLineSpecification
// interface.
//
func (plainTextLine *TextLineSpecPlainText) TextLineSpecName() string {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	return "TextLineSpecPlainText"
}

// TextTypeName - returns a string specifying the type
// of Text Line Specification.
//
// This method fulfills requirements of ITextSpecification
// interface.
//
func (plainTextLine *TextLineSpecPlainText) TextTypeName() string {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	return "TextLineSpecPlainText"
}

// TurnAutoLineTerminationOff - Turns off or cancels the automatic
// generation of new line terminators for the line of text
// produced by this instance of TextLineSpecPlainText.
//
// When the member variable 'turnLineTerminatorOff' is set to
// 'true', line terminators as defined by member variable
// 'newLineChars' WILL NOT be applied as a line termination sequence
// for the line of text produced by TextLineSpecPlainText.
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// This method will always set 'turnLineTerminatorOff' to 'true'
// thereby removing new line terminators for the line of text
// produced by this instance of TextLineSpecPlainText.
//
// ----------------------------------------------------------------
//
// In contrast, method
// TextLineSpecPlainText.TurnAutoLineTerminationOn will always
// set member variable 'turnLineTerminatorOff' to 'false'. This
// means that the automatic generation of line terminators is
// 'turned on' and a line termination sequence WILL BE applied for
// the line of text produced by TextLineSpecPlainText.
//
// The default line terminator is the new line character ('\n')
// which is defined by member variable 'newLineChars'. However,
// this value is subject to user control and may be overridden by
// one or more characters supplied by the user.
//
// Again, this method will always set 'turnLineTerminatorOff' to
// 'true'.  This means that line terminators WILL NOT BE applied to
// each line of text produced by this instance of TextLineSpecPlainText.
//
func (plainTextLine *TextLineSpecPlainText) TurnAutoLineTerminationOff() {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	plainTextLine.turnLineTerminatorOff = true
}

// TurnAutoLineTerminationOn - Turns on or engages the automatic
// generation of new line terminators for the line of text
// produced by this instance of TextLineSpecPlainText.
//
// This means that a new line termination sequence with characters
// defined by member variable 'newLineChars' WILL BE applied to
// the line of text produced by the current instance of
// TextLineSpecPlainText.
//
// When the member variable 'turnLineTerminatorOff' is set to
// 'false', line terminators as defined by member variable
// 'newLineChars' WILL BE applied as a line termination sequence
// for each line of text produced by TextLineSpecPlainText.
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// This method will always set 'turnLineTerminatorOff' to 'false'
// thereby ensuring that line termination characters WILL BE
// automatically appended to the line of text produced by the
// current instance of TextLineSpecPlainText.
//
// ----------------------------------------------------------------
//
// In contrast, method
// TextLineSpecPlainText.TurnAutoLineTerminationOff will always
// set member variable 'turnLineTerminatorOff' to 'true'. This
// means that the automatic generation of line terminators is
// 'turned off' and a line termination sequence WILL NOT BE applied
// for the line of text produced by TextLineSpecPlainText.
//
// The default line terminator is the new line character ('\n')
// which is defined by member variable 'newLineChars'. However,
// this value is subject to user control and may be overridden by
// one or more characters supplied by the user.
//
// Again, this method will always set 'turnLineTerminatorOff' to
// 'false' meaning that line terminators WILL BE applied to
// the line of text produced by this instance of TextLineSpecPlainText.
//
func (plainTextLine *TextLineSpecPlainText) TurnAutoLineTerminationOn() {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	plainTextLine.turnLineTerminatorOff = false
}
