package strmech

import (
	ePref "github.com/MikeAustin71/errpref"
	"sync"
)

// TextLineSpecPlainText - Used to create a line of text from a
// simple text string.
//
// The TextLineSpecPlainText type provides formatting
// specifications for a simple line of text characters for text
// display, file output or printing.
//
// The plain text line consists of a left margin, the text string,
// the right margin and a line termination character or characters.
// The line termination character is usually a new line character
// ('\n').
//
// Left and right margins consist of zero or more characters
// customized and provided by the calling function.
//
// IMPORTANT
//
// ----------------------------------------------------------------
//
// By default, the TextLineSpecPlainText type will generate a
// line of text with a "new line" ('\n') line termination
// character. The application of this "new line" ('\n') character
// is automatic and by default.
//
// However, users may customize and override the application of
// line termination characters through the following methods:
//
//  TextLineSpecPlainText.SetLineTerminationChars()
//  TextLineSpecPlainText.TurnAutoLineTerminationOff()
//  TextLineSpecPlainText.TurnAutoLineTerminationOn()
//
//
// The TextLineSpecPlainText type implements the
// ITextLineSpecification interface.
//
//
// Member Variables
//
// ----------------------------------------------------------------
//
//  leftMarginChars            []rune
//     - An array of runes containing the text characters which
//       will be used as the left margin of the formatted text
//       string. The number of left margin characters is restricted
//       to a range from zero (0) to one-million (1,000,000),
//       inclusive.
//
//
//  rightMarginChars           []rune
//     - An array of runes containing the text characters which
//       will be used as the right margin of the formatted text
//       string. The number of right margin characters is
//       restricted to a range from zero (0) to one-million
//       (1,000,000), inclusive.
//
//
//  textString                 string
//     - A string of text characters supplied by the user which
//       will be positioned between the left and right margins when
//       constructing the formatted line of text generated for text
//       display, file output or printing.
//
//
//  newLineChars               []rune
//     - By default, each line of text generated by
//       TextLineSpecPlainText will be terminated with a new line
//       character ('\n'). However, users have the option to
//       override and modify this behavior by supplying an
//       alternative character or characters to be used as a line
//       termination sequence for each line of text produced by the
//       current TextLineSpecPlainText instance.
//
//       To override, change or control the behavior of
//       'newLineChars', see the following methods:
//         TextLineSpecPlainText.GetLineTerminationRunes()
//         TextLineSpecPlainText.SetLineTerminationChars()
//         TextLineSpecPlainText.SetLineTerminationRunes()
//         TextLineSpecPlainText.TurnAutoLineTerminationOff()
//
//
type TextLineSpecPlainText struct {
	leftMarginChars       []rune
	rightMarginChars      []rune
	textString            string
	turnLineTerminatorOff bool
	newLineChars          []rune
	lock                  *sync.Mutex
}

// CopyIn - Copies the data fields from an incoming instance of
// TextLineSpecPlainText ('incomingPlainTxtLine') to the data
// fields of the current TextLineSpecPlainText instance
// ('plainTextLine').
//
// ----------------------------------------------------------------
//
// IMPORTANT
//
// All the data fields in current TextLineSpecPlainText instance
// ('plainTextLine') will be deleted and overwritten.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  incomingPlainTxtLine       *TextLineSpecPlainText
//     - A pointer to an instance of TextLineSpecPlainText. This
//       method will NOT change the data values of member variables
//       contained in this instance.
//
//       All data values in this TextLineSpecPlainText instance
//       will be copied to the current TextLineSpecPlainText
//       instance ('plainTextLine').
//
//       If 'incomingPlainTextLine' contains invalid member
//       variable data values, this method will return an error.
//
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this
//       parameter to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings
//                      containing error prefix and error context
//                      information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package,
//       "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) CopyIn(
	incomingPlainTxtLine *TextLineSpecPlainText,
	errorPrefix interface{}) error {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText.CopyIn()",
		"")

	if err != nil {
		return err
	}

	err = textLineSpecPlainTextNanobot{}.ptr().
		copyIn(
			plainTextLine,
			incomingPlainTxtLine,
			ePrefix)

	return err
}

// CopyOut - Returns a deep copy of the current
// TextLineSpecPlainText instance.
//
// If the current TextLineSpecPlainText instance contains invalid
// member variables, this method will return an error.
//
//
// ----------------------------------------------------------------
//
// Input Parameters
//
//  errorPrefix                interface{}
//     - This object encapsulates error prefix text which is
//       included in all returned error messages. Usually, it
//       contains the name of the calling method or methods
//       listed as a method or function chain of execution.
//
//       If no error prefix information is needed, set this parameter
//       to 'nil'.
//
//       This empty interface must be convertible to one of the
//       following types:
//
//
//       1. nil - A nil value is valid and generates an empty
//                collection of error prefix and error context
//                information.
//
//       2. string - A string containing error prefix information.
//
//       3. []string A one-dimensional slice of strings containing
//                   error prefix information
//
//       4. [][2]string A two-dimensional slice of strings containing
//                      error prefix and error context information.
//
//       5. ErrPrefixDto - An instance of ErrPrefixDto. The
//                         ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       6. *ErrPrefixDto - A pointer to an instance of ErrPrefixDto.
//                          ErrorPrefixInfo from this object will be
//                         copied to 'errPrefDto'.
//
//       7. IBasicErrorPrefix - An interface to a method generating
//                              a two-dimensional slice of strings
//                              containing error prefix and error
//                              context information.
//
//       If parameter 'errorPrefix' is NOT convertible to one of
//       the valid types listed above, it will be considered
//       invalid and trigger the return of an error.
//
//       Types ErrPrefixDto and IBasicErrorPrefix are included in
//       the 'errpref' software package, "github.com/MikeAustin71/errpref".
//
//
// ------------------------------------------------------------------------
//
// Return Values
//
//  TextLineSpecPlainText
//     - If this method completes successfully and no errors are
//       encountered, this parameter will return a deep copy of the
//       current TextLineSpecPlainText instance.
//
//
//  error
//     - If the method completes successfully and no errors are
//       encountered this return value is set to 'nil'. Otherwise,
//       if errors are encountered, this return value will contain
//       an appropriate error message.
//
//       If an error message is returned, the text value of input
//       parameter 'errorPrefix' will be inserted or prefixed at
//       the beginning of the error message.
//
func (plainTextLine *TextLineSpecPlainText) CopyOut(
	errorPrefix interface{}) (
	TextLineSpecPlainText,
	error) {

	if plainTextLine.lock == nil {
		plainTextLine.lock = new(sync.Mutex)
	}

	plainTextLine.lock.Lock()

	defer plainTextLine.lock.Unlock()

	var ePrefix *ePref.ErrPrefixDto
	var err error

	ePrefix,
		err = ePref.ErrPrefixDto{}.NewIEmpty(
		errorPrefix,
		"TextLineSpecPlainText.CopyOut()",
		"")

	if err != nil {
		return TextLineSpecPlainText{}, err
	}

	var newPlainTxtLine TextLineSpecPlainText

	newPlainTxtLine,
		err = textLineSpecPlainTextNanobot{}.ptr().
		copyOut(
			plainTextLine,
			ePrefix.XCtx(
				"plainTextLine"))

	return newPlainTxtLine, err
}
